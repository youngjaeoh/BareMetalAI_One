
stm32h743.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000971c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000729c  080099c0  080099c0  0000a9c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010c5c  08010c5c  00011c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010c64  08010c64  00011c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08010c68  08010c68  00011c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000248  24000000  08010c6c  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000950  24000248  08010eb4  00012248  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24000b98  08010eb4  00012b98  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00012248  2**0
                  CONTENTS, READONLY
 10 .debug_info   000244c1  00000000  00000000  00012276  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004917  00000000  00000000  00036737  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 00011132  00000000  00000000  0003b04e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001420  00000000  00000000  0004c180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001a6b  00000000  00000000  0004d5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003d1cb  00000000  00000000  0004f00b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002b4ae  00000000  00000000  0008c1d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00170f27  00000000  00000000  000b7684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  002285ab  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000048f4  00000000  00000000  002285f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000006a  00000000  00000000  0022cee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000248 	.word	0x24000248
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080099a4 	.word	0x080099a4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400024c 	.word	0x2400024c
 80002dc:	080099a4 	.word	0x080099a4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <lcd_gettick>:
	return result;
}

static int32_t lcd_gettick(void)
{
	return HAL_GetTick();
 80006bc:	f001 beb2 	b.w	8002424 <HAL_GetTick>

080006c0 <lcd_recvdata>:
	result = result>0? -1:0;
	return result;
}

static int32_t lcd_recvdata(uint8_t* pdata,uint32_t length)
{
 80006c0:	b570      	push	{r4, r5, r6, lr}
	int32_t result;
	LCD_CS_RESET;
 80006c2:	4e0e      	ldr	r6, [pc, #56]	@ (80006fc <lcd_recvdata+0x3c>)
{
 80006c4:	460d      	mov	r5, r1
 80006c6:	4604      	mov	r4, r0
	LCD_CS_RESET;
 80006c8:	2200      	movs	r2, #0
 80006ca:	4630      	mov	r0, r6
 80006cc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006d0:	f002 fce4 	bl	800309c <HAL_GPIO_WritePin>
	//LCD_RS_SET;
	result = HAL_SPI_Receive(SPI_Drv,pdata,length,500);
 80006d4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80006d8:	b2aa      	uxth	r2, r5
 80006da:	4621      	mov	r1, r4
 80006dc:	4808      	ldr	r0, [pc, #32]	@ (8000700 <lcd_recvdata+0x40>)
 80006de:	f004 ffcb 	bl	8005678 <HAL_SPI_Receive>
 80006e2:	4604      	mov	r4, r0
	LCD_CS_SET;
 80006e4:	2201      	movs	r2, #1
 80006e6:	4630      	mov	r0, r6
 80006e8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006ec:	f002 fcd6 	bl	800309c <HAL_GPIO_WritePin>
	result = result>0? -1:0;
 80006f0:	1e20      	subs	r0, r4, #0
 80006f2:	bf18      	it	ne
 80006f4:	2001      	movne	r0, #1
	return result;
}
 80006f6:	4240      	negs	r0, r0
 80006f8:	bd70      	pop	{r4, r5, r6, pc}
 80006fa:	bf00      	nop
 80006fc:	58021000 	.word	0x58021000
 8000700:	24000890 	.word	0x24000890

08000704 <lcd_senddata>:
{
 8000704:	b570      	push	{r4, r5, r6, lr}
	LCD_CS_RESET;
 8000706:	4e0d      	ldr	r6, [pc, #52]	@ (800073c <lcd_senddata+0x38>)
{
 8000708:	460d      	mov	r5, r1
 800070a:	4604      	mov	r4, r0
	LCD_CS_RESET;
 800070c:	2200      	movs	r2, #0
 800070e:	4630      	mov	r0, r6
 8000710:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000714:	f002 fcc2 	bl	800309c <HAL_GPIO_WritePin>
	result =HAL_SPI_Transmit(SPI_Drv,pdata,length,100);
 8000718:	2364      	movs	r3, #100	@ 0x64
 800071a:	b2aa      	uxth	r2, r5
 800071c:	4621      	mov	r1, r4
 800071e:	4808      	ldr	r0, [pc, #32]	@ (8000740 <lcd_senddata+0x3c>)
 8000720:	f004 fcb4 	bl	800508c <HAL_SPI_Transmit>
 8000724:	4604      	mov	r4, r0
	LCD_CS_SET;
 8000726:	2201      	movs	r2, #1
 8000728:	4630      	mov	r0, r6
 800072a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800072e:	f002 fcb5 	bl	800309c <HAL_GPIO_WritePin>
	result = result>0? -1:0;
 8000732:	1e20      	subs	r0, r4, #0
 8000734:	bf18      	it	ne
 8000736:	2001      	movne	r0, #1
}
 8000738:	4240      	negs	r0, r0
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	58021000 	.word	0x58021000
 8000740:	24000890 	.word	0x24000890

08000744 <lcd_readreg>:
{
 8000744:	b5f0      	push	{r4, r5, r6, r7, lr}
	LCD_CS_RESET;
 8000746:	4d1a      	ldr	r5, [pc, #104]	@ (80007b0 <lcd_readreg+0x6c>)
{
 8000748:	b083      	sub	sp, #12
 800074a:	460c      	mov	r4, r1
	result = HAL_SPI_Transmit(SPI_Drv,&reg,1,100);
 800074c:	4f19      	ldr	r7, [pc, #100]	@ (80007b4 <lcd_readreg+0x70>)
{
 800074e:	f88d 0007 	strb.w	r0, [sp, #7]
	LCD_CS_RESET;
 8000752:	2200      	movs	r2, #0
 8000754:	4628      	mov	r0, r5
 8000756:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800075a:	f002 fc9f 	bl	800309c <HAL_GPIO_WritePin>
	LCD_RS_RESET;
 800075e:	4628      	mov	r0, r5
 8000760:	2200      	movs	r2, #0
 8000762:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000766:	f002 fc99 	bl	800309c <HAL_GPIO_WritePin>
	result = HAL_SPI_Transmit(SPI_Drv,&reg,1,100);
 800076a:	2364      	movs	r3, #100	@ 0x64
 800076c:	f10d 0107 	add.w	r1, sp, #7
 8000770:	2201      	movs	r2, #1
 8000772:	4638      	mov	r0, r7
 8000774:	f004 fc8a 	bl	800508c <HAL_SPI_Transmit>
	LCD_RS_SET;
 8000778:	2201      	movs	r2, #1
	result = HAL_SPI_Transmit(SPI_Drv,&reg,1,100);
 800077a:	4606      	mov	r6, r0
	LCD_RS_SET;
 800077c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000780:	4628      	mov	r0, r5
 8000782:	f002 fc8b 	bl	800309c <HAL_GPIO_WritePin>
	result += HAL_SPI_Receive(SPI_Drv,pdata,1,500);
 8000786:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800078a:	4621      	mov	r1, r4
 800078c:	4638      	mov	r0, r7
 800078e:	2201      	movs	r2, #1
 8000790:	f004 ff72 	bl	8005678 <HAL_SPI_Receive>
 8000794:	4604      	mov	r4, r0
	LCD_CS_SET;
 8000796:	2201      	movs	r2, #1
 8000798:	4628      	mov	r0, r5
	result += HAL_SPI_Receive(SPI_Drv,pdata,1,500);
 800079a:	4434      	add	r4, r6
	LCD_CS_SET;
 800079c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007a0:	f002 fc7c 	bl	800309c <HAL_GPIO_WritePin>
	result = result>0? -1:0;
 80007a4:	1e20      	subs	r0, r4, #0
 80007a6:	bf18      	it	ne
 80007a8:	2001      	movne	r0, #1
}
 80007aa:	4240      	negs	r0, r0
 80007ac:	b003      	add	sp, #12
 80007ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007b0:	58021000 	.word	0x58021000
 80007b4:	24000890 	.word	0x24000890

080007b8 <lcd_writereg>:
{
 80007b8:	b570      	push	{r4, r5, r6, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	4615      	mov	r5, r2
 80007be:	460e      	mov	r6, r1
	LCD_CS_RESET;
 80007c0:	2200      	movs	r2, #0
 80007c2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
{
 80007c6:	f88d 0007 	strb.w	r0, [sp, #7]
	LCD_CS_RESET;
 80007ca:	4816      	ldr	r0, [pc, #88]	@ (8000824 <lcd_writereg+0x6c>)
 80007cc:	f002 fc66 	bl	800309c <HAL_GPIO_WritePin>
	LCD_RS_RESET;
 80007d0:	2200      	movs	r2, #0
 80007d2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007d6:	4813      	ldr	r0, [pc, #76]	@ (8000824 <lcd_writereg+0x6c>)
 80007d8:	f002 fc60 	bl	800309c <HAL_GPIO_WritePin>
	result = HAL_SPI_Transmit(SPI_Drv,&reg,1,100);
 80007dc:	2201      	movs	r2, #1
 80007de:	f10d 0107 	add.w	r1, sp, #7
 80007e2:	2364      	movs	r3, #100	@ 0x64
 80007e4:	4810      	ldr	r0, [pc, #64]	@ (8000828 <lcd_writereg+0x70>)
 80007e6:	f004 fc51 	bl	800508c <HAL_SPI_Transmit>
	LCD_RS_SET;
 80007ea:	2201      	movs	r2, #1
	result = HAL_SPI_Transmit(SPI_Drv,&reg,1,100);
 80007ec:	4604      	mov	r4, r0
	LCD_RS_SET;
 80007ee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007f2:	480c      	ldr	r0, [pc, #48]	@ (8000824 <lcd_writereg+0x6c>)
 80007f4:	f002 fc52 	bl	800309c <HAL_GPIO_WritePin>
	if(length > 0)
 80007f8:	b95d      	cbnz	r5, 8000812 <lcd_writereg+0x5a>
	LCD_CS_SET;
 80007fa:	2201      	movs	r2, #1
 80007fc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000800:	4808      	ldr	r0, [pc, #32]	@ (8000824 <lcd_writereg+0x6c>)
 8000802:	f002 fc4b 	bl	800309c <HAL_GPIO_WritePin>
	result = result>0? -1:0;
 8000806:	1e20      	subs	r0, r4, #0
 8000808:	bf18      	it	ne
 800080a:	2001      	movne	r0, #1
}
 800080c:	4240      	negs	r0, r0
 800080e:	b002      	add	sp, #8
 8000810:	bd70      	pop	{r4, r5, r6, pc}
		result += HAL_SPI_Transmit(SPI_Drv,pdata,length,500);
 8000812:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000816:	b2aa      	uxth	r2, r5
 8000818:	4631      	mov	r1, r6
 800081a:	4803      	ldr	r0, [pc, #12]	@ (8000828 <lcd_writereg+0x70>)
 800081c:	f004 fc36 	bl	800508c <HAL_SPI_Transmit>
 8000820:	4404      	add	r4, r0
 8000822:	e7ea      	b.n	80007fa <lcd_writereg+0x42>
 8000824:	58021000 	.word	0x58021000
 8000828:	24000890 	.word	0x24000890

0800082c <lcd_init>:
	HAL_TIMEx_PWMN_Start(LCD_Brightness_timer,LCD_Brightness_channel);
 800082c:	2104      	movs	r1, #4
 800082e:	4803      	ldr	r0, [pc, #12]	@ (800083c <lcd_init+0x10>)
{
 8000830:	b508      	push	{r3, lr}
	HAL_TIMEx_PWMN_Start(LCD_Brightness_timer,LCD_Brightness_channel);
 8000832:	f005 fb99 	bl	8005f68 <HAL_TIMEx_PWMN_Start>
}
 8000836:	2000      	movs	r0, #0
 8000838:	bd08      	pop	{r3, pc}
 800083a:	bf00      	nop
 800083c:	24000968 	.word	0x24000968

08000840 <LCD_ShowString.constprop.0>:
void LCD_ShowString(uint16_t x,uint16_t y,uint16_t width,uint16_t height,uint8_t size,uint8_t *p)
 8000840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000844:	b08f      	sub	sp, #60	@ 0x3c
	width+=x;
 8000846:	4402      	add	r2, r0
void LCD_ShowString(uint16_t x,uint16_t y,uint16_t width,uint16_t height,uint8_t size,uint8_t *p)
 8000848:	468a      	mov	sl, r1
	height+=y;
 800084a:	3110      	adds	r1, #16
void LCD_ShowString(uint16_t x,uint16_t y,uint16_t width,uint16_t height,uint8_t size,uint8_t *p)
 800084c:	af02      	add	r7, sp, #8
	width+=x;
 800084e:	b292      	uxth	r2, r2
void LCD_ShowString(uint16_t x,uint16_t y,uint16_t width,uint16_t height,uint8_t size,uint8_t *p)
 8000850:	61fb      	str	r3, [r7, #28]
    while((*p<='~')&&(*p>=' '))//�ж��ǲ��ǷǷ��ַ�!
 8000852:	781b      	ldrb	r3, [r3, #0]
	width+=x;
 8000854:	60fa      	str	r2, [r7, #12]
	height+=y;
 8000856:	b28a      	uxth	r2, r1
    while((*p<='~')&&(*p>=' '))//�ж��ǲ��ǷǷ��ַ�!
 8000858:	3b20      	subs	r3, #32
	height+=y;
 800085a:	60ba      	str	r2, [r7, #8]
    while((*p<='~')&&(*p>=' '))//�ж��ǲ��ǷǷ��ַ�!
 800085c:	fa5f f983 	uxtb.w	r9, r3
 8000860:	f1b9 0f5e 	cmp.w	r9, #94	@ 0x5e
 8000864:	f200 8134 	bhi.w	8000ad0 <LCD_ShowString.constprop.0+0x290>
 8000868:	b2c3      	uxtb	r3, r0
 800086a:	4683      	mov	fp, r0
 800086c:	607b      	str	r3, [r7, #4]
        if(x>=width){x=x0;y+=size;}
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	455b      	cmp	r3, fp
 8000872:	d805      	bhi.n	8000880 <LCD_ShowString.constprop.0+0x40>
 8000874:	f10a 0a10 	add.w	sl, sl, #16
 8000878:	f8d7 b004 	ldr.w	fp, [r7, #4]
 800087c:	fa1f fa8a 	uxth.w	sl, sl
        if(y>=height)break;//�˳�
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	4553      	cmp	r3, sl
 8000884:	f240 8124 	bls.w	8000ad0 <LCD_ShowString.constprop.0+0x290>
	uint16_t colortemp=POINT_COLOR; 
 8000888:	4b9c      	ldr	r3, [pc, #624]	@ (8000afc <LCD_ShowString.constprop.0+0x2bc>)
  ST7735_GetXSize(&st7735_pObj,&w);
 800088a:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
{  							  
 800088e:	f8c7 d018 	str.w	sp, [r7, #24]
	uint16_t write[size][size==12?6:8];
 8000892:	b0c0      	sub	sp, #256	@ 0x100
  ST7735_GetXSize(&st7735_pObj,&w);
 8000894:	489a      	ldr	r0, [pc, #616]	@ (8000b00 <LCD_ShowString.constprop.0+0x2c0>)
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 8000896:	4654      	mov	r4, sl
	uint16_t colortemp=POINT_COLOR; 
 8000898:	881d      	ldrh	r5, [r3, #0]
  ST7735_GetXSize(&st7735_pObj,&w);
 800089a:	f000 fd91 	bl	80013c0 <ST7735_GetXSize>
	ST7735_GetYSize(&st7735_pObj,&h);
 800089e:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80008a2:	4897      	ldr	r0, [pc, #604]	@ (8000b00 <LCD_ShowString.constprop.0+0x2c0>)
 80008a4:	f000 fd94 	bl	80013d0 <ST7735_GetYSize>
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 80008a8:	4b96      	ldr	r3, [pc, #600]	@ (8000b04 <LCD_ShowString.constprop.0+0x2c4>)
 80008aa:	4997      	ldr	r1, [pc, #604]	@ (8000b08 <LCD_ShowString.constprop.0+0x2c8>)
					POINT_COLOR=(colortemp&0xFF)<<8|colortemp>>8;
 80008ac:	ba6a      	rev16	r2, r5
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 80008ae:	881e      	ldrh	r6, [r3, #0]
 80008b0:	f04f 33ff 	mov.w	r3, #4294967295
	uint16_t write[size][size==12?6:8];
 80008b4:	f10d 0808 	add.w	r8, sp, #8
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 80008b8:	f8d7 e028 	ldr.w	lr, [r7, #40]	@ 0x28
 80008bc:	eb03 1309 	add.w	r3, r3, r9, lsl #4
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 80008c0:	ba76      	rev16	r6, r6
					POINT_COLOR=(colortemp&0xFF)<<8|colortemp>>8;
 80008c2:	b292      	uxth	r2, r2
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 80008c4:	f8c7 b020 	str.w	fp, [r7, #32]
 80008c8:	440b      	add	r3, r1
	count = 0;
 80008ca:	2100      	movs	r1, #0
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 80008cc:	b2b6      	uxth	r6, r6
		for(t=0;t<size;t++)
 80008ce:	4689      	mov	r9, r1
 80008d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80008d2:	e9c7 5b04 	strd	r5, fp, [r7, #16]
				count ++;
 80008d6:	1c48      	adds	r0, r1, #1
				write[count][t/2]=POINT_COLOR;
 80008d8:	00cb      	lsls	r3, r1, #3
				y++;
 80008da:	f104 0c01 	add.w	ip, r4, #1
				count ++;
 80008de:	b281      	uxth	r1, r0
				if(temp&0x80)
 80008e0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
				y++;
 80008e2:	fa1f fc8c 	uxth.w	ip, ip
				if(temp&0x80)
 80008e6:	f910 5f01 	ldrsb.w	r5, [r0, #1]!
				write[count][t/2]=POINT_COLOR;
 80008ea:	eb03 0359 	add.w	r3, r3, r9, lsr #1
				if(temp&0x80)
 80008ee:	6278      	str	r0, [r7, #36]	@ 0x24
					POINT_COLOR=(colortemp&0xFF)<<8|colortemp>>8;
 80008f0:	ea36 0025 	bics.w	r0, r6, r5, asr #32
 80008f4:	bf28      	it	cs
 80008f6:	4610      	movcs	r0, r2
				if(count >= size) count =0;
 80008f8:	2910      	cmp	r1, #16
				write[count][t/2]=POINT_COLOR;
 80008fa:	f828 0013 	strh.w	r0, [r8, r3, lsl #1]
 80008fe:	ea4f 0359 	mov.w	r3, r9, lsr #1
				if(count >= size) count =0;
 8000902:	bf08      	it	eq
 8000904:	2100      	moveq	r1, #0
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 8000906:	45e6      	cmp	lr, ip
 8000908:	f240 80e6 	bls.w	8000ad8 <LCD_ShowString.constprop.0+0x298>
				if((y-y0)==size)
 800090c:	ebac 0c0a 	sub.w	ip, ip, sl
 8000910:	f1bc 0f10 	cmp.w	ip, #16
 8000914:	f000 80e7 	beq.w	8000ae6 <LCD_ShowString.constprop.0+0x2a6>
				count ++;
 8000918:	1c48      	adds	r0, r1, #1
					POINT_COLOR=(colortemp&0xFF)<<8|colortemp>>8;
 800091a:	f015 0f40 	tst.w	r5, #64	@ 0x40
				write[count][t/2]=POINT_COLOR;
 800091e:	eb03 0bc1 	add.w	fp, r3, r1, lsl #3
				y++;
 8000922:	f104 0c02 	add.w	ip, r4, #2
				count ++;
 8000926:	b281      	uxth	r1, r0
					POINT_COLOR=(colortemp&0xFF)<<8|colortemp>>8;
 8000928:	bf0c      	ite	eq
 800092a:	4630      	moveq	r0, r6
 800092c:	4610      	movne	r0, r2
				y++;
 800092e:	fa1f fc8c 	uxth.w	ip, ip
				if(count >= size) count =0;
 8000932:	2910      	cmp	r1, #16
				write[count][t/2]=POINT_COLOR;
 8000934:	f828 001b 	strh.w	r0, [r8, fp, lsl #1]
				if(count >= size) count =0;
 8000938:	bf08      	it	eq
 800093a:	2100      	moveq	r1, #0
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 800093c:	45f4      	cmp	ip, lr
 800093e:	f080 80cb 	bcs.w	8000ad8 <LCD_ShowString.constprop.0+0x298>
				if((y-y0)==size)
 8000942:	ebac 0c0a 	sub.w	ip, ip, sl
 8000946:	f1bc 0f10 	cmp.w	ip, #16
 800094a:	f000 80cc 	beq.w	8000ae6 <LCD_ShowString.constprop.0+0x2a6>
				count ++;
 800094e:	1c48      	adds	r0, r1, #1
					POINT_COLOR=(colortemp&0xFF)<<8|colortemp>>8;
 8000950:	f015 0f20 	tst.w	r5, #32
				write[count][t/2]=POINT_COLOR;
 8000954:	eb03 0bc1 	add.w	fp, r3, r1, lsl #3
				y++;
 8000958:	f104 0c03 	add.w	ip, r4, #3
				count ++;
 800095c:	b281      	uxth	r1, r0
					POINT_COLOR=(colortemp&0xFF)<<8|colortemp>>8;
 800095e:	bf0c      	ite	eq
 8000960:	4630      	moveq	r0, r6
 8000962:	4610      	movne	r0, r2
				y++;
 8000964:	fa1f fc8c 	uxth.w	ip, ip
				if(count >= size) count =0;
 8000968:	2910      	cmp	r1, #16
				write[count][t/2]=POINT_COLOR;
 800096a:	f828 001b 	strh.w	r0, [r8, fp, lsl #1]
				if(count >= size) count =0;
 800096e:	bf08      	it	eq
 8000970:	2100      	moveq	r1, #0
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 8000972:	45e6      	cmp	lr, ip
 8000974:	f240 80b0 	bls.w	8000ad8 <LCD_ShowString.constprop.0+0x298>
				if((y-y0)==size)
 8000978:	ebac 0c0a 	sub.w	ip, ip, sl
 800097c:	f1bc 0f10 	cmp.w	ip, #16
 8000980:	f000 80b1 	beq.w	8000ae6 <LCD_ShowString.constprop.0+0x2a6>
				count ++;
 8000984:	1c48      	adds	r0, r1, #1
					POINT_COLOR=(colortemp&0xFF)<<8|colortemp>>8;
 8000986:	f015 0f10 	tst.w	r5, #16
				write[count][t/2]=POINT_COLOR;
 800098a:	eb03 0bc1 	add.w	fp, r3, r1, lsl #3
				y++;
 800098e:	f104 0c04 	add.w	ip, r4, #4
				count ++;
 8000992:	b281      	uxth	r1, r0
					POINT_COLOR=(colortemp&0xFF)<<8|colortemp>>8;
 8000994:	bf0c      	ite	eq
 8000996:	4630      	moveq	r0, r6
 8000998:	4610      	movne	r0, r2
				y++;
 800099a:	fa1f fc8c 	uxth.w	ip, ip
				if(count >= size) count =0;
 800099e:	2910      	cmp	r1, #16
				write[count][t/2]=POINT_COLOR;
 80009a0:	f828 001b 	strh.w	r0, [r8, fp, lsl #1]
				if(count >= size) count =0;
 80009a4:	bf08      	it	eq
 80009a6:	2100      	moveq	r1, #0
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 80009a8:	45e6      	cmp	lr, ip
 80009aa:	f240 8095 	bls.w	8000ad8 <LCD_ShowString.constprop.0+0x298>
				if((y-y0)==size)
 80009ae:	ebac 0c0a 	sub.w	ip, ip, sl
 80009b2:	f1bc 0f10 	cmp.w	ip, #16
 80009b6:	f000 8096 	beq.w	8000ae6 <LCD_ShowString.constprop.0+0x2a6>
				count ++;
 80009ba:	1c48      	adds	r0, r1, #1
					POINT_COLOR=(colortemp&0xFF)<<8|colortemp>>8;
 80009bc:	f015 0f08 	tst.w	r5, #8
				write[count][t/2]=POINT_COLOR;
 80009c0:	eb03 0bc1 	add.w	fp, r3, r1, lsl #3
				y++;
 80009c4:	f104 0c05 	add.w	ip, r4, #5
				count ++;
 80009c8:	b281      	uxth	r1, r0
					POINT_COLOR=(colortemp&0xFF)<<8|colortemp>>8;
 80009ca:	bf0c      	ite	eq
 80009cc:	4630      	moveq	r0, r6
 80009ce:	4610      	movne	r0, r2
				y++;
 80009d0:	fa1f fc8c 	uxth.w	ip, ip
				if(count >= size) count =0;
 80009d4:	2910      	cmp	r1, #16
				write[count][t/2]=POINT_COLOR;
 80009d6:	f828 001b 	strh.w	r0, [r8, fp, lsl #1]
				if(count >= size) count =0;
 80009da:	bf08      	it	eq
 80009dc:	2100      	moveq	r1, #0
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 80009de:	45e6      	cmp	lr, ip
 80009e0:	d97a      	bls.n	8000ad8 <LCD_ShowString.constprop.0+0x298>
				if((y-y0)==size)
 80009e2:	ebac 0c0a 	sub.w	ip, ip, sl
 80009e6:	f1bc 0f10 	cmp.w	ip, #16
 80009ea:	d07c      	beq.n	8000ae6 <LCD_ShowString.constprop.0+0x2a6>
				count ++;
 80009ec:	1c48      	adds	r0, r1, #1
					POINT_COLOR=(colortemp&0xFF)<<8|colortemp>>8;
 80009ee:	f015 0f04 	tst.w	r5, #4
				write[count][t/2]=POINT_COLOR;
 80009f2:	eb03 0bc1 	add.w	fp, r3, r1, lsl #3
				y++;
 80009f6:	f104 0c06 	add.w	ip, r4, #6
				count ++;
 80009fa:	b281      	uxth	r1, r0
					POINT_COLOR=(colortemp&0xFF)<<8|colortemp>>8;
 80009fc:	bf0c      	ite	eq
 80009fe:	4630      	moveq	r0, r6
 8000a00:	4610      	movne	r0, r2
				y++;
 8000a02:	fa1f fc8c 	uxth.w	ip, ip
				if(count >= size) count =0;
 8000a06:	2910      	cmp	r1, #16
				write[count][t/2]=POINT_COLOR;
 8000a08:	f828 001b 	strh.w	r0, [r8, fp, lsl #1]
				if(count >= size) count =0;
 8000a0c:	bf08      	it	eq
 8000a0e:	2100      	moveq	r1, #0
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 8000a10:	45e6      	cmp	lr, ip
 8000a12:	d961      	bls.n	8000ad8 <LCD_ShowString.constprop.0+0x298>
				if((y-y0)==size)
 8000a14:	ebac 0c0a 	sub.w	ip, ip, sl
 8000a18:	f1bc 0f10 	cmp.w	ip, #16
 8000a1c:	d063      	beq.n	8000ae6 <LCD_ShowString.constprop.0+0x2a6>
				count ++;
 8000a1e:	1c48      	adds	r0, r1, #1
					POINT_COLOR=(colortemp&0xFF)<<8|colortemp>>8;
 8000a20:	f015 0f02 	tst.w	r5, #2
				write[count][t/2]=POINT_COLOR;
 8000a24:	eb03 0bc1 	add.w	fp, r3, r1, lsl #3
				y++;
 8000a28:	f104 0c07 	add.w	ip, r4, #7
				count ++;
 8000a2c:	b281      	uxth	r1, r0
					POINT_COLOR=(colortemp&0xFF)<<8|colortemp>>8;
 8000a2e:	bf0c      	ite	eq
 8000a30:	4630      	moveq	r0, r6
 8000a32:	4610      	movne	r0, r2
				y++;
 8000a34:	fa1f fc8c 	uxth.w	ip, ip
				if(count >= size) count =0;
 8000a38:	2910      	cmp	r1, #16
				write[count][t/2]=POINT_COLOR;
 8000a3a:	f828 001b 	strh.w	r0, [r8, fp, lsl #1]
				if(count >= size) count =0;
 8000a3e:	bf08      	it	eq
 8000a40:	2100      	moveq	r1, #0
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 8000a42:	45e6      	cmp	lr, ip
 8000a44:	d948      	bls.n	8000ad8 <LCD_ShowString.constprop.0+0x298>
				if((y-y0)==size)
 8000a46:	ebac 0c0a 	sub.w	ip, ip, sl
 8000a4a:	f1bc 0f10 	cmp.w	ip, #16
 8000a4e:	d04a      	beq.n	8000ae6 <LCD_ShowString.constprop.0+0x2a6>
				write[count][t/2]=POINT_COLOR;
 8000a50:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
				count ++;
 8000a54:	3101      	adds	r1, #1
					POINT_COLOR=(colortemp&0xFF)<<8|colortemp>>8;
 8000a56:	f015 0f01 	tst.w	r5, #1
				y++;
 8000a5a:	f104 0408 	add.w	r4, r4, #8
				count ++;
 8000a5e:	b289      	uxth	r1, r1
					POINT_COLOR=(colortemp&0xFF)<<8|colortemp>>8;
 8000a60:	bf0c      	ite	eq
 8000a62:	4630      	moveq	r0, r6
 8000a64:	4610      	movne	r0, r2
				y++;
 8000a66:	b2a4      	uxth	r4, r4
				if(count >= size) count =0;
 8000a68:	2910      	cmp	r1, #16
				write[count][t/2]=POINT_COLOR;
 8000a6a:	f828 0013 	strh.w	r0, [r8, r3, lsl #1]
				if(count >= size) count =0;
 8000a6e:	bf08      	it	eq
 8000a70:	2100      	moveq	r1, #0
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 8000a72:	45a6      	cmp	lr, r4
 8000a74:	d930      	bls.n	8000ad8 <LCD_ShowString.constprop.0+0x298>
				if((y-y0)==size)
 8000a76:	eba4 030a 	sub.w	r3, r4, sl
 8000a7a:	2b10      	cmp	r3, #16
 8000a7c:	d033      	beq.n	8000ae6 <LCD_ShowString.constprop.0+0x2a6>
		for(t=0;t<size;t++)
 8000a7e:	f109 0901 	add.w	r9, r9, #1
 8000a82:	fa5f f989 	uxtb.w	r9, r9
 8000a86:	f1b9 0f10 	cmp.w	r9, #16
 8000a8a:	f47f af24 	bne.w	80008d6 <LCD_ShowString.constprop.0+0x96>
 8000a8e:	e9d7 5b04 	ldrd	r5, fp, [r7, #16]
 8000a92:	4c1a      	ldr	r4, [pc, #104]	@ (8000afc <LCD_ShowString.constprop.0+0x2bc>)
	ST7735_FillRGBRect(&st7735_pObj,x0,y0,(uint8_t *)&write,size==12?6:8,size); 
 8000a94:	2208      	movs	r2, #8
 8000a96:	4643      	mov	r3, r8
 8000a98:	4659      	mov	r1, fp
 8000a9a:	8020      	strh	r0, [r4, #0]
 8000a9c:	9200      	str	r2, [sp, #0]
 8000a9e:	4652      	mov	r2, sl
 8000aa0:	f8cd 9004 	str.w	r9, [sp, #4]
 8000aa4:	4816      	ldr	r0, [pc, #88]	@ (8000b00 <LCD_ShowString.constprop.0+0x2c0>)
 8000aa6:	f001 faf7 	bl	8002098 <ST7735_FillRGBRect>
	POINT_COLOR=colortemp;	    	   	 	  
 8000aaa:	8025      	strh	r5, [r4, #0]
 8000aac:	f8d7 d018 	ldr.w	sp, [r7, #24]
    while((*p<='~')&&(*p>=' '))//�ж��ǲ��ǷǷ��ַ�!
 8000ab0:	69fb      	ldr	r3, [r7, #28]
 8000ab2:	f813 9f01 	ldrb.w	r9, [r3, #1]!
 8000ab6:	f1a9 0920 	sub.w	r9, r9, #32
 8000aba:	61fb      	str	r3, [r7, #28]
        x+=size/2;
 8000abc:	f10b 0308 	add.w	r3, fp, #8
    while((*p<='~')&&(*p>=' '))//�ж��ǲ��ǷǷ��ַ�!
 8000ac0:	fa5f f989 	uxtb.w	r9, r9
        x+=size/2;
 8000ac4:	fa1f fb83 	uxth.w	fp, r3
    while((*p<='~')&&(*p>=' '))//�ж��ǲ��ǷǷ��ַ�!
 8000ac8:	f1b9 0f5e 	cmp.w	r9, #94	@ 0x5e
 8000acc:	f67f aecf 	bls.w	800086e <LCD_ShowString.constprop.0+0x2e>
}
 8000ad0:	3734      	adds	r7, #52	@ 0x34
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 8000ad8:	e9d7 5b04 	ldrd	r5, fp, [r7, #16]
 8000adc:	4b07      	ldr	r3, [pc, #28]	@ (8000afc <LCD_ShowString.constprop.0+0x2bc>)
 8000ade:	801d      	strh	r5, [r3, #0]
 8000ae0:	f8d7 d018 	ldr.w	sp, [r7, #24]
 8000ae4:	e7e4      	b.n	8000ab0 <LCD_ShowString.constprop.0+0x270>
					x++;
 8000ae6:	6a3b      	ldr	r3, [r7, #32]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	461c      	mov	r4, r3
 8000aee:	623b      	str	r3, [r7, #32]
					if(x>=w){POINT_COLOR=colortemp;return;}//��������
 8000af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000af2:	429c      	cmp	r4, r3
 8000af4:	d2f0      	bcs.n	8000ad8 <LCD_ShowString.constprop.0+0x298>
					y=y0;
 8000af6:	4654      	mov	r4, sl
 8000af8:	e7c1      	b.n	8000a7e <LCD_ShowString.constprop.0+0x23e>
 8000afa:	bf00      	nop
 8000afc:	24000000 	.word	0x24000000
 8000b00:	24000274 	.word	0x24000274
 8000b04:	24000268 	.word	0x24000268
 8000b08:	080099f0 	.word	0x080099f0

08000b0c <LCD_Test>:
{
 8000b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ST7735Ctx.Orientation = ST7735_ORIENTATION_LANDSCAPE_ROT180;
 8000b10:	2203      	movs	r2, #3
 8000b12:	4f94      	ldr	r7, [pc, #592]	@ (8000d64 <LCD_Test+0x258>)
	ST7735Ctx.Panel = HannStar_Panel;
 8000b14:	f44f 7380 	mov.w	r3, #256	@ 0x100
	ST7735_LCD_Driver.Init(&st7735_pObj,ST7735_FORMAT_RBG565,&ST7735Ctx);
 8000b18:	f8df 9288 	ldr.w	r9, [pc, #648]	@ 8000da4 <LCD_Test+0x298>
	ST7735_RegisterBusIO(&st7735_pObj,&st7735_pIO);
 8000b1c:	4992      	ldr	r1, [pc, #584]	@ (8000d68 <LCD_Test+0x25c>)
 8000b1e:	4893      	ldr	r0, [pc, #588]	@ (8000d6c <LCD_Test+0x260>)
	if (!IsLCD_SoftPWM)
 8000b20:	4d93      	ldr	r5, [pc, #588]	@ (8000d70 <LCD_Test+0x264>)
	LCD_LightSet = Brightness;
 8000b22:	4e94      	ldr	r6, [pc, #592]	@ (8000d74 <LCD_Test+0x268>)
{
 8000b24:	ed2d 8b02 	vpush	{d8}
 8000b28:	b08b      	sub	sp, #44	@ 0x2c
	ST7735Ctx.Orientation = ST7735_ORIENTATION_LANDSCAPE_ROT180;
 8000b2a:	60ba      	str	r2, [r7, #8]
	ST7735Ctx.Panel = HannStar_Panel;
 8000b2c:	81bb      	strh	r3, [r7, #12]
	ST7735_RegisterBusIO(&st7735_pObj,&st7735_pIO);
 8000b2e:	f001 fbd5 	bl	80022dc <ST7735_RegisterBusIO>
	ST7735_LCD_Driver.Init(&st7735_pObj,ST7735_FORMAT_RBG565,&ST7735Ctx);
 8000b32:	463a      	mov	r2, r7
 8000b34:	2105      	movs	r1, #5
 8000b36:	f8d9 3000 	ldr.w	r3, [r9]
 8000b3a:	488c      	ldr	r0, [pc, #560]	@ (8000d6c <LCD_Test+0x260>)
 8000b3c:	4798      	blx	r3
	ST7735_LCD_Driver.ReadID(&st7735_pObj,&st7735_id);
 8000b3e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8000b42:	498d      	ldr	r1, [pc, #564]	@ (8000d78 <LCD_Test+0x26c>)
 8000b44:	4889      	ldr	r0, [pc, #548]	@ (8000d6c <LCD_Test+0x260>)
 8000b46:	4798      	blx	r3
	LCD_LightSet = Brightness;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	6033      	str	r3, [r6, #0]
	if (!IsLCD_SoftPWM)
 8000b4c:	782b      	ldrb	r3, [r5, #0]
 8000b4e:	b913      	cbnz	r3, 8000b56 <LCD_Test+0x4a>
		__HAL_TIM_SetCompare(LCD_Brightness_timer, LCD_Brightness_channel, Brightness);
 8000b50:	4a8a      	ldr	r2, [pc, #552]	@ (8000d7c <LCD_Test+0x270>)
 8000b52:	6812      	ldr	r2, [r2, #0]
 8000b54:	6393      	str	r3, [r2, #56]	@ 0x38
	ST7735_LCD_Driver.DrawBitmap(&st7735_pObj,0,0,WeActStudiologo_160_80);
 8000b56:	2200      	movs	r2, #0
 8000b58:	4b89      	ldr	r3, [pc, #548]	@ (8000d80 <LCD_Test+0x274>)
 8000b5a:	f8d9 4028 	ldr.w	r4, [r9, #40]	@ 0x28
 8000b5e:	4611      	mov	r1, r2
 8000b60:	4882      	ldr	r0, [pc, #520]	@ (8000d6c <LCD_Test+0x260>)
 8000b62:	47a0      	blx	r4
			ST7735_LCD_Driver.FillRect(&st7735_pObj, 0, ST7735Ctx.Height - 3, (get_tick() - tick - 1000) * ST7735Ctx.Width / 2000, 3, 0xFFFF);
 8000b64:	f8df 8240 	ldr.w	r8, [pc, #576]	@ 8000da8 <LCD_Test+0x29c>
  uint32_t tick = get_tick();
 8000b68:	f001 fc5c 	bl	8002424 <HAL_GetTick>
 8000b6c:	4b85      	ldr	r3, [pc, #532]	@ (8000d84 <LCD_Test+0x278>)
 8000b6e:	4604      	mov	r4, r0
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET)
 8000b70:	eba3 0a00 	sub.w	sl, r3, r0
 8000b74:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b78:	4883      	ldr	r0, [pc, #524]	@ (8000d88 <LCD_Test+0x27c>)
 8000b7a:	f002 fa89 	bl	8003090 <HAL_GPIO_ReadPin>
 8000b7e:	4603      	mov	r3, r0
		delay_ms(10);
 8000b80:	200a      	movs	r0, #10
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) != GPIO_PIN_SET)
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d052      	beq.n	8000c2c <LCD_Test+0x120>
		delay_ms(10);
 8000b86:	f001 fc53 	bl	8002430 <HAL_Delay>
		if (get_tick() - tick <= 1000)
 8000b8a:	f001 fc4b 	bl	8002424 <HAL_GetTick>
 8000b8e:	1b00      	subs	r0, r0, r4
 8000b90:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8000b94:	d811      	bhi.n	8000bba <LCD_Test+0xae>
			LCD_SetBrightness((get_tick() - tick) * 100 / 1000);
 8000b96:	f001 fc45 	bl	8002424 <HAL_GetTick>
 8000b9a:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 8000b9e:	1b03      	subs	r3, r0, r4
	if (!IsLCD_SoftPWM)
 8000ba0:	782a      	ldrb	r2, [r5, #0]
		__HAL_TIM_SetCompare(LCD_Brightness_timer, LCD_Brightness_channel, Brightness);
 8000ba2:	4976      	ldr	r1, [pc, #472]	@ (8000d7c <LCD_Test+0x270>)
			LCD_SetBrightness((get_tick() - tick) * 100 / 1000);
 8000ba4:	fb0c f303 	mul.w	r3, ip, r3
 8000ba8:	fba8 0303 	umull	r0, r3, r8, r3
 8000bac:	099b      	lsrs	r3, r3, #6
	LCD_LightSet = Brightness;
 8000bae:	6033      	str	r3, [r6, #0]
	if (!IsLCD_SoftPWM)
 8000bb0:	2a00      	cmp	r2, #0
 8000bb2:	d1df      	bne.n	8000b74 <LCD_Test+0x68>
		__HAL_TIM_SetCompare(LCD_Brightness_timer, LCD_Brightness_channel, Brightness);
 8000bb4:	680a      	ldr	r2, [r1, #0]
 8000bb6:	6393      	str	r3, [r2, #56]	@ 0x38
 8000bb8:	e7dc      	b.n	8000b74 <LCD_Test+0x68>
		else if (get_tick() - tick <= 3000)
 8000bba:	f001 fc33 	bl	8002424 <HAL_GetTick>
 8000bbe:	f640 3bb8 	movw	fp, #3000	@ 0xbb8
 8000bc2:	1b00      	subs	r0, r0, r4
 8000bc4:	4558      	cmp	r0, fp
 8000bc6:	d82c      	bhi.n	8000c22 <LCD_Test+0x116>
			sprintf((char *)&text, "%03d", (get_tick() - tick - 1000) / 10);
 8000bc8:	f001 fc2c 	bl	8002424 <HAL_GetTick>
 8000bcc:	4b6f      	ldr	r3, [pc, #444]	@ (8000d8c <LCD_Test+0x280>)
 8000bce:	eb00 020a 	add.w	r2, r0, sl
 8000bd2:	496f      	ldr	r1, [pc, #444]	@ (8000d90 <LCD_Test+0x284>)
 8000bd4:	a805      	add	r0, sp, #20
 8000bd6:	fba3 3202 	umull	r3, r2, r3, r2
 8000bda:	08d2      	lsrs	r2, r2, #3
 8000bdc:	f006 fe80 	bl	80078e0 <siprintf>
			LCD_ShowString(ST7735Ctx.Width - 30, 1, ST7735Ctx.Width, 16, 16, text);
 8000be0:	883a      	ldrh	r2, [r7, #0]
 8000be2:	ab05      	add	r3, sp, #20
 8000be4:	2101      	movs	r1, #1
 8000be6:	f1a2 001e 	sub.w	r0, r2, #30
 8000bea:	b280      	uxth	r0, r0
 8000bec:	f7ff fe28 	bl	8000840 <LCD_ShowString.constprop.0>
			ST7735_LCD_Driver.FillRect(&st7735_pObj, 0, ST7735Ctx.Height - 3, (get_tick() - tick - 1000) * ST7735Ctx.Width / 2000, 3, 0xFFFF);
 8000bf0:	687a      	ldr	r2, [r7, #4]
 8000bf2:	f8d9 b038 	ldr.w	fp, [r9, #56]	@ 0x38
 8000bf6:	3a03      	subs	r2, #3
 8000bf8:	9203      	str	r2, [sp, #12]
 8000bfa:	f001 fc13 	bl	8002424 <HAL_GetTick>
 8000bfe:	6839      	ldr	r1, [r7, #0]
 8000c00:	eb00 030a 	add.w	r3, r0, sl
 8000c04:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000c08:	9a03      	ldr	r2, [sp, #12]
 8000c0a:	fb01 f303 	mul.w	r3, r1, r3
 8000c0e:	fba8 1303 	umull	r1, r3, r8, r3
 8000c12:	2103      	movs	r1, #3
 8000c14:	09db      	lsrs	r3, r3, #7
 8000c16:	e9cd 1000 	strd	r1, r0, [sp]
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	4853      	ldr	r0, [pc, #332]	@ (8000d6c <LCD_Test+0x260>)
 8000c1e:	47d8      	blx	fp
 8000c20:	e7a8      	b.n	8000b74 <LCD_Test+0x68>
		else if (get_tick() - tick > 3000)
 8000c22:	f001 fbff 	bl	8002424 <HAL_GetTick>
 8000c26:	1b00      	subs	r0, r0, r4
 8000c28:	4558      	cmp	r0, fp
 8000c2a:	d9a3      	bls.n	8000b74 <LCD_Test+0x68>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET)
 8000c2c:	4c56      	ldr	r4, [pc, #344]	@ (8000d88 <LCD_Test+0x27c>)
 8000c2e:	e001      	b.n	8000c34 <LCD_Test+0x128>
		delay_ms(10);
 8000c30:	f001 fbfe 	bl	8002430 <HAL_Delay>
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET)
 8000c34:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c38:	4620      	mov	r0, r4
 8000c3a:	f002 fa29 	bl	8003090 <HAL_GPIO_ReadPin>
 8000c3e:	4603      	mov	r3, r0
		delay_ms(10);
 8000c40:	200a      	movs	r0, #10
	while (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET)
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	d0f4      	beq.n	8000c30 <LCD_Test+0x124>
	if (IsLCD_SoftPWM)
 8000c46:	782b      	ldrb	r3, [r5, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	f000 8086 	beq.w	8000d5a <LCD_Test+0x24e>
		return LCD_LightSet;
 8000c4e:	6833      	ldr	r3, [r6, #0]
	if(Brightness_Now == Brightness_Dis)
 8000c50:	b33b      	cbz	r3, 8000ca2 <LCD_Test+0x196>
	temp1 = Brightness_Now;
 8000c52:	ee07 3a90 	vmov	s15, r3
		__HAL_TIM_SetCompare(LCD_Brightness_timer, LCD_Brightness_channel, Brightness);
 8000c56:	f8df 8124 	ldr.w	r8, [pc, #292]	@ 8000d7c <LCD_Test+0x270>
	temp1 = Brightness_Now;
 8000c5a:	eeb8 8a67 	vcvt.f32.u32	s16, s15
	k = temp1 / temp2;
 8000c5e:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8000d94 <LCD_Test+0x288>
 8000c62:	eec8 8a27 	vdiv.f32	s17, s16, s15
	uint32_t tick=get_tick();
 8000c66:	f001 fbdd 	bl	8002424 <HAL_GetTick>
 8000c6a:	4604      	mov	r4, r0
		delay_ms(1);
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	f001 fbdf 	bl	8002430 <HAL_Delay>
		time_now = get_tick()-tick;
 8000c72:	f001 fbd7 	bl	8002424 <HAL_GetTick>
 8000c76:	1b00      	subs	r0, r0, r4
	if (!IsLCD_SoftPWM)
 8000c78:	782a      	ldrb	r2, [r5, #0]
		temp2 = time_now - 0;
 8000c7a:	ee07 0a90 	vmov	s15, r0
 8000c7e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
		set = temp2*k + Brightness_Now;
 8000c82:	eef0 7a48 	vmov.f32	s15, s16
 8000c86:	eee8 7a87 	vfma.f32	s15, s17, s14
		LCD_SetBrightness((uint32_t)set);
 8000c8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	LCD_LightSet = Brightness;
 8000c8e:	edc6 7a00 	vstr	s15, [r6]
	if (!IsLCD_SoftPWM)
 8000c92:	b91a      	cbnz	r2, 8000c9c <LCD_Test+0x190>
		__HAL_TIM_SetCompare(LCD_Brightness_timer, LCD_Brightness_channel, Brightness);
 8000c94:	f8d8 2000 	ldr.w	r2, [r8]
 8000c98:	edc2 7a0e 	vstr	s15, [r2, #56]	@ 0x38
		if(time_now >= time) break;
 8000c9c:	f5b0 7f96 	cmp.w	r0, #300	@ 0x12c
 8000ca0:	d3e4      	bcc.n	8000c6c <LCD_Test+0x160>
	ST7735_LCD_Driver.FillRect(&st7735_pObj, 0, 0, ST7735Ctx.Width,ST7735Ctx.Height, BLACK);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	f8d9 4038 	ldr.w	r4, [r9, #56]	@ 0x38
 8000ca8:	4830      	ldr	r0, [pc, #192]	@ (8000d6c <LCD_Test+0x260>)
 8000caa:	9201      	str	r2, [sp, #4]
 8000cac:	4611      	mov	r1, r2
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	9300      	str	r3, [sp, #0]
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	47a0      	blx	r4
	sprintf((char *)&text, "STM32H7xx 0x%X", HAL_GetDEVID());
 8000cb6:	f001 fbd3 	bl	8002460 <HAL_GetDEVID>
 8000cba:	4937      	ldr	r1, [pc, #220]	@ (8000d98 <LCD_Test+0x28c>)
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	a805      	add	r0, sp, #20
 8000cc0:	f006 fe0e 	bl	80078e0 <siprintf>
	LCD_ShowString(4, 22, ST7735Ctx.Width, 16, 16, text);
 8000cc4:	ab05      	add	r3, sp, #20
 8000cc6:	883a      	ldrh	r2, [r7, #0]
 8000cc8:	2116      	movs	r1, #22
 8000cca:	2004      	movs	r0, #4
 8000ccc:	f7ff fdb8 	bl	8000840 <LCD_ShowString.constprop.0>
	sprintf((char *)&text, "LCD ID:0x%X", st7735_id);
 8000cd0:	4b29      	ldr	r3, [pc, #164]	@ (8000d78 <LCD_Test+0x26c>)
 8000cd2:	4932      	ldr	r1, [pc, #200]	@ (8000d9c <LCD_Test+0x290>)
 8000cd4:	a805      	add	r0, sp, #20
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	f006 fe02 	bl	80078e0 <siprintf>
	LCD_ShowString(4, 40, ST7735Ctx.Width, 16, 16, text);
 8000cdc:	ab05      	add	r3, sp, #20
 8000cde:	883a      	ldrh	r2, [r7, #0]
 8000ce0:	2128      	movs	r1, #40	@ 0x28
 8000ce2:	2004      	movs	r0, #4
 8000ce4:	f7ff fdac 	bl	8000840 <LCD_ShowString.constprop.0>
	if (IsLCD_SoftPWM)
 8000ce8:	782b      	ldrb	r3, [r5, #0]
 8000cea:	b393      	cbz	r3, 8000d52 <LCD_Test+0x246>
		return LCD_LightSet;
 8000cec:	6833      	ldr	r3, [r6, #0]
	if(Brightness_Now == Brightness_Dis)
 8000cee:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8000cf2:	d029      	beq.n	8000d48 <LCD_Test+0x23c>
	temp1 = Brightness_Now;
 8000cf4:	ee07 3a90 	vmov	s15, r3
	k = temp1 / temp2;
 8000cf8:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8000d94 <LCD_Test+0x288>
		__HAL_TIM_SetCompare(LCD_Brightness_timer, LCD_Brightness_channel, Brightness);
 8000cfc:	4f1f      	ldr	r7, [pc, #124]	@ (8000d7c <LCD_Test+0x270>)
	temp1 = Brightness_Now;
 8000cfe:	eeb8 8a67 	vcvt.f32.u32	s16, s15
	temp1 = temp1 - Brightness_Dis;
 8000d02:	eddf 7a27 	vldr	s15, [pc, #156]	@ 8000da0 <LCD_Test+0x294>
 8000d06:	ee78 7a67 	vsub.f32	s15, s16, s15
	k = temp1 / temp2;
 8000d0a:	eec7 8a87 	vdiv.f32	s17, s15, s14
	uint32_t tick=get_tick();
 8000d0e:	f001 fb89 	bl	8002424 <HAL_GetTick>
 8000d12:	4604      	mov	r4, r0
		delay_ms(1);
 8000d14:	2001      	movs	r0, #1
 8000d16:	f001 fb8b 	bl	8002430 <HAL_Delay>
		time_now = get_tick()-tick;
 8000d1a:	f001 fb83 	bl	8002424 <HAL_GetTick>
 8000d1e:	1b00      	subs	r0, r0, r4
	if (!IsLCD_SoftPWM)
 8000d20:	782a      	ldrb	r2, [r5, #0]
		temp2 = time_now - 0;
 8000d22:	ee07 0a90 	vmov	s15, r0
 8000d26:	eeb8 7a67 	vcvt.f32.u32	s14, s15
		set = temp2*k + Brightness_Now;
 8000d2a:	eef0 7a48 	vmov.f32	s15, s16
 8000d2e:	eee8 7a87 	vfma.f32	s15, s17, s14
		LCD_SetBrightness((uint32_t)set);
 8000d32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	LCD_LightSet = Brightness;
 8000d36:	edc6 7a00 	vstr	s15, [r6]
	if (!IsLCD_SoftPWM)
 8000d3a:	b912      	cbnz	r2, 8000d42 <LCD_Test+0x236>
		__HAL_TIM_SetCompare(LCD_Brightness_timer, LCD_Brightness_channel, Brightness);
 8000d3c:	683a      	ldr	r2, [r7, #0]
 8000d3e:	edc2 7a0e 	vstr	s15, [r2, #56]	@ 0x38
		if(time_now >= time) break;
 8000d42:	f5b0 7f96 	cmp.w	r0, #300	@ 0x12c
 8000d46:	d3e5      	bcc.n	8000d14 <LCD_Test+0x208>
}
 8000d48:	b00b      	add	sp, #44	@ 0x2c
 8000d4a:	ecbd 8b02 	vpop	{d8}
 8000d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return __HAL_TIM_GetCompare(LCD_Brightness_timer, LCD_Brightness_channel);
 8000d52:	4b0a      	ldr	r3, [pc, #40]	@ (8000d7c <LCD_Test+0x270>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d58:	e7c9      	b.n	8000cee <LCD_Test+0x1e2>
 8000d5a:	4b08      	ldr	r3, [pc, #32]	@ (8000d7c <LCD_Test+0x270>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d60:	e776      	b.n	8000c50 <LCD_Test+0x144>
 8000d62:	bf00      	nop
 8000d64:	240007b0 	.word	0x240007b0
 8000d68:	24000004 	.word	0x24000004
 8000d6c:	24000274 	.word	0x24000274
 8000d70:	2400026a 	.word	0x2400026a
 8000d74:	2400026c 	.word	0x2400026c
 8000d78:	24000270 	.word	0x24000270
 8000d7c:	24000968 	.word	0x24000968
 8000d80:	0800a454 	.word	0x0800a454
 8000d84:	fffffc18 	.word	0xfffffc18
 8000d88:	58020800 	.word	0x58020800
 8000d8c:	cccccccd 	.word	0xcccccccd
 8000d90:	080099c0 	.word	0x080099c0
 8000d94:	c3960000 	.word	0xc3960000
 8000d98:	080099c8 	.word	0x080099c8
 8000d9c:	080099d8 	.word	0x080099d8
 8000da0:	44160000 	.word	0x44160000
 8000da4:	24000024 	.word	0x24000024
 8000da8:	10624dd3 	.word	0x10624dd3

08000dac <HAL_TIM_PeriodElapsedCallback>:
	if (htim->Instance == TIM16)
 8000dac:	4b0e      	ldr	r3, [pc, #56]	@ (8000de8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000dae:	6802      	ldr	r2, [r0, #0]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d000      	beq.n	8000db6 <HAL_TIM_PeriodElapsedCallback+0xa>
}
 8000db4:	4770      	bx	lr
	if (timecount > 1000)
 8000db6:	4a0d      	ldr	r2, [pc, #52]	@ (8000dec <HAL_TIM_PeriodElapsedCallback+0x40>)
	if (timecount >= LCD_LightSet)
 8000db8:	490d      	ldr	r1, [pc, #52]	@ (8000df0 <HAL_TIM_PeriodElapsedCallback+0x44>)
	if (timecount > 1000)
 8000dba:	6813      	ldr	r3, [r2, #0]
 8000dbc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
		timecount += 10;
 8000dc0:	bf94      	ite	ls
 8000dc2:	330a      	addls	r3, #10
		timecount = 0;
 8000dc4:	2300      	movhi	r3, #0
 8000dc6:	6013      	str	r3, [r2, #0]
	if (timecount >= LCD_LightSet)
 8000dc8:	680a      	ldr	r2, [r1, #0]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d805      	bhi.n	8000dda <HAL_TIM_PeriodElapsedCallback+0x2e>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 8000dce:	2201      	movs	r2, #1
 8000dd0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000dd4:	4807      	ldr	r0, [pc, #28]	@ (8000df4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000dd6:	f002 b961 	b.w	800309c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000de0:	4804      	ldr	r0, [pc, #16]	@ (8000df4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000de2:	f002 b95b 	b.w	800309c <HAL_GPIO_WritePin>
 8000de6:	bf00      	nop
 8000de8:	40014400 	.word	0x40014400
 8000dec:	24000264 	.word	0x24000264
 8000df0:	2400026c 	.word	0x2400026c
 8000df4:	58021000 	.word	0x58021000

08000df8 <LCD_ShowString>:
{         
 8000df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	height+=y;
 8000dfc:	440b      	add	r3, r1
{         
 8000dfe:	b093      	sub	sp, #76	@ 0x4c
	width+=x;
 8000e00:	4402      	add	r2, r0
{         
 8000e02:	4689      	mov	r9, r1
	height+=y;
 8000e04:	b29b      	uxth	r3, r3
{         
 8000e06:	af02      	add	r7, sp, #8
	width+=x;
 8000e08:	b292      	uxth	r2, r2
	height+=y;
 8000e0a:	60fb      	str	r3, [r7, #12]
    while((*p<='~')&&(*p>=' '))//�ж��ǲ��ǷǷ��ַ�!
 8000e0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
{         
 8000e0e:	f897 b068 	ldrb.w	fp, [r7, #104]	@ 0x68
    while((*p<='~')&&(*p>=' '))//�ж��ǲ��ǷǷ��ַ�!
 8000e12:	781b      	ldrb	r3, [r3, #0]
{         
 8000e14:	6038      	str	r0, [r7, #0]
    while((*p<='~')&&(*p>=' '))//�ж��ǲ��ǷǷ��ַ�!
 8000e16:	3b20      	subs	r3, #32
	width+=x;
 8000e18:	613a      	str	r2, [r7, #16]
    while((*p<='~')&&(*p>=' '))//�ж��ǲ��ǷǷ��ַ�!
 8000e1a:	b2dc      	uxtb	r4, r3
 8000e1c:	2c5e      	cmp	r4, #94	@ 0x5e
 8000e1e:	f200 814a 	bhi.w	80010b6 <LCD_ShowString+0x2be>
	uint16_t write[size][size==12?6:8];
 8000e22:	f1bb 0f0c 	cmp.w	fp, #12
 8000e26:	bf0c      	ite	eq
 8000e28:	f04f 0a06 	moveq.w	sl, #6
 8000e2c:	f04f 0a08 	movne.w	sl, #8
 8000e30:	fb0b f30a 	mul.w	r3, fp, sl
 8000e34:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000e38:	f000 815a 	beq.w	80010f0 <LCD_ShowString+0x2f8>
 8000e3c:	3307      	adds	r3, #7
        x+=size/2;
 8000e3e:	4606      	mov	r6, r0
 8000e40:	465d      	mov	r5, fp
 8000e42:	f8c7 a028 	str.w	sl, [r7, #40]	@ 0x28
	uint16_t write[size][size==12?6:8];
 8000e46:	08db      	lsrs	r3, r3, #3
 8000e48:	00db      	lsls	r3, r3, #3
 8000e4a:	607b      	str	r3, [r7, #4]
        x+=size/2;
 8000e4c:	ea4f 035b 	mov.w	r3, fp, lsr #1
 8000e50:	60bb      	str	r3, [r7, #8]
        if(x>=width){x=x0;y+=size;}
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	42b3      	cmp	r3, r6
 8000e56:	d803      	bhi.n	8000e60 <LCD_ShowString+0x68>
 8000e58:	44a9      	add	r9, r5
 8000e5a:	783e      	ldrb	r6, [r7, #0]
 8000e5c:	fa1f f989 	uxth.w	r9, r9
        if(y>=height)break;//�˳�
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	454b      	cmp	r3, r9
 8000e64:	f240 8127 	bls.w	80010b6 <LCD_ShowString+0x2be>
	uint16_t colortemp=POINT_COLOR; 
 8000e68:	4b9d      	ldr	r3, [pc, #628]	@ (80010e0 <LCD_ShowString+0x2e8>)
  ST7735_GetXSize(&st7735_pObj,&w);
 8000e6a:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
	uint16_t write[size][size==12?6:8];
 8000e6e:	687a      	ldr	r2, [r7, #4]
	uint16_t colortemp=POINT_COLOR; 
 8000e70:	61fb      	str	r3, [r7, #28]
 8000e72:	881b      	ldrh	r3, [r3, #0]
{  							  
 8000e74:	f8c7 d018 	str.w	sp, [r7, #24]
	uint16_t write[size][size==12?6:8];
 8000e78:	ebad 0d02 	sub.w	sp, sp, r2
  ST7735_GetXSize(&st7735_pObj,&w);
 8000e7c:	4899      	ldr	r0, [pc, #612]	@ (80010e4 <LCD_ShowString+0x2ec>)
	uint16_t colortemp=POINT_COLOR; 
 8000e7e:	627b      	str	r3, [r7, #36]	@ 0x24
  ST7735_GetXSize(&st7735_pObj,&w);
 8000e80:	f000 fa9e 	bl	80013c0 <ST7735_GetXSize>
	ST7735_GetYSize(&st7735_pObj,&h);
 8000e84:	4897      	ldr	r0, [pc, #604]	@ (80010e4 <LCD_ShowString+0x2ec>)
 8000e86:	f107 0138 	add.w	r1, r7, #56	@ 0x38
	uint16_t write[size][size==12?6:8];
 8000e8a:	f10d 0808 	add.w	r8, sp, #8
	ST7735_GetYSize(&st7735_pObj,&h);
 8000e8e:	f000 fa9f 	bl	80013d0 <ST7735_GetYSize>
		for(t=0;t<size;t++)
 8000e92:	2d00      	cmp	r5, #0
 8000e94:	f000 80f5 	beq.w	8001082 <LCD_ShowString+0x28a>
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 8000e98:	4b93      	ldr	r3, [pc, #588]	@ (80010e8 <LCD_ShowString+0x2f0>)
					POINT_COLOR=(colortemp&0xFF)<<8|colortemp>>8;
 8000e9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 8000e9c:	f8b3 c000 	ldrh.w	ip, [r3]
 8000ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea4:	4991      	ldr	r1, [pc, #580]	@ (80010ec <LCD_ShowString+0x2f4>)
					POINT_COLOR=(colortemp&0xFF)<<8|colortemp>>8;
 8000ea6:	ba52      	rev16	r2, r2
 8000ea8:	eb03 1304 	add.w	r3, r3, r4, lsl #4
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 8000eac:	fa9c fc9c 	rev16.w	ip, ip
					POINT_COLOR=(colortemp&0xFF)<<8|colortemp>>8;
 8000eb0:	b292      	uxth	r2, r2
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 8000eb2:	f8d7 a038 	ldr.w	sl, [r7, #56]	@ 0x38
 8000eb6:	440b      	add	r3, r1
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 8000eb8:	fa1f fc8c 	uxth.w	ip, ip
	count = 0;
 8000ebc:	2100      	movs	r1, #0
        if(x>=width){x=x0;y+=size;}
 8000ebe:	464c      	mov	r4, r9
 8000ec0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ec2:	623e      	str	r6, [r7, #32]
		for(t=0;t<size;t++)
 8000ec4:	617e      	str	r6, [r7, #20]
 8000ec6:	e9c7 120c 	strd	r1, r2, [r7, #48]	@ 0x30
				if(temp&0x80)
 8000eca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
				y++;
 8000ecc:	f104 0e01 	add.w	lr, r4, #1
				write[count][t/2]=POINT_COLOR;
 8000ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
				if(temp&0x80)
 8000ed2:	f910 6f01 	ldrsb.w	r6, [r0, #1]!
				y++;
 8000ed6:	fa1f fe8e 	uxth.w	lr, lr
				write[count][t/2]=POINT_COLOR;
 8000eda:	fb01 f303 	mul.w	r3, r1, r3
				count ++;
 8000ede:	3101      	adds	r1, #1
				write[count][t/2]=POINT_COLOR;
 8000ee0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
				count ++;
 8000ee2:	b289      	uxth	r1, r1
				if(temp&0x80)
 8000ee4:	62f8      	str	r0, [r7, #44]	@ 0x2c
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 8000ee6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
				write[count][t/2]=POINT_COLOR;
 8000ee8:	eb03 0352 	add.w	r3, r3, r2, lsr #1
				if(count >= size) count =0;
 8000eec:	428d      	cmp	r5, r1
 8000eee:	bf98      	it	ls
 8000ef0:	2100      	movls	r1, #0
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 8000ef2:	ea10 0026 	ands.w	r0, r0, r6, asr #32
 8000ef6:	bf38      	it	cc
 8000ef8:	4660      	movcc	r0, ip
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 8000efa:	45f2      	cmp	sl, lr
				write[count][t/2]=POINT_COLOR;
 8000efc:	f828 0013 	strh.w	r0, [r8, r3, lsl #1]
 8000f00:	ea4f 0352 	mov.w	r3, r2, lsr #1
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 8000f04:	f240 80db 	bls.w	80010be <LCD_ShowString+0x2c6>
				if((y-y0)==size)
 8000f08:	ebae 0e09 	sub.w	lr, lr, r9
 8000f0c:	45ae      	cmp	lr, r5
 8000f0e:	f000 80dd 	beq.w	80010cc <LCD_ShowString+0x2d4>
				count ++;
 8000f12:	1c48      	adds	r0, r1, #1
				write[count][t/2]=POINT_COLOR;
 8000f14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
				y++;
 8000f16:	f104 0e02 	add.w	lr, r4, #2
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 8000f1a:	f016 0f40 	tst.w	r6, #64	@ 0x40
				write[count][t/2]=POINT_COLOR;
 8000f1e:	fb01 3b02 	mla	fp, r1, r2, r3
				count ++;
 8000f22:	b281      	uxth	r1, r0
				y++;
 8000f24:	fa1f fe8e 	uxth.w	lr, lr
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 8000f28:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000f2a:	bf08      	it	eq
 8000f2c:	4660      	moveq	r0, ip
				if(count >= size) count =0;
 8000f2e:	42a9      	cmp	r1, r5
 8000f30:	bf28      	it	cs
 8000f32:	2100      	movcs	r1, #0
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 8000f34:	45f2      	cmp	sl, lr
				write[count][t/2]=POINT_COLOR;
 8000f36:	f828 001b 	strh.w	r0, [r8, fp, lsl #1]
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 8000f3a:	f240 80c0 	bls.w	80010be <LCD_ShowString+0x2c6>
				if((y-y0)==size)
 8000f3e:	ebae 0e09 	sub.w	lr, lr, r9
 8000f42:	45ae      	cmp	lr, r5
 8000f44:	f000 80c2 	beq.w	80010cc <LCD_ShowString+0x2d4>
				count ++;
 8000f48:	1c48      	adds	r0, r1, #1
				y++;
 8000f4a:	f104 0e03 	add.w	lr, r4, #3
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 8000f4e:	f016 0f20 	tst.w	r6, #32
				write[count][t/2]=POINT_COLOR;
 8000f52:	fb01 3b02 	mla	fp, r1, r2, r3
				y++;
 8000f56:	fa1f fe8e 	uxth.w	lr, lr
				count ++;
 8000f5a:	b281      	uxth	r1, r0
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 8000f5c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000f5e:	bf08      	it	eq
 8000f60:	4660      	moveq	r0, ip
				if(count >= size) count =0;
 8000f62:	42a9      	cmp	r1, r5
 8000f64:	bf28      	it	cs
 8000f66:	2100      	movcs	r1, #0
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 8000f68:	45f2      	cmp	sl, lr
				write[count][t/2]=POINT_COLOR;
 8000f6a:	f828 001b 	strh.w	r0, [r8, fp, lsl #1]
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 8000f6e:	f240 80a6 	bls.w	80010be <LCD_ShowString+0x2c6>
				if((y-y0)==size)
 8000f72:	ebae 0e09 	sub.w	lr, lr, r9
 8000f76:	45ae      	cmp	lr, r5
 8000f78:	f000 80a8 	beq.w	80010cc <LCD_ShowString+0x2d4>
				count ++;
 8000f7c:	1c48      	adds	r0, r1, #1
				y++;
 8000f7e:	f104 0e04 	add.w	lr, r4, #4
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 8000f82:	f016 0f10 	tst.w	r6, #16
				write[count][t/2]=POINT_COLOR;
 8000f86:	fb01 3b02 	mla	fp, r1, r2, r3
				y++;
 8000f8a:	fa1f fe8e 	uxth.w	lr, lr
				count ++;
 8000f8e:	b281      	uxth	r1, r0
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 8000f90:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000f92:	bf08      	it	eq
 8000f94:	4660      	moveq	r0, ip
				if(count >= size) count =0;
 8000f96:	42a9      	cmp	r1, r5
 8000f98:	bf28      	it	cs
 8000f9a:	2100      	movcs	r1, #0
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 8000f9c:	45f2      	cmp	sl, lr
				write[count][t/2]=POINT_COLOR;
 8000f9e:	f828 001b 	strh.w	r0, [r8, fp, lsl #1]
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 8000fa2:	f240 808c 	bls.w	80010be <LCD_ShowString+0x2c6>
				if((y-y0)==size)
 8000fa6:	ebae 0e09 	sub.w	lr, lr, r9
 8000faa:	45ae      	cmp	lr, r5
 8000fac:	f000 808e 	beq.w	80010cc <LCD_ShowString+0x2d4>
				count ++;
 8000fb0:	1c48      	adds	r0, r1, #1
				y++;
 8000fb2:	f104 0e05 	add.w	lr, r4, #5
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 8000fb6:	f016 0f08 	tst.w	r6, #8
				write[count][t/2]=POINT_COLOR;
 8000fba:	fb01 3b02 	mla	fp, r1, r2, r3
				y++;
 8000fbe:	fa1f fe8e 	uxth.w	lr, lr
				count ++;
 8000fc2:	b281      	uxth	r1, r0
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 8000fc4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000fc6:	bf08      	it	eq
 8000fc8:	4660      	moveq	r0, ip
				if(count >= size) count =0;
 8000fca:	428d      	cmp	r5, r1
 8000fcc:	bf98      	it	ls
 8000fce:	2100      	movls	r1, #0
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 8000fd0:	45f2      	cmp	sl, lr
				write[count][t/2]=POINT_COLOR;
 8000fd2:	f828 001b 	strh.w	r0, [r8, fp, lsl #1]
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 8000fd6:	d972      	bls.n	80010be <LCD_ShowString+0x2c6>
				if((y-y0)==size)
 8000fd8:	ebae 0e09 	sub.w	lr, lr, r9
 8000fdc:	4575      	cmp	r5, lr
 8000fde:	d075      	beq.n	80010cc <LCD_ShowString+0x2d4>
				count ++;
 8000fe0:	1c48      	adds	r0, r1, #1
				y++;
 8000fe2:	f104 0e06 	add.w	lr, r4, #6
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 8000fe6:	f016 0f04 	tst.w	r6, #4
				write[count][t/2]=POINT_COLOR;
 8000fea:	fb01 3b02 	mla	fp, r1, r2, r3
				y++;
 8000fee:	fa1f fe8e 	uxth.w	lr, lr
				count ++;
 8000ff2:	b281      	uxth	r1, r0
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 8000ff4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000ff6:	bf08      	it	eq
 8000ff8:	4660      	moveq	r0, ip
				if(count >= size) count =0;
 8000ffa:	428d      	cmp	r5, r1
 8000ffc:	bf98      	it	ls
 8000ffe:	2100      	movls	r1, #0
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 8001000:	45f2      	cmp	sl, lr
				write[count][t/2]=POINT_COLOR;
 8001002:	f828 001b 	strh.w	r0, [r8, fp, lsl #1]
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 8001006:	d95a      	bls.n	80010be <LCD_ShowString+0x2c6>
				if((y-y0)==size)
 8001008:	ebae 0e09 	sub.w	lr, lr, r9
 800100c:	4575      	cmp	r5, lr
 800100e:	d05d      	beq.n	80010cc <LCD_ShowString+0x2d4>
				count ++;
 8001010:	1c48      	adds	r0, r1, #1
				y++;
 8001012:	f104 0e07 	add.w	lr, r4, #7
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 8001016:	f016 0f02 	tst.w	r6, #2
				write[count][t/2]=POINT_COLOR;
 800101a:	fb01 3b02 	mla	fp, r1, r2, r3
				y++;
 800101e:	fa1f fe8e 	uxth.w	lr, lr
				count ++;
 8001022:	b281      	uxth	r1, r0
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 8001024:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001026:	bf08      	it	eq
 8001028:	4660      	moveq	r0, ip
				if(count >= size) count =0;
 800102a:	428d      	cmp	r5, r1
 800102c:	bf98      	it	ls
 800102e:	2100      	movls	r1, #0
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 8001030:	45f2      	cmp	sl, lr
				write[count][t/2]=POINT_COLOR;
 8001032:	f828 001b 	strh.w	r0, [r8, fp, lsl #1]
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 8001036:	d942      	bls.n	80010be <LCD_ShowString+0x2c6>
				if((y-y0)==size)
 8001038:	ebae 0e09 	sub.w	lr, lr, r9
 800103c:	45ae      	cmp	lr, r5
 800103e:	d045      	beq.n	80010cc <LCD_ShowString+0x2d4>
				write[count][t/2]=POINT_COLOR;
 8001040:	fb02 3301 	mla	r3, r2, r1, r3
				y++;
 8001044:	3408      	adds	r4, #8
				count ++;
 8001046:	3101      	adds	r1, #1
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 8001048:	f016 0f01 	tst.w	r6, #1
				y++;
 800104c:	b2a4      	uxth	r4, r4
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 800104e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
				count ++;
 8001050:	b289      	uxth	r1, r1
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 8001052:	bf0c      	ite	eq
 8001054:	4660      	moveq	r0, ip
 8001056:	4610      	movne	r0, r2
				if(count >= size) count =0;
 8001058:	428d      	cmp	r5, r1
 800105a:	bf98      	it	ls
 800105c:	2100      	movls	r1, #0
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 800105e:	45a2      	cmp	sl, r4
				write[count][t/2]=POINT_COLOR;
 8001060:	f828 0013 	strh.w	r0, [r8, r3, lsl #1]
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 8001064:	d92b      	bls.n	80010be <LCD_ShowString+0x2c6>
				if((y-y0)==size)
 8001066:	eba4 0309 	sub.w	r3, r4, r9
 800106a:	429d      	cmp	r5, r3
 800106c:	d02e      	beq.n	80010cc <LCD_ShowString+0x2d4>
		for(t=0;t<size;t++)
 800106e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001070:	3301      	adds	r3, #1
 8001072:	b2db      	uxtb	r3, r3
 8001074:	429d      	cmp	r5, r3
 8001076:	633b      	str	r3, [r7, #48]	@ 0x30
 8001078:	f47f af27 	bne.w	8000eca <LCD_ShowString+0xd2>
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	697e      	ldr	r6, [r7, #20]
 8001080:	8018      	strh	r0, [r3, #0]
	ST7735_FillRGBRect(&st7735_pObj,x0,y0,(uint8_t *)&write,size==12?6:8,size); 
 8001082:	2208      	movs	r2, #8
 8001084:	4643      	mov	r3, r8
 8001086:	9501      	str	r5, [sp, #4]
 8001088:	4631      	mov	r1, r6
 800108a:	9200      	str	r2, [sp, #0]
 800108c:	464a      	mov	r2, r9
 800108e:	4815      	ldr	r0, [pc, #84]	@ (80010e4 <LCD_ShowString+0x2ec>)
 8001090:	f001 f802 	bl	8002098 <ST7735_FillRGBRect>
	POINT_COLOR=colortemp;	    	   	 	  
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001098:	801a      	strh	r2, [r3, #0]
 800109a:	f8d7 d018 	ldr.w	sp, [r7, #24]
    while((*p<='~')&&(*p>=' '))//�ж��ǲ��ǷǷ��ַ�!
 800109e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80010a0:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 80010a4:	3c20      	subs	r4, #32
 80010a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
        x+=size/2;
 80010a8:	68bb      	ldr	r3, [r7, #8]
    while((*p<='~')&&(*p>=' '))//�ж��ǲ��ǷǷ��ַ�!
 80010aa:	b2e4      	uxtb	r4, r4
        x+=size/2;
 80010ac:	4433      	add	r3, r6
    while((*p<='~')&&(*p>=' '))//�ж��ǲ��ǷǷ��ַ�!
 80010ae:	2c5e      	cmp	r4, #94	@ 0x5e
        x+=size/2;
 80010b0:	b29e      	uxth	r6, r3
    while((*p<='~')&&(*p>=' '))//�ж��ǲ��ǷǷ��ַ�!
 80010b2:	f67f aece 	bls.w	8000e52 <LCD_ShowString+0x5a>
}
 80010b6:	3744      	adds	r7, #68	@ 0x44
 80010b8:	46bd      	mov	sp, r7
 80010ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010c2:	697e      	ldr	r6, [r7, #20]
 80010c4:	801a      	strh	r2, [r3, #0]
 80010c6:	f8d7 d018 	ldr.w	sp, [r7, #24]
 80010ca:	e7e8      	b.n	800109e <LCD_ShowString+0x2a6>
					x++;
 80010cc:	6a3b      	ldr	r3, [r7, #32]
 80010ce:	3301      	adds	r3, #1
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	461a      	mov	r2, r3
 80010d4:	623b      	str	r3, [r7, #32]
					if(x>=w){POINT_COLOR=colortemp;return;}//��������
 80010d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80010d8:	429a      	cmp	r2, r3
 80010da:	d2f0      	bcs.n	80010be <LCD_ShowString+0x2c6>
					y=y0;
 80010dc:	464c      	mov	r4, r9
 80010de:	e7c6      	b.n	800106e <LCD_ShowString+0x276>
 80010e0:	24000000 	.word	0x24000000
 80010e4:	24000274 	.word	0x24000274
 80010e8:	24000268 	.word	0x24000268
 80010ec:	080099f0 	.word	0x080099f0
	uint16_t write[size][size==12?6:8];
 80010f0:	3307      	adds	r3, #7
 80010f2:	08db      	lsrs	r3, r3, #3
 80010f4:	00db      	lsls	r3, r3, #3
 80010f6:	61bb      	str	r3, [r7, #24]
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	469b      	mov	fp, r3
        if(x>=width){x=x0;y+=size;}
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	455b      	cmp	r3, fp
 8001100:	d805      	bhi.n	800110e <LCD_ShowString+0x316>
 8001102:	f109 090c 	add.w	r9, r9, #12
 8001106:	f897 b000 	ldrb.w	fp, [r7]
 800110a:	fa1f f989 	uxth.w	r9, r9
        if(y>=height)break;//�˳�
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	4599      	cmp	r9, r3
 8001112:	d2d0      	bcs.n	80010b6 <LCD_ShowString+0x2be>
	uint16_t write[size][size==12?6:8];
 8001114:	69bb      	ldr	r3, [r7, #24]
  ST7735_GetXSize(&st7735_pObj,&w);
 8001116:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
	uint16_t colortemp=POINT_COLOR; 
 800111a:	4d9c      	ldr	r5, [pc, #624]	@ (800138c <LCD_ShowString+0x594>)
{  							  
 800111c:	f8c7 d024 	str.w	sp, [r7, #36]	@ 0x24
	uint16_t write[size][size==12?6:8];
 8001120:	ebad 0d03 	sub.w	sp, sp, r3
	uint16_t colortemp=POINT_COLOR; 
 8001124:	882b      	ldrh	r3, [r5, #0]
  ST7735_GetXSize(&st7735_pObj,&w);
 8001126:	489a      	ldr	r0, [pc, #616]	@ (8001390 <LCD_ShowString+0x598>)
	uint16_t write[size][size==12?6:8];
 8001128:	f10d 0808 	add.w	r8, sp, #8
	uint16_t colortemp=POINT_COLOR; 
 800112c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ST7735_GetXSize(&st7735_pObj,&w);
 800112e:	f000 f947 	bl	80013c0 <ST7735_GetXSize>
	ST7735_GetYSize(&st7735_pObj,&h);
 8001132:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8001136:	4896      	ldr	r0, [pc, #600]	@ (8001390 <LCD_ShowString+0x598>)
 8001138:	f000 f94a 	bl	80013d0 <ST7735_GetYSize>
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 800113c:	4b95      	ldr	r3, [pc, #596]	@ (8001394 <LCD_ShowString+0x59c>)
 800113e:	f04f 32ff 	mov.w	r2, #4294967295
 8001142:	4995      	ldr	r1, [pc, #596]	@ (8001398 <LCD_ShowString+0x5a0>)
 8001144:	881e      	ldrh	r6, [r3, #0]
 8001146:	230c      	movs	r3, #12
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 8001148:	f8d7 e038 	ldr.w	lr, [r7, #56]	@ 0x38
 800114c:	fb13 2304 	smlabb	r3, r3, r4, r2
					POINT_COLOR=(colortemp&0xFF)<<8|colortemp>>8;
 8001150:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 8001152:	ba76      	rev16	r6, r6
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 8001154:	464c      	mov	r4, r9
					POINT_COLOR=(colortemp&0xFF)<<8|colortemp>>8;
 8001156:	ba52      	rev16	r2, r2
 8001158:	440b      	add	r3, r1
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 800115a:	b2b6      	uxth	r6, r6
	count = 0;
 800115c:	2100      	movs	r1, #0
					POINT_COLOR=(colortemp&0xFF)<<8|colortemp>>8;
 800115e:	b292      	uxth	r2, r2
 8001160:	633b      	str	r3, [r7, #48]	@ 0x30
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 8001162:	f8c7 b028 	str.w	fp, [r7, #40]	@ 0x28
		for(t=0;t<size;t++)
 8001166:	6379      	str	r1, [r7, #52]	@ 0x34
 8001168:	e9c7 5b07 	strd	r5, fp, [r7, #28]
				count ++;
 800116c:	1c48      	adds	r0, r1, #1
				write[count][t/2]=POINT_COLOR;
 800116e:	fb01 f30a 	mul.w	r3, r1, sl
				y++;
 8001172:	f104 0c01 	add.w	ip, r4, #1
				count ++;
 8001176:	b281      	uxth	r1, r0
				write[count][t/2]=POINT_COLOR;
 8001178:	6b78      	ldr	r0, [r7, #52]	@ 0x34
				y++;
 800117a:	fa1f fc8c 	uxth.w	ip, ip
				write[count][t/2]=POINT_COLOR;
 800117e:	eb03 0350 	add.w	r3, r3, r0, lsr #1
				if(temp&0x80)
 8001182:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001184:	f910 5f01 	ldrsb.w	r5, [r0, #1]!
 8001188:	6338      	str	r0, [r7, #48]	@ 0x30
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 800118a:	ea12 0025 	ands.w	r0, r2, r5, asr #32
 800118e:	bf38      	it	cc
 8001190:	4630      	movcc	r0, r6
				if(count >= size) count =0;
 8001192:	290c      	cmp	r1, #12
				write[count][t/2]=POINT_COLOR;
 8001194:	f828 0013 	strh.w	r0, [r8, r3, lsl #1]
				if(count >= size) count =0;
 8001198:	bf08      	it	eq
 800119a:	2100      	moveq	r1, #0
				write[count][t/2]=POINT_COLOR;
 800119c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 800119e:	45e6      	cmp	lr, ip
				write[count][t/2]=POINT_COLOR;
 80011a0:	ea4f 0353 	mov.w	r3, r3, lsr #1
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 80011a4:	f240 80e1 	bls.w	800136a <LCD_ShowString+0x572>
				if((y-y0)==size)
 80011a8:	ebac 0c09 	sub.w	ip, ip, r9
 80011ac:	f1bc 0f0c 	cmp.w	ip, #12
 80011b0:	f000 80e2 	beq.w	8001378 <LCD_ShowString+0x580>
				count ++;
 80011b4:	1c48      	adds	r0, r1, #1
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 80011b6:	f015 0f40 	tst.w	r5, #64	@ 0x40
				write[count][t/2]=POINT_COLOR;
 80011ba:	fb01 3b0a 	mla	fp, r1, sl, r3
				y++;
 80011be:	f104 0c02 	add.w	ip, r4, #2
				count ++;
 80011c2:	b281      	uxth	r1, r0
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 80011c4:	bf14      	ite	ne
 80011c6:	4610      	movne	r0, r2
 80011c8:	4630      	moveq	r0, r6
				y++;
 80011ca:	fa1f fc8c 	uxth.w	ip, ip
				if(count >= size) count =0;
 80011ce:	290c      	cmp	r1, #12
				write[count][t/2]=POINT_COLOR;
 80011d0:	f828 001b 	strh.w	r0, [r8, fp, lsl #1]
				if(count >= size) count =0;
 80011d4:	bf08      	it	eq
 80011d6:	2100      	moveq	r1, #0
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 80011d8:	45e6      	cmp	lr, ip
 80011da:	f240 80c6 	bls.w	800136a <LCD_ShowString+0x572>
				if((y-y0)==size)
 80011de:	ebac 0c09 	sub.w	ip, ip, r9
 80011e2:	f1bc 0f0c 	cmp.w	ip, #12
 80011e6:	f000 80c7 	beq.w	8001378 <LCD_ShowString+0x580>
				count ++;
 80011ea:	1c48      	adds	r0, r1, #1
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 80011ec:	f015 0f20 	tst.w	r5, #32
				write[count][t/2]=POINT_COLOR;
 80011f0:	fb01 3b0a 	mla	fp, r1, sl, r3
				y++;
 80011f4:	f104 0c03 	add.w	ip, r4, #3
				count ++;
 80011f8:	b281      	uxth	r1, r0
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 80011fa:	bf14      	ite	ne
 80011fc:	4610      	movne	r0, r2
 80011fe:	4630      	moveq	r0, r6
				y++;
 8001200:	fa1f fc8c 	uxth.w	ip, ip
				if(count >= size) count =0;
 8001204:	290c      	cmp	r1, #12
				write[count][t/2]=POINT_COLOR;
 8001206:	f828 001b 	strh.w	r0, [r8, fp, lsl #1]
				if(count >= size) count =0;
 800120a:	bf08      	it	eq
 800120c:	2100      	moveq	r1, #0
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 800120e:	45e6      	cmp	lr, ip
 8001210:	f240 80ab 	bls.w	800136a <LCD_ShowString+0x572>
				if((y-y0)==size)
 8001214:	ebac 0c09 	sub.w	ip, ip, r9
 8001218:	f1bc 0f0c 	cmp.w	ip, #12
 800121c:	f000 80ac 	beq.w	8001378 <LCD_ShowString+0x580>
				count ++;
 8001220:	1c48      	adds	r0, r1, #1
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 8001222:	f015 0f10 	tst.w	r5, #16
				write[count][t/2]=POINT_COLOR;
 8001226:	fb01 3b0a 	mla	fp, r1, sl, r3
				y++;
 800122a:	f104 0c04 	add.w	ip, r4, #4
				count ++;
 800122e:	b281      	uxth	r1, r0
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 8001230:	bf14      	ite	ne
 8001232:	4610      	movne	r0, r2
 8001234:	4630      	moveq	r0, r6
				y++;
 8001236:	fa1f fc8c 	uxth.w	ip, ip
				if(count >= size) count =0;
 800123a:	290c      	cmp	r1, #12
				write[count][t/2]=POINT_COLOR;
 800123c:	f828 001b 	strh.w	r0, [r8, fp, lsl #1]
				if(count >= size) count =0;
 8001240:	bf08      	it	eq
 8001242:	2100      	moveq	r1, #0
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 8001244:	45e6      	cmp	lr, ip
 8001246:	f240 8090 	bls.w	800136a <LCD_ShowString+0x572>
				if((y-y0)==size)
 800124a:	ebac 0c09 	sub.w	ip, ip, r9
 800124e:	f1bc 0f0c 	cmp.w	ip, #12
 8001252:	f000 8091 	beq.w	8001378 <LCD_ShowString+0x580>
				count ++;
 8001256:	1c48      	adds	r0, r1, #1
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 8001258:	f015 0f08 	tst.w	r5, #8
				write[count][t/2]=POINT_COLOR;
 800125c:	fb01 3b0a 	mla	fp, r1, sl, r3
				y++;
 8001260:	f104 0c05 	add.w	ip, r4, #5
				count ++;
 8001264:	b281      	uxth	r1, r0
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 8001266:	bf14      	ite	ne
 8001268:	4610      	movne	r0, r2
 800126a:	4630      	moveq	r0, r6
				y++;
 800126c:	fa1f fc8c 	uxth.w	ip, ip
				if(count >= size) count =0;
 8001270:	290c      	cmp	r1, #12
				write[count][t/2]=POINT_COLOR;
 8001272:	f828 001b 	strh.w	r0, [r8, fp, lsl #1]
				if(count >= size) count =0;
 8001276:	bf08      	it	eq
 8001278:	2100      	moveq	r1, #0
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 800127a:	45e6      	cmp	lr, ip
 800127c:	d975      	bls.n	800136a <LCD_ShowString+0x572>
				if((y-y0)==size)
 800127e:	ebac 0c09 	sub.w	ip, ip, r9
 8001282:	f1bc 0f0c 	cmp.w	ip, #12
 8001286:	d077      	beq.n	8001378 <LCD_ShowString+0x580>
				count ++;
 8001288:	1c48      	adds	r0, r1, #1
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 800128a:	f015 0f04 	tst.w	r5, #4
				write[count][t/2]=POINT_COLOR;
 800128e:	fb01 3b0a 	mla	fp, r1, sl, r3
				y++;
 8001292:	f104 0c06 	add.w	ip, r4, #6
				count ++;
 8001296:	b281      	uxth	r1, r0
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 8001298:	bf14      	ite	ne
 800129a:	4610      	movne	r0, r2
 800129c:	4630      	moveq	r0, r6
				y++;
 800129e:	fa1f fc8c 	uxth.w	ip, ip
				if(count >= size) count =0;
 80012a2:	290c      	cmp	r1, #12
				write[count][t/2]=POINT_COLOR;
 80012a4:	f828 001b 	strh.w	r0, [r8, fp, lsl #1]
				if(count >= size) count =0;
 80012a8:	bf08      	it	eq
 80012aa:	2100      	moveq	r1, #0
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 80012ac:	45e6      	cmp	lr, ip
 80012ae:	d95c      	bls.n	800136a <LCD_ShowString+0x572>
				if((y-y0)==size)
 80012b0:	ebac 0c09 	sub.w	ip, ip, r9
 80012b4:	f1bc 0f0c 	cmp.w	ip, #12
 80012b8:	d05e      	beq.n	8001378 <LCD_ShowString+0x580>
				count ++;
 80012ba:	1c48      	adds	r0, r1, #1
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 80012bc:	f015 0f02 	tst.w	r5, #2
				write[count][t/2]=POINT_COLOR;
 80012c0:	fb01 3b0a 	mla	fp, r1, sl, r3
				y++;
 80012c4:	f104 0c07 	add.w	ip, r4, #7
				count ++;
 80012c8:	b281      	uxth	r1, r0
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 80012ca:	bf14      	ite	ne
 80012cc:	4610      	movne	r0, r2
 80012ce:	4630      	moveq	r0, r6
				y++;
 80012d0:	fa1f fc8c 	uxth.w	ip, ip
				if(count >= size) count =0;
 80012d4:	290c      	cmp	r1, #12
				write[count][t/2]=POINT_COLOR;
 80012d6:	f828 001b 	strh.w	r0, [r8, fp, lsl #1]
				if(count >= size) count =0;
 80012da:	bf08      	it	eq
 80012dc:	2100      	moveq	r1, #0
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 80012de:	45e6      	cmp	lr, ip
 80012e0:	d943      	bls.n	800136a <LCD_ShowString+0x572>
				if((y-y0)==size)
 80012e2:	ebac 0c09 	sub.w	ip, ip, r9
 80012e6:	f1bc 0f0c 	cmp.w	ip, #12
 80012ea:	d045      	beq.n	8001378 <LCD_ShowString+0x580>
				write[count][t/2]=POINT_COLOR;
 80012ec:	fb01 330a 	mla	r3, r1, sl, r3
				count ++;
 80012f0:	3101      	adds	r1, #1
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 80012f2:	f015 0f01 	tst.w	r5, #1
				y++;
 80012f6:	f104 0408 	add.w	r4, r4, #8
				count ++;
 80012fa:	b289      	uxth	r1, r1
					POINT_COLOR=(BACK_COLOR&0xFF)<<8|BACK_COLOR>>8;
 80012fc:	bf14      	ite	ne
 80012fe:	4610      	movne	r0, r2
 8001300:	4630      	moveq	r0, r6
				y++;
 8001302:	b2a4      	uxth	r4, r4
				if(count >= size) count =0;
 8001304:	290c      	cmp	r1, #12
				write[count][t/2]=POINT_COLOR;
 8001306:	f828 0013 	strh.w	r0, [r8, r3, lsl #1]
				if(count >= size) count =0;
 800130a:	bf08      	it	eq
 800130c:	2100      	moveq	r1, #0
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 800130e:	45a6      	cmp	lr, r4
 8001310:	d92b      	bls.n	800136a <LCD_ShowString+0x572>
				if((y-y0)==size)
 8001312:	eba4 0309 	sub.w	r3, r4, r9
 8001316:	2b0c      	cmp	r3, #12
 8001318:	d02e      	beq.n	8001378 <LCD_ShowString+0x580>
		for(t=0;t<size;t++)
 800131a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800131c:	3301      	adds	r3, #1
 800131e:	b2db      	uxtb	r3, r3
 8001320:	2b0c      	cmp	r3, #12
 8001322:	637b      	str	r3, [r7, #52]	@ 0x34
 8001324:	f47f af22 	bne.w	800116c <LCD_ShowString+0x374>
 8001328:	e9d7 5b07 	ldrd	r5, fp, [r7, #28]
	ST7735_FillRGBRect(&st7735_pObj,x0,y0,(uint8_t *)&write,size==12?6:8,size); 
 800132c:	2206      	movs	r2, #6
 800132e:	8028      	strh	r0, [r5, #0]
 8001330:	4659      	mov	r1, fp
 8001332:	9301      	str	r3, [sp, #4]
 8001334:	4643      	mov	r3, r8
 8001336:	9200      	str	r2, [sp, #0]
 8001338:	464a      	mov	r2, r9
 800133a:	4815      	ldr	r0, [pc, #84]	@ (8001390 <LCD_ShowString+0x598>)
 800133c:	f000 feac 	bl	8002098 <ST7735_FillRGBRect>
	POINT_COLOR=colortemp;	    	   	 	  
 8001340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001342:	802b      	strh	r3, [r5, #0]
 8001344:	f8d7 d024 	ldr.w	sp, [r7, #36]	@ 0x24
    while((*p<='~')&&(*p>=' '))//�ж��ǲ��ǷǷ��ַ�!
 8001348:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800134a:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 800134e:	3c20      	subs	r4, #32
 8001350:	66fb      	str	r3, [r7, #108]	@ 0x6c
        x+=size/2;
 8001352:	f10b 0306 	add.w	r3, fp, #6
    while((*p<='~')&&(*p>=' '))//�ж��ǲ��ǷǷ��ַ�!
 8001356:	b2e4      	uxtb	r4, r4
        x+=size/2;
 8001358:	fa1f fb83 	uxth.w	fp, r3
    while((*p<='~')&&(*p>=' '))//�ж��ǲ��ǷǷ��ַ�!
 800135c:	2c5e      	cmp	r4, #94	@ 0x5e
 800135e:	f67f aecd 	bls.w	80010fc <LCD_ShowString+0x304>
}
 8001362:	3744      	adds	r7, #68	@ 0x44
 8001364:	46bd      	mov	sp, r7
 8001366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if(y>=h){POINT_COLOR=colortemp;return;}//��������
 800136a:	e9d7 5b07 	ldrd	r5, fp, [r7, #28]
 800136e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001370:	802b      	strh	r3, [r5, #0]
 8001372:	f8d7 d024 	ldr.w	sp, [r7, #36]	@ 0x24
 8001376:	e7e7      	b.n	8001348 <LCD_ShowString+0x550>
					x++;
 8001378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800137a:	3301      	adds	r3, #1
 800137c:	b29b      	uxth	r3, r3
 800137e:	461c      	mov	r4, r3
 8001380:	62bb      	str	r3, [r7, #40]	@ 0x28
					if(x>=w){POINT_COLOR=colortemp;return;}//��������
 8001382:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001384:	429c      	cmp	r4, r3
 8001386:	d2f0      	bcs.n	800136a <LCD_ShowString+0x572>
					y=y0;
 8001388:	464c      	mov	r4, r9
 800138a:	e7c6      	b.n	800131a <LCD_ShowString+0x522>
 800138c:	24000000 	.word	0x24000000
 8001390:	24000274 	.word	0x24000274
 8001394:	24000268 	.word	0x24000268
 8001398:	08009fe0 	.word	0x08009fe0

0800139c <ST7735_DeInit>:
int32_t ST7735_DeInit(ST7735_Object_t *pObj)
{
  (void)(pObj);

  return ST7735_OK;
}
 800139c:	2000      	movs	r0, #0
 800139e:	4770      	bx	lr

080013a0 <ST7735_SetBrightness>:
  (void)(pObj);
  (void)(Brightness);
	
  /* Feature not supported */
  return ST7735_ERROR;
}
 80013a0:	f04f 30ff 	mov.w	r0, #4294967295
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop

080013a8 <ST7735_GetBrightness>:
  (void)(pObj);
  (void)(Brightness);

  /* Feature not supported */
  return ST7735_ERROR;
}
 80013a8:	f04f 30ff 	mov.w	r0, #4294967295
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop

080013b0 <ST7735_GetOrientation>:
  * @retval The component status
  */
int32_t ST7735_GetOrientation(ST7735_Object_t *pObj, uint32_t *Orientation)
{

  *Orientation = ST7735Ctx.Orientation;
 80013b0:	4b02      	ldr	r3, [pc, #8]	@ (80013bc <ST7735_GetOrientation+0xc>)

  return ST7735_OK;
}
 80013b2:	2000      	movs	r0, #0
  *Orientation = ST7735Ctx.Orientation;
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	600b      	str	r3, [r1, #0]
}
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	240007b0 	.word	0x240007b0

080013c0 <ST7735_GetXSize>:
  */
int32_t ST7735_GetXSize(ST7735_Object_t *pObj, uint32_t *XSize)
{
  (void)pObj;

  *XSize = ST7735Ctx.Width;
 80013c0:	4b02      	ldr	r3, [pc, #8]	@ (80013cc <ST7735_GetXSize+0xc>)

  return ST7735_OK;
}
 80013c2:	2000      	movs	r0, #0
  *XSize = ST7735Ctx.Width;
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	600b      	str	r3, [r1, #0]
}
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	240007b0 	.word	0x240007b0

080013d0 <ST7735_GetYSize>:
  */
int32_t ST7735_GetYSize(ST7735_Object_t *pObj, uint32_t *YSize)
{
  (void)pObj;

  *YSize = ST7735Ctx.Height;
 80013d0:	4b02      	ldr	r3, [pc, #8]	@ (80013dc <ST7735_GetYSize+0xc>)

  return ST7735_OK;
}
 80013d2:	2000      	movs	r0, #0
  *YSize = ST7735Ctx.Height;
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	600b      	str	r3, [r1, #0]
}
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	240007b0 	.word	0x240007b0

080013e0 <ST7735_ReadRegWrap>:
  */
static int32_t ST7735_ReadRegWrap(void *Handle, uint8_t Reg, uint8_t* pData)
{
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;

  return pObj->IO.ReadReg(Reg, pData);
 80013e0:	6903      	ldr	r3, [r0, #16]
 80013e2:	4608      	mov	r0, r1
 80013e4:	4611      	mov	r1, r2
 80013e6:	4718      	bx	r3

080013e8 <ST7735_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval Component error status
  */
static int32_t ST7735_WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint32_t Length)
{
 80013e8:	b410      	push	{r4}
 80013ea:	4604      	mov	r4, r0
 80013ec:	4608      	mov	r0, r1
 80013ee:	4611      	mov	r1, r2
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;

  return pObj->IO.WriteReg(Reg, pData, Length);
 80013f0:	461a      	mov	r2, r3
 80013f2:	68e4      	ldr	r4, [r4, #12]
 80013f4:	4623      	mov	r3, r4
}
 80013f6:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(Reg, pData, Length);
 80013fa:	4718      	bx	r3

080013fc <ST7735_SendDataWrap>:
  */
static int32_t ST7735_SendDataWrap(void *Handle, uint8_t *pData, uint32_t Length)
{
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;

  return pObj->IO.SendData(pData, Length);
 80013fc:	6943      	ldr	r3, [r0, #20]
 80013fe:	4608      	mov	r0, r1
 8001400:	4611      	mov	r1, r2
 8001402:	4718      	bx	r3

08001404 <ST7735_RecvDataWrap>:
  */
static int32_t ST7735_RecvDataWrap(void *Handle, uint8_t *pData, uint32_t Length)
{
  ST7735_Object_t *pObj = (ST7735_Object_t *)Handle;

  return pObj->IO.RecvData(pData, Length);
 8001404:	6983      	ldr	r3, [r0, #24]
 8001406:	4608      	mov	r0, r1
 8001408:	4611      	mov	r1, r2
 800140a:	4718      	bx	r3

0800140c <ST7735_DisplayOn>:
{
 800140c:	b5f0      	push	{r4, r5, r6, r7, lr}
  ret = st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 0);
 800140e:	f100 0520 	add.w	r5, r0, #32
{
 8001412:	b083      	sub	sp, #12
  uint8_t tmp = 0;
 8001414:	2300      	movs	r3, #0
{
 8001416:	4604      	mov	r4, r0
  ret = st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 0);
 8001418:	f10d 0207 	add.w	r2, sp, #7
 800141c:	2113      	movs	r1, #19
 800141e:	4628      	mov	r0, r5
  uint8_t tmp = 0;
 8001420:	f88d 3007 	strb.w	r3, [sp, #7]
  ret = st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 0);
 8001424:	f000 ff8c 	bl	8002340 <st7735_write_reg>
  * @retval Component error status
  */
static int32_t ST7735_IO_Delay(ST7735_Object_t *pObj, uint32_t Delay)
{
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8001428:	69e3      	ldr	r3, [r4, #28]
  ret = st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 0);
 800142a:	4607      	mov	r7, r0
  tickstart = pObj->IO.GetTick();
 800142c:	4798      	blx	r3
 800142e:	4606      	mov	r6, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8001430:	69e3      	ldr	r3, [r4, #28]
 8001432:	4798      	blx	r3
 8001434:	1b83      	subs	r3, r0, r6
 8001436:	2b09      	cmp	r3, #9
 8001438:	d9fa      	bls.n	8001430 <ST7735_DisplayOn+0x24>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_ON, &tmp, 0);
 800143a:	2300      	movs	r3, #0
 800143c:	f10d 0207 	add.w	r2, sp, #7
 8001440:	2129      	movs	r1, #41	@ 0x29
 8001442:	4628      	mov	r0, r5
 8001444:	f000 ff7c 	bl	8002340 <st7735_write_reg>
  tickstart = pObj->IO.GetTick();
 8001448:	69e3      	ldr	r3, [r4, #28]
  ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_ON, &tmp, 0);
 800144a:	4407      	add	r7, r0
  tickstart = pObj->IO.GetTick();
 800144c:	4798      	blx	r3
 800144e:	4606      	mov	r6, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8001450:	69e3      	ldr	r3, [r4, #28]
 8001452:	4798      	blx	r3
 8001454:	1b83      	subs	r3, r0, r6
 8001456:	2b09      	cmp	r3, #9
 8001458:	d9fa      	bls.n	8001450 <ST7735_DisplayOn+0x44>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 0);
 800145a:	2300      	movs	r3, #0
 800145c:	f10d 0207 	add.w	r2, sp, #7
 8001460:	2136      	movs	r1, #54	@ 0x36
 8001462:	4628      	mov	r0, r5
 8001464:	f000 ff6c 	bl	8002340 <st7735_write_reg>
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8001468:	4b0f      	ldr	r3, [pc, #60]	@ (80014a8 <ST7735_DisplayOn+0x9c>)
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 0);
 800146a:	4407      	add	r7, r0
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800146c:	7b1a      	ldrb	r2, [r3, #12]
 800146e:	b9aa      	cbnz	r2, 800149c <ST7735_DisplayOn+0x90>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 8001470:	4a0e      	ldr	r2, [pc, #56]	@ (80014ac <ST7735_DisplayOn+0xa0>)
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8001478:	791b      	ldrb	r3, [r3, #4]
 800147a:	f043 0308 	orr.w	r3, r3, #8
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800147e:	2201      	movs	r2, #1
 8001480:	f10d 0107 	add.w	r1, sp, #7
 8001484:	4628      	mov	r0, r5
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8001486:	f88d 3007 	strb.w	r3, [sp, #7]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800148a:	f000 ff61 	bl	8002350 <st7735_send_data>
  if(ret != ST7735_OK)
 800148e:	42c7      	cmn	r7, r0
}
 8001490:	bf14      	ite	ne
 8001492:	f04f 30ff 	movne.w	r0, #4294967295
 8001496:	2000      	moveq	r0, #0
 8001498:	b003      	add	sp, #12
 800149a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 800149c:	4a03      	ldr	r2, [pc, #12]	@ (80014ac <ST7735_DisplayOn+0xa0>)
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80014a4:	791b      	ldrb	r3, [r3, #4]
 80014a6:	e7ea      	b.n	800147e <ST7735_DisplayOn+0x72>
 80014a8:	240007b0 	.word	0x240007b0
 80014ac:	080108a0 	.word	0x080108a0

080014b0 <ST7735_DisplayOff>:
{
 80014b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  ret = st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 0);
 80014b2:	f100 0520 	add.w	r5, r0, #32
{
 80014b6:	b083      	sub	sp, #12
  uint8_t tmp = 0;
 80014b8:	2300      	movs	r3, #0
{
 80014ba:	4604      	mov	r4, r0
  ret = st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 0);
 80014bc:	f10d 0207 	add.w	r2, sp, #7
 80014c0:	2113      	movs	r1, #19
 80014c2:	4628      	mov	r0, r5
  uint8_t tmp = 0;
 80014c4:	f88d 3007 	strb.w	r3, [sp, #7]
  ret = st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 0);
 80014c8:	f000 ff3a 	bl	8002340 <st7735_write_reg>
  tickstart = pObj->IO.GetTick();
 80014cc:	69e3      	ldr	r3, [r4, #28]
  ret = st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 0);
 80014ce:	4607      	mov	r7, r0
  tickstart = pObj->IO.GetTick();
 80014d0:	4798      	blx	r3
 80014d2:	4606      	mov	r6, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 80014d4:	69e3      	ldr	r3, [r4, #28]
 80014d6:	4798      	blx	r3
 80014d8:	1b83      	subs	r3, r0, r6
 80014da:	2b09      	cmp	r3, #9
 80014dc:	d9fa      	bls.n	80014d4 <ST7735_DisplayOff+0x24>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_OFF, &tmp, 0);
 80014de:	2300      	movs	r3, #0
 80014e0:	f10d 0207 	add.w	r2, sp, #7
 80014e4:	2128      	movs	r1, #40	@ 0x28
 80014e6:	4628      	mov	r0, r5
 80014e8:	f000 ff2a 	bl	8002340 <st7735_write_reg>
  tickstart = pObj->IO.GetTick();
 80014ec:	69e3      	ldr	r3, [r4, #28]
  ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_OFF, &tmp, 0);
 80014ee:	4407      	add	r7, r0
  tickstart = pObj->IO.GetTick();
 80014f0:	4798      	blx	r3
 80014f2:	4606      	mov	r6, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 80014f4:	69e3      	ldr	r3, [r4, #28]
 80014f6:	4798      	blx	r3
 80014f8:	1b83      	subs	r3, r0, r6
 80014fa:	2b09      	cmp	r3, #9
 80014fc:	d9fa      	bls.n	80014f4 <ST7735_DisplayOff+0x44>
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 0);
 80014fe:	2300      	movs	r3, #0
 8001500:	f10d 0207 	add.w	r2, sp, #7
 8001504:	2136      	movs	r1, #54	@ 0x36
 8001506:	4628      	mov	r0, r5
 8001508:	f000 ff1a 	bl	8002340 <st7735_write_reg>
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800150c:	4b0f      	ldr	r3, [pc, #60]	@ (800154c <ST7735_DisplayOff+0x9c>)
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 0);
 800150e:	4407      	add	r7, r0
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8001510:	7b1a      	ldrb	r2, [r3, #12]
 8001512:	b9aa      	cbnz	r2, 8001540 <ST7735_DisplayOff+0x90>
		(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 8001514:	4a0e      	ldr	r2, [pc, #56]	@ (8001550 <ST7735_DisplayOff+0xa0>)
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800151c:	791b      	ldrb	r3, [r3, #4]
 800151e:	f043 0308 	orr.w	r3, r3, #8
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001522:	2201      	movs	r2, #1
 8001524:	f10d 0107 	add.w	r1, sp, #7
 8001528:	4628      	mov	r0, r5
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800152a:	f88d 3007 	strb.w	r3, [sp, #7]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800152e:	f000 ff0f 	bl	8002350 <st7735_send_data>
  if(ret != ST7735_OK)
 8001532:	42c7      	cmn	r7, r0
}
 8001534:	bf14      	ite	ne
 8001536:	f04f 30ff 	movne.w	r0, #4294967295
 800153a:	2000      	moveq	r0, #0
 800153c:	b003      	add	sp, #12
 800153e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 8001540:	4a03      	ldr	r2, [pc, #12]	@ (8001550 <ST7735_DisplayOff+0xa0>)
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8001548:	791b      	ldrb	r3, [r3, #4]
 800154a:	e7ea      	b.n	8001522 <ST7735_DisplayOff+0x72>
 800154c:	240007b0 	.word	0x240007b0
 8001550:	080108a0 	.word	0x080108a0

08001554 <ST7735_SetDisplayWindow>:
{
 8001554:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001558:	4699      	mov	r9, r3
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {		//0.96 ST7735
 800155a:	4b4f      	ldr	r3, [pc, #316]	@ (8001698 <ST7735_SetDisplayWindow+0x144>)
{
 800155c:	460f      	mov	r7, r1
 800155e:	4616      	mov	r6, r2
	if(ST7735Ctx.Orientation <= ST7735_ORIENTATION_PORTRAIT_ROT180) {
 8001560:	6899      	ldr	r1, [r3, #8]
{
 8001562:	b083      	sub	sp, #12
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {		//0.96 ST7735
 8001564:	7b5a      	ldrb	r2, [r3, #13]
	if(ST7735Ctx.Orientation <= ST7735_ORIENTATION_PORTRAIT_ROT180) {
 8001566:	2901      	cmp	r1, #1
 8001568:	d97c      	bls.n	8001664 <ST7735_SetDisplayWindow+0x110>
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {
 800156a:	2a01      	cmp	r2, #1
 800156c:	d075      	beq.n	800165a <ST7735_SetDisplayWindow+0x106>
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 800156e:	2a02      	cmp	r2, #2
 8001570:	f000 8089 	beq.w	8001686 <ST7735_SetDisplayWindow+0x132>
  ret = st7735_write_reg(&pObj->Ctx, ST7735_CASET, &tmp, 0);
 8001574:	f100 0520 	add.w	r5, r0, #32
 8001578:	f10d 0207 	add.w	r2, sp, #7
 800157c:	2300      	movs	r3, #0
 800157e:	212a      	movs	r1, #42	@ 0x2a
 8001580:	4628      	mov	r0, r5
  tmp = (uint8_t)(Xpos & 0xFFU);
 8001582:	fa5f f887 	uxtb.w	r8, r7
  ret = st7735_write_reg(&pObj->Ctx, ST7735_CASET, &tmp, 0);
 8001586:	f000 fedb 	bl	8002340 <st7735_write_reg>
 800158a:	4604      	mov	r4, r0
  tmp = (uint8_t)(Xpos >> 8U);
 800158c:	0a3b      	lsrs	r3, r7, #8
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800158e:	f10d 0107 	add.w	r1, sp, #7
  tmp = (uint8_t)((Xpos + Width - 1U) >> 8U);
 8001592:	f109 39ff 	add.w	r9, r9, #4294967295
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001596:	2201      	movs	r2, #1
 8001598:	4628      	mov	r0, r5
  tmp = (uint8_t)(Xpos >> 8U);
 800159a:	f88d 3007 	strb.w	r3, [sp, #7]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800159e:	f000 fed7 	bl	8002350 <st7735_send_data>
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80015a2:	f10d 0107 	add.w	r1, sp, #7
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80015a6:	4404      	add	r4, r0
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80015a8:	2201      	movs	r2, #1
 80015aa:	4628      	mov	r0, r5
  tmp = (uint8_t)(Xpos & 0xFFU);
 80015ac:	f88d 8007 	strb.w	r8, [sp, #7]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80015b0:	f000 fece 	bl	8002350 <st7735_send_data>
  tmp = (uint8_t)((Xpos + Width - 1U) >> 8U);
 80015b4:	eb09 0107 	add.w	r1, r9, r7
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80015b8:	4404      	add	r4, r0
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80015ba:	2201      	movs	r2, #1
  tmp = (uint8_t)((Xpos + Width - 1U) >> 8U);
 80015bc:	0a09      	lsrs	r1, r1, #8
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80015be:	4628      	mov	r0, r5
  tmp = (uint8_t)((Xpos + Width - 1U) & 0xFFU);
 80015c0:	44c8      	add	r8, r9
  tmp = (uint8_t)((Xpos + Width - 1U) >> 8U);
 80015c2:	f88d 1007 	strb.w	r1, [sp, #7]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80015c6:	f10d 0107 	add.w	r1, sp, #7
 80015ca:	f000 fec1 	bl	8002350 <st7735_send_data>
 80015ce:	4404      	add	r4, r0
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80015d0:	f10d 0107 	add.w	r1, sp, #7
 80015d4:	2201      	movs	r2, #1
 80015d6:	4628      	mov	r0, r5
  tmp = (uint8_t)((Xpos + Width - 1U) & 0xFFU);
 80015d8:	f88d 8007 	strb.w	r8, [sp, #7]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80015dc:	f000 feb8 	bl	8002350 <st7735_send_data>
 80015e0:	4404      	add	r4, r0
  ret += st7735_write_reg(&pObj->Ctx, ST7735_RASET, &tmp, 0);
 80015e2:	f10d 0207 	add.w	r2, sp, #7
 80015e6:	2300      	movs	r3, #0
 80015e8:	212b      	movs	r1, #43	@ 0x2b
 80015ea:	4628      	mov	r0, r5
 80015ec:	f000 fea8 	bl	8002340 <st7735_write_reg>
 80015f0:	4404      	add	r4, r0
  tmp = (uint8_t)(Ypos >> 8U);
 80015f2:	0a33      	lsrs	r3, r6, #8
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80015f4:	f10d 0107 	add.w	r1, sp, #7
  tmp = (uint8_t)(Ypos & 0xFFU);
 80015f8:	fa5f f886 	uxtb.w	r8, r6
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80015fc:	2201      	movs	r2, #1
 80015fe:	4628      	mov	r0, r5
  tmp = (uint8_t)(Ypos >> 8U);
 8001600:	f88d 3007 	strb.w	r3, [sp, #7]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001604:	f000 fea4 	bl	8002350 <st7735_send_data>
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001608:	f10d 0107 	add.w	r1, sp, #7
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800160c:	4404      	add	r4, r0
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800160e:	2201      	movs	r2, #1
 8001610:	4628      	mov	r0, r5
  tmp = (uint8_t)(Ypos & 0xFFU);
 8001612:	f88d 8007 	strb.w	r8, [sp, #7]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001616:	f000 fe9b 	bl	8002350 <st7735_send_data>
  tmp = (uint8_t)((Ypos + Height - 1U) >> 8U);
 800161a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800161c:	4404      	add	r4, r0
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800161e:	f10d 0107 	add.w	r1, sp, #7
  tmp = (uint8_t)((Ypos + Height - 1U) >> 8U);
 8001622:	1e5f      	subs	r7, r3, #1
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001624:	2201      	movs	r2, #1
 8001626:	4628      	mov	r0, r5
  tmp = (uint8_t)((Ypos + Height - 1U) >> 8U);
 8001628:	443e      	add	r6, r7
 800162a:	0a36      	lsrs	r6, r6, #8
 800162c:	f88d 6007 	strb.w	r6, [sp, #7]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001630:	f000 fe8e 	bl	8002350 <st7735_send_data>
  tmp = (uint8_t)((Ypos + Height - 1U) & 0xFFU);
 8001634:	eb08 0307 	add.w	r3, r8, r7
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001638:	4404      	add	r4, r0
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800163a:	2201      	movs	r2, #1
 800163c:	f10d 0107 	add.w	r1, sp, #7
 8001640:	4628      	mov	r0, r5
  tmp = (uint8_t)((Ypos + Height - 1U) & 0xFFU);
 8001642:	f88d 3007 	strb.w	r3, [sp, #7]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001646:	f000 fe83 	bl	8002350 <st7735_send_data>
  if(ret != ST7735_OK)
 800164a:	42c4      	cmn	r4, r0
}
 800164c:	bf14      	ite	ne
 800164e:	f04f 30ff 	movne.w	r0, #4294967295
 8001652:	2000      	moveq	r0, #0
 8001654:	b003      	add	sp, #12
 8001656:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (ST7735Ctx.Panel == HannStar_Panel) {		//0.96 ST7735
 800165a:	7b1b      	ldrb	r3, [r3, #12]
				Xpos += 1;
 800165c:	3701      	adds	r7, #1
			if (ST7735Ctx.Panel == HannStar_Panel) {		//0.96 ST7735
 800165e:	b95b      	cbnz	r3, 8001678 <ST7735_SetDisplayWindow+0x124>
				Ypos += 26;
 8001660:	361a      	adds	r6, #26
 8001662:	e787      	b.n	8001574 <ST7735_SetDisplayWindow+0x20>
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {		//0.96 ST7735
 8001664:	2a01      	cmp	r2, #1
 8001666:	d009      	beq.n	800167c <ST7735_SetDisplayWindow+0x128>
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 8001668:	2a02      	cmp	r2, #2
 800166a:	d183      	bne.n	8001574 <ST7735_SetDisplayWindow+0x20>
      if (ST7735Ctx.Panel == BOE_Panel) {
 800166c:	7b1b      	ldrb	r3, [r3, #12]
 800166e:	2b01      	cmp	r3, #1
 8001670:	d180      	bne.n	8001574 <ST7735_SetDisplayWindow+0x20>
				Xpos += 2;
 8001672:	3702      	adds	r7, #2
				Ypos += 1;
 8001674:	3601      	adds	r6, #1
 8001676:	e77d      	b.n	8001574 <ST7735_SetDisplayWindow+0x20>
				Ypos += 24;
 8001678:	3618      	adds	r6, #24
 800167a:	e77b      	b.n	8001574 <ST7735_SetDisplayWindow+0x20>
			if (ST7735Ctx.Panel == HannStar_Panel) {
 800167c:	7b1b      	ldrb	r3, [r3, #12]
 800167e:	b94b      	cbnz	r3, 8001694 <ST7735_SetDisplayWindow+0x140>
				Xpos += 26;
 8001680:	371a      	adds	r7, #26
				Ypos += 1;
 8001682:	3601      	adds	r6, #1
 8001684:	e776      	b.n	8001574 <ST7735_SetDisplayWindow+0x20>
      if (ST7735Ctx.Panel == BOE_Panel) {
 8001686:	7b1b      	ldrb	r3, [r3, #12]
 8001688:	2b01      	cmp	r3, #1
 800168a:	f47f af73 	bne.w	8001574 <ST7735_SetDisplayWindow+0x20>
				Xpos += 1;
 800168e:	3701      	adds	r7, #1
				Ypos += 2;
 8001690:	3602      	adds	r6, #2
 8001692:	e76f      	b.n	8001574 <ST7735_SetDisplayWindow+0x20>
				Xpos += 24;
 8001694:	3718      	adds	r7, #24
				Ypos += 0;
 8001696:	e76d      	b.n	8001574 <ST7735_SetDisplayWindow+0x20>
 8001698:	240007b0 	.word	0x240007b0
 800169c:	00000000 	.word	0x00000000

080016a0 <ST7735_SetOrientation>:
  if((pDriver->Orientation == ST7735_ORIENTATION_PORTRAIT) || (pDriver->Orientation == ST7735_ORIENTATION_PORTRAIT_ROT180))
 80016a0:	688a      	ldr	r2, [r1, #8]
 80016a2:	2a01      	cmp	r2, #1
{
 80016a4:	b570      	push	{r4, r5, r6, lr}
 80016a6:	4605      	mov	r5, r0
 80016a8:	b084      	sub	sp, #16
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 80016aa:	7b48      	ldrb	r0, [r1, #13]
  if((pDriver->Orientation == ST7735_ORIENTATION_PORTRAIT) || (pDriver->Orientation == ST7735_ORIENTATION_PORTRAIT_ROT180))
 80016ac:	d938      	bls.n	8001720 <ST7735_SetOrientation+0x80>
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 80016ae:	2801      	cmp	r0, #1
 80016b0:	d00a      	beq.n	80016c8 <ST7735_SetOrientation+0x28>
		} else if (pDriver->Type == ST7735_1_8_inch_screen || pDriver->Type == ST7735_1_8a_inch_screen){
 80016b2:	f010 0ffd 	tst.w	r0, #253	@ 0xfd
 80016b6:	d138      	bne.n	800172a <ST7735_SetOrientation+0x8a>
			ST7735Ctx.Width  = ST7735_1_8_HEIGHT;
 80016b8:	4c31      	ldr	r4, [pc, #196]	@ (8001780 <ST7735_SetOrientation+0xe0>)
 80016ba:	2680      	movs	r6, #128	@ 0x80
 80016bc:	23a0      	movs	r3, #160	@ 0xa0
 80016be:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 8001760 <ST7735_SetOrientation+0xc0>
 80016c2:	ed84 7b00 	vstr	d7, [r4]
 80016c6:	e006      	b.n	80016d6 <ST7735_SetOrientation+0x36>
			ST7735Ctx.Width  = ST7735_0_9_HEIGHT;
 80016c8:	ed9f 7b27 	vldr	d7, [pc, #156]	@ 8001768 <ST7735_SetOrientation+0xc8>
 80016cc:	4c2c      	ldr	r4, [pc, #176]	@ (8001780 <ST7735_SetOrientation+0xe0>)
 80016ce:	2650      	movs	r6, #80	@ 0x50
 80016d0:	23a0      	movs	r3, #160	@ 0xa0
 80016d2:	ed84 7b00 	vstr	d7, [r4]
  ret = ST7735_SetDisplayWindow(pObj, 0U, 0U, ST7735Ctx.Width, ST7735Ctx.Height);
 80016d6:	9600      	str	r6, [sp, #0]
	ST7735Ctx.Orientation = pDriver->Orientation;
 80016d8:	60a2      	str	r2, [r4, #8]
  ret = ST7735_SetDisplayWindow(pObj, 0U, 0U, ST7735Ctx.Width, ST7735Ctx.Height);
 80016da:	2200      	movs	r2, #0
	ST7735Ctx.Panel = pDriver->Panel;
 80016dc:	7b09      	ldrb	r1, [r1, #12]
	ST7735Ctx.Type = pDriver->Type;
 80016de:	7360      	strb	r0, [r4, #13]
  ret = ST7735_SetDisplayWindow(pObj, 0U, 0U, ST7735Ctx.Width, ST7735Ctx.Height);
 80016e0:	4628      	mov	r0, r5
	ST7735Ctx.Panel = pDriver->Panel;
 80016e2:	7321      	strb	r1, [r4, #12]
  ret = ST7735_SetDisplayWindow(pObj, 0U, 0U, ST7735Ctx.Width, ST7735Ctx.Height);
 80016e4:	4611      	mov	r1, r2
 80016e6:	f7ff ff35 	bl	8001554 <ST7735_SetDisplayWindow>
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80016ea:	7b23      	ldrb	r3, [r4, #12]
  ret = ST7735_SetDisplayWindow(pObj, 0U, 0U, ST7735Ctx.Width, ST7735Ctx.Height);
 80016ec:	4606      	mov	r6, r0
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80016ee:	bb03      	cbnz	r3, 8001732 <ST7735_SetOrientation+0x92>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 80016f0:	4b24      	ldr	r3, [pc, #144]	@ (8001784 <ST7735_SetOrientation+0xe4>)
 80016f2:	68a2      	ldr	r2, [r4, #8]
 80016f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 80016f8:	7919      	ldrb	r1, [r3, #4]
 80016fa:	f041 0108 	orr.w	r1, r1, #8
 80016fe:	f88d 100f 	strb.w	r1, [sp, #15]
  ret += st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1);
 8001702:	2301      	movs	r3, #1
 8001704:	f10d 020f 	add.w	r2, sp, #15
 8001708:	f105 0020 	add.w	r0, r5, #32
 800170c:	2136      	movs	r1, #54	@ 0x36
 800170e:	f000 fe17 	bl	8002340 <st7735_write_reg>
  if(ret != ST7735_OK)
 8001712:	42c6      	cmn	r6, r0
}
 8001714:	bf14      	ite	ne
 8001716:	f04f 30ff 	movne.w	r0, #4294967295
 800171a:	2000      	moveq	r0, #0
 800171c:	b004      	add	sp, #16
 800171e:	bd70      	pop	{r4, r5, r6, pc}
		if (pDriver->Type == ST7735_0_9_inch_screen) {
 8001720:	2801      	cmp	r0, #1
 8001722:	d014      	beq.n	800174e <ST7735_SetOrientation+0xae>
		} else if (pDriver->Type == ST7735_1_8_inch_screen || pDriver->Type == ST7735_1_8a_inch_screen){
 8001724:	f010 0ffd 	tst.w	r0, #253	@ 0xfd
 8001728:	d009      	beq.n	800173e <ST7735_SetOrientation+0x9e>
  ret = ST7735_SetDisplayWindow(pObj, 0U, 0U, ST7735Ctx.Width, ST7735Ctx.Height);
 800172a:	4c15      	ldr	r4, [pc, #84]	@ (8001780 <ST7735_SetOrientation+0xe0>)
 800172c:	e9d4 3600 	ldrd	r3, r6, [r4]
 8001730:	e7d1      	b.n	80016d6 <ST7735_SetOrientation+0x36>
			(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_RGB;
 8001732:	4b14      	ldr	r3, [pc, #80]	@ (8001784 <ST7735_SetOrientation+0xe4>)
 8001734:	68a2      	ldr	r2, [r4, #8]
 8001736:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
	tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 800173a:	7919      	ldrb	r1, [r3, #4]
 800173c:	e7df      	b.n	80016fe <ST7735_SetOrientation+0x5e>
			ST7735Ctx.Width  = ST7735_1_8_WIDTH;
 800173e:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8001770 <ST7735_SetOrientation+0xd0>
 8001742:	4c0f      	ldr	r4, [pc, #60]	@ (8001780 <ST7735_SetOrientation+0xe0>)
 8001744:	26a0      	movs	r6, #160	@ 0xa0
 8001746:	2380      	movs	r3, #128	@ 0x80
 8001748:	ed84 7b00 	vstr	d7, [r4]
 800174c:	e7c3      	b.n	80016d6 <ST7735_SetOrientation+0x36>
			ST7735Ctx.Width  = ST7735_0_9_WIDTH;
 800174e:	ed9f 7b0a 	vldr	d7, [pc, #40]	@ 8001778 <ST7735_SetOrientation+0xd8>
 8001752:	4c0b      	ldr	r4, [pc, #44]	@ (8001780 <ST7735_SetOrientation+0xe0>)
 8001754:	26a0      	movs	r6, #160	@ 0xa0
 8001756:	2350      	movs	r3, #80	@ 0x50
 8001758:	ed84 7b00 	vstr	d7, [r4]
 800175c:	e7bb      	b.n	80016d6 <ST7735_SetOrientation+0x36>
 800175e:	bf00      	nop
 8001760:	000000a0 	.word	0x000000a0
 8001764:	00000080 	.word	0x00000080
 8001768:	000000a0 	.word	0x000000a0
 800176c:	00000050 	.word	0x00000050
 8001770:	00000080 	.word	0x00000080
 8001774:	000000a0 	.word	0x000000a0
 8001778:	00000050 	.word	0x00000050
 800177c:	000000a0 	.word	0x000000a0
 8001780:	240007b0 	.word	0x240007b0
 8001784:	080108a0 	.word	0x080108a0

08001788 <ST7735_Init>:
{
 8001788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800178c:	b085      	sub	sp, #20
 800178e:	e9cd 2100 	strd	r2, r1, [sp]
  if(pObj == NULL)
 8001792:	2800      	cmp	r0, #0
 8001794:	f000 82bc 	beq.w	8001d10 <ST7735_Init+0x588>
    ret = st7735_write_reg(&pObj->Ctx, ST7735_SW_RESET, &tmp, 0);
 8001798:	f100 0520 	add.w	r5, r0, #32
    tmp = 0x00U;
 800179c:	2300      	movs	r3, #0
 800179e:	4606      	mov	r6, r0
    ret = st7735_write_reg(&pObj->Ctx, ST7735_SW_RESET, &tmp, 0);
 80017a0:	f10d 020f 	add.w	r2, sp, #15
 80017a4:	2101      	movs	r1, #1
 80017a6:	4628      	mov	r0, r5
    tmp = 0x00U;
 80017a8:	f88d 300f 	strb.w	r3, [sp, #15]
    ret = st7735_write_reg(&pObj->Ctx, ST7735_SW_RESET, &tmp, 0);
 80017ac:	f000 fdc8 	bl	8002340 <st7735_write_reg>
  tickstart = pObj->IO.GetTick();
 80017b0:	69f3      	ldr	r3, [r6, #28]
 80017b2:	4798      	blx	r3
 80017b4:	4604      	mov	r4, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 80017b6:	69f3      	ldr	r3, [r6, #28]
 80017b8:	4798      	blx	r3
 80017ba:	1b00      	subs	r0, r0, r4
 80017bc:	2877      	cmp	r0, #119	@ 0x77
 80017be:	d9fa      	bls.n	80017b6 <ST7735_Init+0x2e>
		tmp = 0x00U;
 80017c0:	2300      	movs	r3, #0
    ret = st7735_write_reg(&pObj->Ctx, ST7735_SW_RESET, &tmp, 0);
 80017c2:	f10d 020f 	add.w	r2, sp, #15
 80017c6:	2101      	movs	r1, #1
 80017c8:	4628      	mov	r0, r5
		tmp = 0x00U;
 80017ca:	f88d 300f 	strb.w	r3, [sp, #15]
    ret = st7735_write_reg(&pObj->Ctx, ST7735_SW_RESET, &tmp, 0);
 80017ce:	f000 fdb7 	bl	8002340 <st7735_write_reg>
  tickstart = pObj->IO.GetTick();
 80017d2:	69f3      	ldr	r3, [r6, #28]
    ret = st7735_write_reg(&pObj->Ctx, ST7735_SW_RESET, &tmp, 0);
 80017d4:	4604      	mov	r4, r0
  tickstart = pObj->IO.GetTick();
 80017d6:	4798      	blx	r3
 80017d8:	4607      	mov	r7, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 80017da:	69f3      	ldr	r3, [r6, #28]
 80017dc:	4798      	blx	r3
 80017de:	1bc0      	subs	r0, r0, r7
 80017e0:	2877      	cmp	r0, #119	@ 0x77
 80017e2:	d9fa      	bls.n	80017da <ST7735_Init+0x52>
    tmp = 0x00U;
 80017e4:	f04f 0800 	mov.w	r8, #0
    ret += st7735_write_reg(&pObj->Ctx, ST7735_SLEEP_OUT, &tmp, 1);
 80017e8:	2301      	movs	r3, #1
 80017ea:	f10d 020f 	add.w	r2, sp, #15
 80017ee:	2111      	movs	r1, #17
 80017f0:	4628      	mov	r0, r5
    tmp = 0x00U;
 80017f2:	f88d 800f 	strb.w	r8, [sp, #15]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_SLEEP_OUT, &tmp, 1);
 80017f6:	f000 fda3 	bl	8002340 <st7735_write_reg>
 80017fa:	4404      	add	r4, r0
    tmp = 0x01U;
 80017fc:	2701      	movs	r7, #1
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL1, &tmp, 0);
 80017fe:	4643      	mov	r3, r8
 8001800:	f10d 020f 	add.w	r2, sp, #15
 8001804:	21b1      	movs	r1, #177	@ 0xb1
 8001806:	4628      	mov	r0, r5
    tmp = 0x2CU;
 8001808:	f04f 0a2c 	mov.w	sl, #44	@ 0x2c
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL1, &tmp, 0);
 800180c:	f000 fd98 	bl	8002340 <st7735_write_reg>
 8001810:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001812:	463a      	mov	r2, r7
 8001814:	f10d 010f 	add.w	r1, sp, #15
 8001818:	4628      	mov	r0, r5
    tmp = 0x01U;
 800181a:	f88d 700f 	strb.w	r7, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800181e:	f000 fd97 	bl	8002350 <st7735_send_data>
 8001822:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001824:	463a      	mov	r2, r7
 8001826:	f10d 010f 	add.w	r1, sp, #15
 800182a:	4628      	mov	r0, r5
    tmp = 0x2DU;
 800182c:	f04f 092d 	mov.w	r9, #45	@ 0x2d
    tmp = 0x2CU;
 8001830:	f88d a00f 	strb.w	sl, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001834:	f000 fd8c 	bl	8002350 <st7735_send_data>
 8001838:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800183a:	463a      	mov	r2, r7
 800183c:	f10d 010f 	add.w	r1, sp, #15
 8001840:	4628      	mov	r0, r5
    tmp = 0x2DU;
 8001842:	f88d 900f 	strb.w	r9, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001846:	f000 fd83 	bl	8002350 <st7735_send_data>
 800184a:	4404      	add	r4, r0
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL2, &tmp, 1);
 800184c:	463b      	mov	r3, r7
 800184e:	f10d 020f 	add.w	r2, sp, #15
 8001852:	21b2      	movs	r1, #178	@ 0xb2
 8001854:	4628      	mov	r0, r5
    tmp = 0x01U;
 8001856:	f88d 700f 	strb.w	r7, [sp, #15]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL2, &tmp, 1);
 800185a:	f000 fd71 	bl	8002340 <st7735_write_reg>
 800185e:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001860:	463a      	mov	r2, r7
 8001862:	f10d 010f 	add.w	r1, sp, #15
 8001866:	4628      	mov	r0, r5
    tmp = 0x2CU;
 8001868:	f88d a00f 	strb.w	sl, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800186c:	f000 fd70 	bl	8002350 <st7735_send_data>
 8001870:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001872:	463a      	mov	r2, r7
 8001874:	f10d 010f 	add.w	r1, sp, #15
 8001878:	4628      	mov	r0, r5
    tmp = 0x2DU;
 800187a:	f88d 900f 	strb.w	r9, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800187e:	f000 fd67 	bl	8002350 <st7735_send_data>
 8001882:	4404      	add	r4, r0
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL3, &tmp, 1);
 8001884:	463b      	mov	r3, r7
 8001886:	f10d 020f 	add.w	r2, sp, #15
 800188a:	21b3      	movs	r1, #179	@ 0xb3
 800188c:	4628      	mov	r0, r5
    tmp = 0x01U;
 800188e:	f88d 700f 	strb.w	r7, [sp, #15]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_RATE_CTRL3, &tmp, 1);
 8001892:	f000 fd55 	bl	8002340 <st7735_write_reg>
 8001896:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001898:	463a      	mov	r2, r7
 800189a:	f10d 010f 	add.w	r1, sp, #15
 800189e:	4628      	mov	r0, r5
    tmp = 0x2CU;
 80018a0:	f88d a00f 	strb.w	sl, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80018a4:	f000 fd54 	bl	8002350 <st7735_send_data>
 80018a8:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80018aa:	463a      	mov	r2, r7
 80018ac:	f10d 010f 	add.w	r1, sp, #15
 80018b0:	4628      	mov	r0, r5
    tmp = 0x2DU;
 80018b2:	f88d 900f 	strb.w	r9, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80018b6:	f000 fd4b 	bl	8002350 <st7735_send_data>
 80018ba:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80018bc:	463a      	mov	r2, r7
 80018be:	f10d 010f 	add.w	r1, sp, #15
 80018c2:	4628      	mov	r0, r5
    tmp = 0x01U;
 80018c4:	f88d 700f 	strb.w	r7, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80018c8:	f000 fd42 	bl	8002350 <st7735_send_data>
 80018cc:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80018ce:	463a      	mov	r2, r7
 80018d0:	f10d 010f 	add.w	r1, sp, #15
 80018d4:	4628      	mov	r0, r5
    tmp = 0x2CU;
 80018d6:	f88d a00f 	strb.w	sl, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80018da:	f000 fd39 	bl	8002350 <st7735_send_data>
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80018de:	463a      	mov	r2, r7
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80018e0:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80018e2:	f10d 010f 	add.w	r1, sp, #15
 80018e6:	4628      	mov	r0, r5
    tmp = 0x2DU;
 80018e8:	f88d 900f 	strb.w	r9, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80018ec:	f000 fd30 	bl	8002350 <st7735_send_data>
    tmp = 0x07U;
 80018f0:	2307      	movs	r3, #7
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80018f2:	4404      	add	r4, r0
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_INVERSION_CTRL, &tmp, 1);
 80018f4:	f10d 020f 	add.w	r2, sp, #15
 80018f8:	21b4      	movs	r1, #180	@ 0xb4
    tmp = 0x07U;
 80018fa:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_INVERSION_CTRL, &tmp, 1);
 80018fe:	4628      	mov	r0, r5
 8001900:	463b      	mov	r3, r7
    tmp = 0xC5U;
 8001902:	f04f 09c5 	mov.w	r9, #197	@ 0xc5
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_INVERSION_CTRL, &tmp, 1);
 8001906:	f000 fd1b 	bl	8002340 <st7735_write_reg>
    tmp = 0xA2U;
 800190a:	23a2      	movs	r3, #162	@ 0xa2
    ret += st7735_write_reg(&pObj->Ctx, ST7735_FRAME_INVERSION_CTRL, &tmp, 1);
 800190c:	4404      	add	r4, r0
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL1, &tmp, 1);
 800190e:	f10d 020f 	add.w	r2, sp, #15
 8001912:	21c0      	movs	r1, #192	@ 0xc0
    tmp = 0xA2U;
 8001914:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL1, &tmp, 1);
 8001918:	4628      	mov	r0, r5
 800191a:	463b      	mov	r3, r7
 800191c:	f000 fd10 	bl	8002340 <st7735_write_reg>
    tmp = 0x02U;
 8001920:	2302      	movs	r3, #2
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL1, &tmp, 1);
 8001922:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001924:	463a      	mov	r2, r7
 8001926:	f10d 010f 	add.w	r1, sp, #15
 800192a:	4628      	mov	r0, r5
    tmp = 0x02U;
 800192c:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001930:	f000 fd0e 	bl	8002350 <st7735_send_data>
    tmp = 0x84U;
 8001934:	2384      	movs	r3, #132	@ 0x84
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001936:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001938:	463a      	mov	r2, r7
 800193a:	f10d 010f 	add.w	r1, sp, #15
 800193e:	4628      	mov	r0, r5
    tmp = 0x84U;
 8001940:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001944:	f000 fd04 	bl	8002350 <st7735_send_data>
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL2, &tmp, 1);
 8001948:	463b      	mov	r3, r7
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 800194a:	4404      	add	r4, r0
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL2, &tmp, 1);
 800194c:	f10d 020f 	add.w	r2, sp, #15
 8001950:	21c1      	movs	r1, #193	@ 0xc1
 8001952:	4628      	mov	r0, r5
    tmp = 0xC5U;
 8001954:	f88d 900f 	strb.w	r9, [sp, #15]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL2, &tmp, 1);
 8001958:	f000 fcf2 	bl	8002340 <st7735_write_reg>
    tmp = 0x0AU;
 800195c:	230a      	movs	r3, #10
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL2, &tmp, 1);
 800195e:	4404      	add	r4, r0
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL3, &tmp, 1);
 8001960:	f10d 020f 	add.w	r2, sp, #15
 8001964:	21c2      	movs	r1, #194	@ 0xc2
    tmp = 0x0AU;
 8001966:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL3, &tmp, 1);
 800196a:	4628      	mov	r0, r5
 800196c:	463b      	mov	r3, r7
    tmp = 0x8AU;
 800196e:	f04f 0a8a 	mov.w	sl, #138	@ 0x8a
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL3, &tmp, 1);
 8001972:	f000 fce5 	bl	8002340 <st7735_write_reg>
 8001976:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001978:	463a      	mov	r2, r7
 800197a:	f10d 010f 	add.w	r1, sp, #15
 800197e:	4628      	mov	r0, r5
    tmp = 0x00U;
 8001980:	f88d 800f 	strb.w	r8, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001984:	f000 fce4 	bl	8002350 <st7735_send_data>
 8001988:	4404      	add	r4, r0
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL4, &tmp, 1);
 800198a:	463b      	mov	r3, r7
 800198c:	f10d 020f 	add.w	r2, sp, #15
 8001990:	21c3      	movs	r1, #195	@ 0xc3
 8001992:	4628      	mov	r0, r5
    tmp = 0x8AU;
 8001994:	f88d a00f 	strb.w	sl, [sp, #15]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL4, &tmp, 1);
 8001998:	f000 fcd2 	bl	8002340 <st7735_write_reg>
    tmp = 0x2AU;
 800199c:	232a      	movs	r3, #42	@ 0x2a
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL4, &tmp, 1);
 800199e:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80019a0:	463a      	mov	r2, r7
 80019a2:	f10d 010f 	add.w	r1, sp, #15
 80019a6:	4628      	mov	r0, r5
    tmp = 0x2AU;
 80019a8:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80019ac:	f000 fcd0 	bl	8002350 <st7735_send_data>
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL5, &tmp, 1);
 80019b0:	463b      	mov	r3, r7
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80019b2:	4404      	add	r4, r0
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL5, &tmp, 1);
 80019b4:	f10d 020f 	add.w	r2, sp, #15
 80019b8:	21c4      	movs	r1, #196	@ 0xc4
 80019ba:	4628      	mov	r0, r5
    tmp = 0x8AU;
 80019bc:	f88d a00f 	strb.w	sl, [sp, #15]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL5, &tmp, 1);
 80019c0:	f000 fcbe 	bl	8002340 <st7735_write_reg>
    tmp = 0xEEU;
 80019c4:	23ee      	movs	r3, #238	@ 0xee
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PWR_CTRL5, &tmp, 1);
 80019c6:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80019c8:	463a      	mov	r2, r7
 80019ca:	f10d 010f 	add.w	r1, sp, #15
 80019ce:	4628      	mov	r0, r5
    tmp = 0xEEU;
 80019d0:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80019d4:	f000 fcbc 	bl	8002350 <st7735_send_data>
    tmp = 0x0EU;
 80019d8:	220e      	movs	r2, #14
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 80019da:	4404      	add	r4, r0
    ret += st7735_write_reg(&pObj->Ctx, ST7735_VCOMH_VCOML_CTRL1, &tmp, 1);
 80019dc:	463b      	mov	r3, r7
    tmp = 0x0EU;
 80019de:	f88d 200f 	strb.w	r2, [sp, #15]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_VCOMH_VCOML_CTRL1, &tmp, 1);
 80019e2:	4649      	mov	r1, r9
 80019e4:	f10d 020f 	add.w	r2, sp, #15
 80019e8:	4628      	mov	r0, r5
 80019ea:	f000 fca9 	bl	8002340 <st7735_write_reg>
		if (pDriver->Panel == HannStar_Panel) {
 80019ee:	9b00      	ldr	r3, [sp, #0]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_VCOMH_VCOML_CTRL1, &tmp, 1);
 80019f0:	4404      	add	r4, r0
		if (pDriver->Panel == HannStar_Panel) {
 80019f2:	7b1b      	ldrb	r3, [r3, #12]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f000 8183 	beq.w	8001d00 <ST7735_Init+0x578>
			ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_INVERSION_OFF, &tmp, 0);
 80019fa:	4643      	mov	r3, r8
 80019fc:	f10d 020f 	add.w	r2, sp, #15
 8001a00:	2120      	movs	r1, #32
 8001a02:	4628      	mov	r0, r5
 8001a04:	f000 fc9c 	bl	8002340 <st7735_write_reg>
 8001a08:	4404      	add	r4, r0
    ret += st7735_write_reg(&pObj->Ctx, ST7735_COLOR_MODE, (uint8_t*)&ColorCoding, 1);
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	aa01      	add	r2, sp, #4
 8001a0e:	213a      	movs	r1, #58	@ 0x3a
 8001a10:	4628      	mov	r0, r5
 8001a12:	f000 fc95 	bl	8002340 <st7735_write_reg>
    tmp = 0x02U;
 8001a16:	f04f 0302 	mov.w	r3, #2
    ret += st7735_write_reg(&pObj->Ctx, ST7735_COLOR_MODE, (uint8_t*)&ColorCoding, 1);
 8001a1a:	4404      	add	r4, r0
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PV_GAMMA_CTRL, &tmp, 1);
 8001a1c:	f10d 020f 	add.w	r2, sp, #15
 8001a20:	21e0      	movs	r1, #224	@ 0xe0
    tmp = 0x02U;
 8001a22:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PV_GAMMA_CTRL, &tmp, 1);
 8001a26:	4628      	mov	r0, r5
 8001a28:	2301      	movs	r3, #1
 8001a2a:	f000 fc89 	bl	8002340 <st7735_write_reg>
    tmp = 0x1CU;
 8001a2e:	231c      	movs	r3, #28
    ret += st7735_write_reg(&pObj->Ctx, ST7735_PV_GAMMA_CTRL, &tmp, 1);
 8001a30:	4404      	add	r4, r0
    tmp = 0x07U;
 8001a32:	f04f 0b07 	mov.w	fp, #7
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001a36:	2201      	movs	r2, #1
 8001a38:	f10d 010f 	add.w	r1, sp, #15
 8001a3c:	4628      	mov	r0, r5
    tmp = 0x1CU;
 8001a3e:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001a42:	f000 fc85 	bl	8002350 <st7735_send_data>
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001a46:	2201      	movs	r2, #1
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001a48:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001a4a:	f10d 010f 	add.w	r1, sp, #15
 8001a4e:	4628      	mov	r0, r5
    tmp = 0x07U;
 8001a50:	f88d b00f 	strb.w	fp, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001a54:	f000 fc7c 	bl	8002350 <st7735_send_data>
    tmp = 0x12U;
 8001a58:	2312      	movs	r3, #18
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001a5a:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f10d 010f 	add.w	r1, sp, #15
 8001a62:	4628      	mov	r0, r5
    tmp = 0x12U;
 8001a64:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001a68:	f000 fc72 	bl	8002350 <st7735_send_data>
    tmp = 0x37U;
 8001a6c:	f04f 0237 	mov.w	r2, #55	@ 0x37
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001a70:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001a72:	f10d 010f 	add.w	r1, sp, #15
 8001a76:	4628      	mov	r0, r5
    tmp = 0x37U;
 8001a78:	f88d 200f 	strb.w	r2, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	f000 fc67 	bl	8002350 <st7735_send_data>
    tmp = 0x32U;
 8001a82:	2332      	movs	r3, #50	@ 0x32
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001a84:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001a86:	2201      	movs	r2, #1
 8001a88:	f10d 010f 	add.w	r1, sp, #15
 8001a8c:	4628      	mov	r0, r5
    tmp = 0x32U;
 8001a8e:	f88d 300f 	strb.w	r3, [sp, #15]
    tmp = 0x29U;
 8001a92:	f04f 0829 	mov.w	r8, #41	@ 0x29
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001a96:	f000 fc5b 	bl	8002350 <st7735_send_data>
 8001a9a:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f10d 010f 	add.w	r1, sp, #15
 8001aa2:	4628      	mov	r0, r5
    tmp = 0x29U;
 8001aa4:	f88d 800f 	strb.w	r8, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001aa8:	f000 fc52 	bl	8002350 <st7735_send_data>
    tmp = 0x2DU;
 8001aac:	f04f 012d 	mov.w	r1, #45	@ 0x2d
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001ab0:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001ab2:	f10d 000f 	add.w	r0, sp, #15
 8001ab6:	2201      	movs	r2, #1
    tmp = 0x2DU;
 8001ab8:	f88d 100f 	strb.w	r1, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001abc:	4601      	mov	r1, r0
 8001abe:	4628      	mov	r0, r5
 8001ac0:	f000 fc46 	bl	8002350 <st7735_send_data>
 8001ac4:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001ac6:	f10d 000f 	add.w	r0, sp, #15
 8001aca:	2201      	movs	r2, #1
    tmp = 0x29U;
 8001acc:	f88d 800f 	strb.w	r8, [sp, #15]
    tmp = 0x00U;
 8001ad0:	f04f 0900 	mov.w	r9, #0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001ad4:	4601      	mov	r1, r0
 8001ad6:	4628      	mov	r0, r5
 8001ad8:	f000 fc3a 	bl	8002350 <st7735_send_data>
 8001adc:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001ade:	f10d 000f 	add.w	r0, sp, #15
    tmp = 0x25U;
 8001ae2:	2325      	movs	r3, #37	@ 0x25
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001ae4:	2201      	movs	r2, #1
    tmp = 0x01U;
 8001ae6:	2701      	movs	r7, #1
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001ae8:	4601      	mov	r1, r0
 8001aea:	4628      	mov	r0, r5
    tmp = 0x25U;
 8001aec:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001af0:	f000 fc2e 	bl	8002350 <st7735_send_data>
 8001af4:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001af6:	f10d 000f 	add.w	r0, sp, #15
    tmp = 0x2BU;
 8001afa:	232b      	movs	r3, #43	@ 0x2b
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001afc:	2201      	movs	r2, #1
 8001afe:	4601      	mov	r1, r0
 8001b00:	4628      	mov	r0, r5
    tmp = 0x2BU;
 8001b02:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001b06:	f000 fc23 	bl	8002350 <st7735_send_data>
 8001b0a:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001b0c:	f10d 000f 	add.w	r0, sp, #15
    tmp = 0x39U;
 8001b10:	2339      	movs	r3, #57	@ 0x39
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001b12:	2201      	movs	r2, #1
 8001b14:	4601      	mov	r1, r0
 8001b16:	4628      	mov	r0, r5
    tmp = 0x39U;
 8001b18:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001b1c:	f000 fc18 	bl	8002350 <st7735_send_data>
 8001b20:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001b22:	f10d 000f 	add.w	r0, sp, #15
 8001b26:	2201      	movs	r2, #1
    tmp = 0x00U;
 8001b28:	f88d 900f 	strb.w	r9, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001b2c:	4601      	mov	r1, r0
 8001b2e:	4628      	mov	r0, r5
 8001b30:	f000 fc0e 	bl	8002350 <st7735_send_data>
 8001b34:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001b36:	f10d 000f 	add.w	r0, sp, #15
 8001b3a:	463a      	mov	r2, r7
    tmp = 0x01U;
 8001b3c:	f88d 700f 	strb.w	r7, [sp, #15]
    tmp = 0x10U;
 8001b40:	f04f 0a10 	mov.w	sl, #16
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001b44:	4601      	mov	r1, r0
 8001b46:	4628      	mov	r0, r5
 8001b48:	f000 fc02 	bl	8002350 <st7735_send_data>
 8001b4c:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001b4e:	f10d 000f 	add.w	r0, sp, #15
    tmp = 0x03U;
 8001b52:	2303      	movs	r3, #3
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001b54:	463a      	mov	r2, r7
 8001b56:	4601      	mov	r1, r0
 8001b58:	4628      	mov	r0, r5
    tmp = 0x03U;
 8001b5a:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001b5e:	f000 fbf7 	bl	8002350 <st7735_send_data>
 8001b62:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001b64:	f10d 000f 	add.w	r0, sp, #15
 8001b68:	463a      	mov	r2, r7
    tmp = 0x10U;
 8001b6a:	f88d a00f 	strb.w	sl, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001b6e:	4601      	mov	r1, r0
 8001b70:	4628      	mov	r0, r5
 8001b72:	f000 fbed 	bl	8002350 <st7735_send_data>
    tmp = 0x03U;
 8001b76:	2303      	movs	r3, #3
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001b78:	4404      	add	r4, r0
    ret += st7735_write_reg(&pObj->Ctx, ST7735_NV_GAMMA_CTRL, &tmp, 1);
 8001b7a:	f10d 000f 	add.w	r0, sp, #15
 8001b7e:	21e1      	movs	r1, #225	@ 0xe1
    tmp = 0x03U;
 8001b80:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_NV_GAMMA_CTRL, &tmp, 1);
 8001b84:	4602      	mov	r2, r0
 8001b86:	463b      	mov	r3, r7
 8001b88:	4628      	mov	r0, r5
 8001b8a:	f000 fbd9 	bl	8002340 <st7735_write_reg>
 8001b8e:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001b90:	f10d 000f 	add.w	r0, sp, #15
    tmp = 0x1DU;
 8001b94:	231d      	movs	r3, #29
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001b96:	463a      	mov	r2, r7
 8001b98:	4601      	mov	r1, r0
 8001b9a:	4628      	mov	r0, r5
    tmp = 0x1DU;
 8001b9c:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001ba0:	f000 fbd6 	bl	8002350 <st7735_send_data>
 8001ba4:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001ba6:	f10d 000f 	add.w	r0, sp, #15
 8001baa:	463a      	mov	r2, r7
    tmp = 0x07U;
 8001bac:	f88d b00f 	strb.w	fp, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001bb0:	4601      	mov	r1, r0
 8001bb2:	4628      	mov	r0, r5
 8001bb4:	f000 fbcc 	bl	8002350 <st7735_send_data>
 8001bb8:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001bba:	f10d 000f 	add.w	r0, sp, #15
    tmp = 0x06U;
 8001bbe:	2306      	movs	r3, #6
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001bc0:	463a      	mov	r2, r7
    tmp = 0x2EU;
 8001bc2:	f04f 0b2e 	mov.w	fp, #46	@ 0x2e
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001bc6:	4601      	mov	r1, r0
 8001bc8:	4628      	mov	r0, r5
    tmp = 0x06U;
 8001bca:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001bce:	f000 fbbf 	bl	8002350 <st7735_send_data>
 8001bd2:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001bd4:	f10d 000f 	add.w	r0, sp, #15
 8001bd8:	463a      	mov	r2, r7
    tmp = 0x2EU;
 8001bda:	f88d b00f 	strb.w	fp, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001bde:	4601      	mov	r1, r0
 8001be0:	4628      	mov	r0, r5
 8001be2:	f000 fbb5 	bl	8002350 <st7735_send_data>
 8001be6:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001be8:	f10d 000f 	add.w	r0, sp, #15
    tmp = 0x2CU;
 8001bec:	232c      	movs	r3, #44	@ 0x2c
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001bee:	463a      	mov	r2, r7
 8001bf0:	4601      	mov	r1, r0
 8001bf2:	4628      	mov	r0, r5
    tmp = 0x2CU;
 8001bf4:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001bf8:	f000 fbaa 	bl	8002350 <st7735_send_data>
 8001bfc:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001bfe:	f10d 000f 	add.w	r0, sp, #15
 8001c02:	463a      	mov	r2, r7
    tmp = 0x29U;
 8001c04:	f88d 800f 	strb.w	r8, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c08:	4601      	mov	r1, r0
 8001c0a:	4628      	mov	r0, r5
 8001c0c:	f000 fba0 	bl	8002350 <st7735_send_data>
    tmp = 0x2DU;
 8001c10:	f04f 012d 	mov.w	r1, #45	@ 0x2d
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c14:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c16:	463a      	mov	r2, r7
    tmp = 0x2DU;
 8001c18:	f88d 100f 	strb.w	r1, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c1c:	4628      	mov	r0, r5
 8001c1e:	f10d 010f 	add.w	r1, sp, #15
 8001c22:	f000 fb95 	bl	8002350 <st7735_send_data>
 8001c26:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c28:	463a      	mov	r2, r7
 8001c2a:	f10d 010f 	add.w	r1, sp, #15
 8001c2e:	4628      	mov	r0, r5
    tmp = 0x2EU;
 8001c30:	f88d b00f 	strb.w	fp, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c34:	f000 fb8c 	bl	8002350 <st7735_send_data>
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c38:	463a      	mov	r2, r7
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c3a:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c3c:	f10d 010f 	add.w	r1, sp, #15
 8001c40:	4628      	mov	r0, r5
    tmp = 0x2EU;
 8001c42:	f88d b00f 	strb.w	fp, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c46:	f000 fb83 	bl	8002350 <st7735_send_data>
    tmp = 0x37U;
 8001c4a:	f04f 0237 	mov.w	r2, #55	@ 0x37
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c4e:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c50:	f10d 010f 	add.w	r1, sp, #15
    tmp = 0x37U;
 8001c54:	f88d 200f 	strb.w	r2, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c58:	4628      	mov	r0, r5
 8001c5a:	463a      	mov	r2, r7
 8001c5c:	f000 fb78 	bl	8002350 <st7735_send_data>
    tmp = 0x3FU;
 8001c60:	233f      	movs	r3, #63	@ 0x3f
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c62:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c64:	463a      	mov	r2, r7
 8001c66:	f10d 010f 	add.w	r1, sp, #15
 8001c6a:	4628      	mov	r0, r5
    tmp = 0x3FU;
 8001c6c:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c70:	f000 fb6e 	bl	8002350 <st7735_send_data>
 8001c74:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c76:	463a      	mov	r2, r7
 8001c78:	f10d 010f 	add.w	r1, sp, #15
 8001c7c:	4628      	mov	r0, r5
    tmp = 0x00U;
 8001c7e:	f88d 900f 	strb.w	r9, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c82:	f000 fb65 	bl	8002350 <st7735_send_data>
 8001c86:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c88:	463a      	mov	r2, r7
 8001c8a:	f10d 010f 	add.w	r1, sp, #15
 8001c8e:	4628      	mov	r0, r5
    tmp = 0x00U;
 8001c90:	f88d 900f 	strb.w	r9, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c94:	f000 fb5c 	bl	8002350 <st7735_send_data>
    tmp = 0x02U;
 8001c98:	f04f 0302 	mov.w	r3, #2
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c9c:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001c9e:	463a      	mov	r2, r7
 8001ca0:	f10d 010f 	add.w	r1, sp, #15
 8001ca4:	4628      	mov	r0, r5
    tmp = 0x02U;
 8001ca6:	f88d 300f 	strb.w	r3, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001caa:	f000 fb51 	bl	8002350 <st7735_send_data>
 8001cae:	4404      	add	r4, r0
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001cb0:	463a      	mov	r2, r7
 8001cb2:	f10d 010f 	add.w	r1, sp, #15
 8001cb6:	4628      	mov	r0, r5
    tmp = 0x10U;
 8001cb8:	f88d a00f 	strb.w	sl, [sp, #15]
    ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001cbc:	f000 fb48 	bl	8002350 <st7735_send_data>
 8001cc0:	4404      	add	r4, r0
    ret += st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 1);
 8001cc2:	463b      	mov	r3, r7
 8001cc4:	f10d 020f 	add.w	r2, sp, #15
 8001cc8:	2113      	movs	r1, #19
 8001cca:	4628      	mov	r0, r5
    tmp  = 0x00U;
 8001ccc:	f88d 900f 	strb.w	r9, [sp, #15]
    ret += st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 1);
 8001cd0:	f000 fb36 	bl	8002340 <st7735_write_reg>
    ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_ON, &tmp, 1);
 8001cd4:	463b      	mov	r3, r7
    ret += st7735_write_reg(&pObj->Ctx, ST7735_NORMAL_DISPLAY_OFF, &tmp, 1);
 8001cd6:	4404      	add	r4, r0
    ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_ON, &tmp, 1);
 8001cd8:	f10d 020f 	add.w	r2, sp, #15
 8001cdc:	4641      	mov	r1, r8
 8001cde:	4628      	mov	r0, r5
 8001ce0:	f000 fb2e 	bl	8002340 <st7735_write_reg>
 8001ce4:	4603      	mov	r3, r0
    ret += ST7735_SetOrientation(pObj, pDriver);
 8001ce6:	9900      	ldr	r1, [sp, #0]
 8001ce8:	4630      	mov	r0, r6
    ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_ON, &tmp, 1);
 8001cea:	441c      	add	r4, r3
    ret += ST7735_SetOrientation(pObj, pDriver);
 8001cec:	f7ff fcd8 	bl	80016a0 <ST7735_SetOrientation>
  if(ret != ST7735_OK)
 8001cf0:	42c4      	cmn	r4, r0
 8001cf2:	bf14      	ite	ne
 8001cf4:	f04f 30ff 	movne.w	r0, #4294967295
 8001cf8:	4648      	moveq	r0, r9
}
 8001cfa:	b005      	add	sp, #20
 8001cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret += st7735_write_reg(&pObj->Ctx, ST7735_DISPLAY_INVERSION_ON, &tmp, 0);
 8001d00:	f10d 020f 	add.w	r2, sp, #15
 8001d04:	2121      	movs	r1, #33	@ 0x21
 8001d06:	4628      	mov	r0, r5
 8001d08:	f000 fb1a 	bl	8002340 <st7735_write_reg>
 8001d0c:	4404      	add	r4, r0
 8001d0e:	e67c      	b.n	8001a0a <ST7735_Init+0x282>
    ret = ST7735_ERROR;
 8001d10:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8001d14:	e7f1      	b.n	8001cfa <ST7735_Init+0x572>
 8001d16:	bf00      	nop

08001d18 <ST7735_SetCursor>:
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {		//0.96 ST7735
 8001d18:	4b38      	ldr	r3, [pc, #224]	@ (8001dfc <ST7735_SetCursor+0xe4>)
{
 8001d1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d1c:	4616      	mov	r6, r2
	if(ST7735Ctx.Orientation <= ST7735_ORIENTATION_PORTRAIT_ROT180) {
 8001d1e:	689a      	ldr	r2, [r3, #8]
{
 8001d20:	b083      	sub	sp, #12
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {		//0.96 ST7735
 8001d22:	7b5c      	ldrb	r4, [r3, #13]
	if(ST7735Ctx.Orientation <= ST7735_ORIENTATION_PORTRAIT_ROT180) {
 8001d24:	2a01      	cmp	r2, #1
{
 8001d26:	460f      	mov	r7, r1
	if(ST7735Ctx.Orientation <= ST7735_ORIENTATION_PORTRAIT_ROT180) {
 8001d28:	d94f      	bls.n	8001dca <ST7735_SetCursor+0xb2>
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {
 8001d2a:	2c01      	cmp	r4, #1
 8001d2c:	d048      	beq.n	8001dc0 <ST7735_SetCursor+0xa8>
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 8001d2e:	2c02      	cmp	r4, #2
 8001d30:	d05c      	beq.n	8001dec <ST7735_SetCursor+0xd4>
  ret = st7735_write_reg(&pObj->Ctx, ST7735_CASET, &tmp, 0);
 8001d32:	f100 0520 	add.w	r5, r0, #32
 8001d36:	f10d 0207 	add.w	r2, sp, #7
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	212a      	movs	r1, #42	@ 0x2a
 8001d3e:	4628      	mov	r0, r5
 8001d40:	f000 fafe 	bl	8002340 <st7735_write_reg>
 8001d44:	4604      	mov	r4, r0
  tmp = (uint8_t)(Xpos >> 8U);
 8001d46:	0a3b      	lsrs	r3, r7, #8
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001d48:	f10d 0107 	add.w	r1, sp, #7
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	4628      	mov	r0, r5
  tmp = (uint8_t)(Xpos >> 8U);
 8001d50:	f88d 3007 	strb.w	r3, [sp, #7]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001d54:	f000 fafc 	bl	8002350 <st7735_send_data>
 8001d58:	4404      	add	r4, r0
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001d5a:	f10d 0107 	add.w	r1, sp, #7
 8001d5e:	2201      	movs	r2, #1
 8001d60:	4628      	mov	r0, r5
  tmp = (uint8_t)(Xpos & 0xFFU);
 8001d62:	f88d 7007 	strb.w	r7, [sp, #7]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001d66:	f000 faf3 	bl	8002350 <st7735_send_data>
 8001d6a:	4404      	add	r4, r0
  ret += st7735_write_reg(&pObj->Ctx, ST7735_RASET, &tmp, 0);
 8001d6c:	f10d 0207 	add.w	r2, sp, #7
 8001d70:	2300      	movs	r3, #0
 8001d72:	212b      	movs	r1, #43	@ 0x2b
 8001d74:	4628      	mov	r0, r5
 8001d76:	f000 fae3 	bl	8002340 <st7735_write_reg>
 8001d7a:	4404      	add	r4, r0
  tmp = (uint8_t)(Ypos >> 8U);
 8001d7c:	0a33      	lsrs	r3, r6, #8
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001d7e:	f10d 0107 	add.w	r1, sp, #7
 8001d82:	2201      	movs	r2, #1
 8001d84:	4628      	mov	r0, r5
  tmp = (uint8_t)(Ypos >> 8U);
 8001d86:	f88d 3007 	strb.w	r3, [sp, #7]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001d8a:	f000 fae1 	bl	8002350 <st7735_send_data>
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001d8e:	f10d 0107 	add.w	r1, sp, #7
 8001d92:	2201      	movs	r2, #1
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001d94:	4404      	add	r4, r0
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001d96:	4628      	mov	r0, r5
  tmp = (uint8_t)(Ypos & 0xFFU);
 8001d98:	f88d 6007 	strb.w	r6, [sp, #7]
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001d9c:	f000 fad8 	bl	8002350 <st7735_send_data>
 8001da0:	4601      	mov	r1, r0
  ret += st7735_write_reg(&pObj->Ctx, ST7735_WRITE_RAM, &tmp, 0);
 8001da2:	2300      	movs	r3, #0
 8001da4:	f10d 0207 	add.w	r2, sp, #7
 8001da8:	4628      	mov	r0, r5
  ret += st7735_send_data(&pObj->Ctx, &tmp, 1);
 8001daa:	440c      	add	r4, r1
  ret += st7735_write_reg(&pObj->Ctx, ST7735_WRITE_RAM, &tmp, 0);
 8001dac:	212c      	movs	r1, #44	@ 0x2c
 8001dae:	f000 fac7 	bl	8002340 <st7735_write_reg>
  if(ret != ST7735_OK)
 8001db2:	42c4      	cmn	r4, r0
}
 8001db4:	bf14      	ite	ne
 8001db6:	f04f 30ff 	movne.w	r0, #4294967295
 8001dba:	2000      	moveq	r0, #0
 8001dbc:	b003      	add	sp, #12
 8001dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (ST7735Ctx.Panel == HannStar_Panel) {		//0.96 ST7735
 8001dc0:	7b1b      	ldrb	r3, [r3, #12]
 8001dc2:	b963      	cbnz	r3, 8001dde <ST7735_SetCursor+0xc6>
				Xpos += 1;
 8001dc4:	3701      	adds	r7, #1
				Ypos += 26;
 8001dc6:	361a      	adds	r6, #26
 8001dc8:	e7b3      	b.n	8001d32 <ST7735_SetCursor+0x1a>
		if (ST7735Ctx.Type == ST7735_0_9_inch_screen) {		//0.96 ST7735
 8001dca:	2c01      	cmp	r4, #1
 8001dcc:	d009      	beq.n	8001de2 <ST7735_SetCursor+0xca>
    else if(ST7735Ctx.Type == ST7735_1_8a_inch_screen){
 8001dce:	2c02      	cmp	r4, #2
 8001dd0:	d1af      	bne.n	8001d32 <ST7735_SetCursor+0x1a>
      if (ST7735Ctx.Panel == BOE_Panel) {
 8001dd2:	7b1b      	ldrb	r3, [r3, #12]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d1ac      	bne.n	8001d32 <ST7735_SetCursor+0x1a>
				Xpos += 2;
 8001dd8:	3702      	adds	r7, #2
				Ypos += 1;
 8001dda:	3601      	adds	r6, #1
 8001ddc:	e7a9      	b.n	8001d32 <ST7735_SetCursor+0x1a>
				Ypos += 24;
 8001dde:	3618      	adds	r6, #24
 8001de0:	e7a7      	b.n	8001d32 <ST7735_SetCursor+0x1a>
			if (ST7735Ctx.Panel == HannStar_Panel) {
 8001de2:	7b1b      	ldrb	r3, [r3, #12]
 8001de4:	b943      	cbnz	r3, 8001df8 <ST7735_SetCursor+0xe0>
				Xpos += 26;
 8001de6:	371a      	adds	r7, #26
				Ypos += 1;
 8001de8:	3601      	adds	r6, #1
 8001dea:	e7a2      	b.n	8001d32 <ST7735_SetCursor+0x1a>
      if (ST7735Ctx.Panel == BOE_Panel) {
 8001dec:	7b1b      	ldrb	r3, [r3, #12]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d19f      	bne.n	8001d32 <ST7735_SetCursor+0x1a>
				Xpos += 1;
 8001df2:	3701      	adds	r7, #1
				Ypos += 2;
 8001df4:	3602      	adds	r6, #2
 8001df6:	e79c      	b.n	8001d32 <ST7735_SetCursor+0x1a>
				Xpos += 24;
 8001df8:	3718      	adds	r7, #24
				Ypos += 0;
 8001dfa:	e79a      	b.n	8001d32 <ST7735_SetCursor+0x1a>
 8001dfc:	240007b0 	.word	0x240007b0

08001e00 <ST7735_DrawBitmap>:
{
 8001e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  y_pos = ST7735Ctx.Height - Ypos - height;
 8001e04:	f8df 90fc 	ldr.w	r9, [pc, #252]	@ 8001f04 <ST7735_DrawBitmap+0x104>
{
 8001e08:	b085      	sub	sp, #20
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8001e0a:	f8d3 4016 	ldr.w	r4, [r3, #22]
{
 8001e0e:	4682      	mov	sl, r0
 8001e10:	460f      	mov	r7, r1
  if(ST7735_SetDisplayWindow(pObj, Xpos, y_pos, width, height) != ST7735_OK)
 8001e12:	9400      	str	r4, [sp, #0]
  y_pos = ST7735Ctx.Height - Ypos - height;
 8001e14:	f8d9 5004 	ldr.w	r5, [r9, #4]
  size = (uint32_t)pBmp[2] + ((uint32_t)pBmp[3] << 8) + ((uint32_t)pBmp[4] << 16)  + ((uint32_t)pBmp[5] << 24);
 8001e18:	f8d3 8002 	ldr.w	r8, [r3, #2]
  y_pos = ST7735Ctx.Height - Ypos - height;
 8001e1c:	1aad      	subs	r5, r5, r2
 8001e1e:	1b2d      	subs	r5, r5, r4
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8001e20:	f8d3 400a 	ldr.w	r4, [r3, #10]
  if(ST7735_SetDisplayWindow(pObj, Xpos, y_pos, width, height) != ST7735_OK)
 8001e24:	462a      	mov	r2, r5
  size = size - index;
 8001e26:	eba8 0804 	sub.w	r8, r8, r4
  pbmp = pBmp + index;
 8001e2a:	441c      	add	r4, r3
  if(ST7735_SetDisplayWindow(pObj, Xpos, y_pos, width, height) != ST7735_OK)
 8001e2c:	f8d3 3012 	ldr.w	r3, [r3, #18]
 8001e30:	f7ff fb90 	bl	8001554 <ST7735_SetDisplayWindow>
 8001e34:	2800      	cmp	r0, #0
 8001e36:	d15e      	bne.n	8001ef6 <ST7735_DrawBitmap+0xf6>
					(uint8_t)OrientationTab[ST7735Ctx.Orientation][0] | LCD_BGR :
 8001e38:	f8df b0cc 	ldr.w	fp, [pc, #204]	@ 8001f08 <ST7735_DrawBitmap+0x108>
 8001e3c:	f8d9 3008 	ldr.w	r3, [r9, #8]
    tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8001e40:	f899 200c 	ldrb.w	r2, [r9, #12]
					(uint8_t)OrientationTab[ST7735Ctx.Orientation][0] | LCD_BGR :
 8001e44:	f81b 3033 	ldrb.w	r3, [fp, r3, lsl #3]
    tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8001e48:	2a00      	cmp	r2, #0
 8001e4a:	d04e      	beq.n	8001eea <ST7735_DrawBitmap+0xea>
    if(st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1) != ST7735_OK)
 8001e4c:	f10a 0620 	add.w	r6, sl, #32
    tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8001e50:	f88d 300b 	strb.w	r3, [sp, #11]
    if(st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1) != ST7735_OK)
 8001e54:	2136      	movs	r1, #54	@ 0x36
 8001e56:	2301      	movs	r3, #1
 8001e58:	4630      	mov	r0, r6
 8001e5a:	f10d 020b 	add.w	r2, sp, #11
 8001e5e:	f000 fa6f 	bl	8002340 <st7735_write_reg>
 8001e62:	2800      	cmp	r0, #0
 8001e64:	d147      	bne.n	8001ef6 <ST7735_DrawBitmap+0xf6>
    else if(ST7735_SetCursor(pObj, Xpos, y_pos) != ST7735_OK)
 8001e66:	462a      	mov	r2, r5
 8001e68:	4639      	mov	r1, r7
 8001e6a:	4650      	mov	r0, sl
 8001e6c:	f7ff ff54 	bl	8001d18 <ST7735_SetCursor>
 8001e70:	2800      	cmp	r0, #0
 8001e72:	d140      	bne.n	8001ef6 <ST7735_DrawBitmap+0xf6>
      }while(counter < size);
 8001e74:	f06f 0701 	mvn.w	r7, #1
 8001e78:	1b3f      	subs	r7, r7, r4
 8001e7a:	3402      	adds	r4, #2
 8001e7c:	e001      	b.n	8001e82 <ST7735_DrawBitmap+0x82>
 8001e7e:	4598      	cmp	r8, r3
 8001e80:	d913      	bls.n	8001eaa <ST7735_DrawBitmap+0xaa>
        pixel_val[0] = *(pbmp + 1);
 8001e82:	f814 5c01 	ldrb.w	r5, [r4, #-1]
      }while(counter < size);
 8001e86:	3402      	adds	r4, #2
        pixel_val[1] = *(pbmp);
 8001e88:	f814 3c04 	ldrb.w	r3, [r4, #-4]
        if(st7735_send_data(&pObj->Ctx, pixel_val, 2U) != ST7735_OK)
 8001e8c:	2202      	movs	r2, #2
 8001e8e:	a903      	add	r1, sp, #12
 8001e90:	4630      	mov	r0, r6
        pixel_val[0] = *(pbmp + 1);
 8001e92:	f88d 500c 	strb.w	r5, [sp, #12]
        pixel_val[1] = *(pbmp);
 8001e96:	f88d 300d 	strb.w	r3, [sp, #13]
        if(st7735_send_data(&pObj->Ctx, pixel_val, 2U) != ST7735_OK)
 8001e9a:	f000 fa59 	bl	8002350 <st7735_send_data>
      }while(counter < size);
 8001e9e:	193b      	adds	r3, r7, r4
        if(st7735_send_data(&pObj->Ctx, pixel_val, 2U) != ST7735_OK)
 8001ea0:	4605      	mov	r5, r0
 8001ea2:	2800      	cmp	r0, #0
 8001ea4:	d0eb      	beq.n	8001e7e <ST7735_DrawBitmap+0x7e>
          ret = ST7735_ERROR;
 8001ea6:	f04f 35ff 	mov.w	r5, #4294967295
						(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 8001eaa:	f8d9 3008 	ldr.w	r3, [r9, #8]
			tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8001eae:	f899 200c 	ldrb.w	r2, [r9, #12]
						(uint8_t)OrientationTab[ST7735Ctx.Orientation][1] | LCD_BGR :
 8001eb2:	eb0b 0bc3 	add.w	fp, fp, r3, lsl #3
 8001eb6:	f89b 3004 	ldrb.w	r3, [fp, #4]
			tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8001eba:	b1ca      	cbz	r2, 8001ef0 <ST7735_DrawBitmap+0xf0>
      if(st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1) != ST7735_OK)
 8001ebc:	f10d 020b 	add.w	r2, sp, #11
			tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8001ec0:	f88d 300b 	strb.w	r3, [sp, #11]
      if(st7735_write_reg(&pObj->Ctx, ST7735_MADCTL, &tmp, 1) != ST7735_OK)
 8001ec4:	4630      	mov	r0, r6
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	2136      	movs	r1, #54	@ 0x36
 8001eca:	f000 fa39 	bl	8002340 <st7735_write_reg>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	b988      	cbnz	r0, 8001ef6 <ST7735_DrawBitmap+0xf6>
        if(ST7735_SetDisplayWindow(pObj, 0U, 0U, ST7735Ctx.Width, ST7735Ctx.Height) != ST7735_OK)
 8001ed2:	4650      	mov	r0, sl
 8001ed4:	e9d9 3100 	ldrd	r3, r1, [r9]
 8001ed8:	9100      	str	r1, [sp, #0]
 8001eda:	4611      	mov	r1, r2
 8001edc:	f7ff fb3a 	bl	8001554 <ST7735_SetDisplayWindow>
 8001ee0:	b948      	cbnz	r0, 8001ef6 <ST7735_DrawBitmap+0xf6>
}
 8001ee2:	4628      	mov	r0, r5
 8001ee4:	b005      	add	sp, #20
 8001ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8001eea:	f043 0308 	orr.w	r3, r3, #8
 8001eee:	e7ad      	b.n	8001e4c <ST7735_DrawBitmap+0x4c>
			tmp = ST7735Ctx.Panel == HannStar_Panel ? 
 8001ef0:	f043 0308 	orr.w	r3, r3, #8
 8001ef4:	e7e2      	b.n	8001ebc <ST7735_DrawBitmap+0xbc>
    ret = ST7735_ERROR;
 8001ef6:	f04f 35ff 	mov.w	r5, #4294967295
}
 8001efa:	4628      	mov	r0, r5
 8001efc:	b005      	add	sp, #20
 8001efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f02:	bf00      	nop
 8001f04:	240007b0 	.word	0x240007b0
 8001f08:	080108a0 	.word	0x080108a0

08001f0c <ST7735_DrawHLine>:
{
 8001f0c:	b570      	push	{r4, r5, r6, lr}
  if((Xpos + Length) > ST7735Ctx.Width)
 8001f0e:	4e1e      	ldr	r6, [pc, #120]	@ (8001f88 <ST7735_DrawHLine+0x7c>)
{
 8001f10:	461c      	mov	r4, r3
  if((Xpos + Length) > ST7735Ctx.Width)
 8001f12:	18cb      	adds	r3, r1, r3
 8001f14:	6836      	ldr	r6, [r6, #0]
 8001f16:	42b3      	cmp	r3, r6
 8001f18:	d832      	bhi.n	8001f80 <ST7735_DrawHLine+0x74>
  else if(ST7735_SetCursor(pObj, Xpos, Ypos) != ST7735_OK)
 8001f1a:	4605      	mov	r5, r0
 8001f1c:	f7ff fefc 	bl	8001d18 <ST7735_SetCursor>
 8001f20:	4602      	mov	r2, r0
 8001f22:	bb68      	cbnz	r0, 8001f80 <ST7735_DrawHLine+0x74>
    for(i = 0; i < Length; i++)
 8001f24:	b1fc      	cbz	r4, 8001f66 <ST7735_DrawHLine+0x5a>
      pdata[2U*i] = (uint8_t)(Color >> 8);
 8001f26:	9b04      	ldr	r3, [sp, #16]
 8001f28:	2c01      	cmp	r4, #1
 8001f2a:	f3c3 2e07 	ubfx	lr, r3, #8, #8
      pdata[(2U*i) + 1U] = (uint8_t)(Color);
 8001f2e:	b2d8      	uxtb	r0, r3
 8001f30:	d024      	beq.n	8001f7c <ST7735_DrawHLine+0x70>
 8001f32:	f36e 0207 	bfi	r2, lr, #0, #8
 8001f36:	4915      	ldr	r1, [pc, #84]	@ (8001f8c <ST7735_DrawHLine+0x80>)
 8001f38:	0863      	lsrs	r3, r4, #1
 8001f3a:	f360 220f 	bfi	r2, r0, #8, #8
 8001f3e:	468c      	mov	ip, r1
 8001f40:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8001f44:	f36e 4217 	bfi	r2, lr, #16, #8
 8001f48:	f360 621f 	bfi	r2, r0, #24, #8
      pdata[2U*i] = (uint8_t)(Color >> 8);
 8001f4c:	f84c 2b04 	str.w	r2, [ip], #4
    for(i = 0; i < Length; i++)
 8001f50:	459c      	cmp	ip, r3
 8001f52:	d1fb      	bne.n	8001f4c <ST7735_DrawHLine+0x40>
 8001f54:	07e3      	lsls	r3, r4, #31
 8001f56:	d506      	bpl.n	8001f66 <ST7735_DrawHLine+0x5a>
 8001f58:	f024 0201 	bic.w	r2, r4, #1
      pdata[(2U*i) + 1U] = (uint8_t)(Color);
 8001f5c:	eb01 0342 	add.w	r3, r1, r2, lsl #1
      pdata[2U*i] = (uint8_t)(Color >> 8);
 8001f60:	f801 e012 	strb.w	lr, [r1, r2, lsl #1]
      pdata[(2U*i) + 1U] = (uint8_t)(Color);
 8001f64:	7058      	strb	r0, [r3, #1]
    if(st7735_send_data(&pObj->Ctx, (uint8_t*)&pdata[0], 2U*Length) != ST7735_OK)
 8001f66:	0062      	lsls	r2, r4, #1
 8001f68:	4908      	ldr	r1, [pc, #32]	@ (8001f8c <ST7735_DrawHLine+0x80>)
 8001f6a:	f105 0020 	add.w	r0, r5, #32
 8001f6e:	f000 f9ef 	bl	8002350 <st7735_send_data>
 8001f72:	3800      	subs	r0, #0
 8001f74:	bf18      	it	ne
 8001f76:	2001      	movne	r0, #1
 8001f78:	4240      	negs	r0, r0
}
 8001f7a:	bd70      	pop	{r4, r5, r6, pc}
 8001f7c:	4903      	ldr	r1, [pc, #12]	@ (8001f8c <ST7735_DrawHLine+0x80>)
 8001f7e:	e7ed      	b.n	8001f5c <ST7735_DrawHLine+0x50>
    ret = ST7735_ERROR;
 8001f80:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001f84:	bd70      	pop	{r4, r5, r6, pc}
 8001f86:	bf00      	nop
 8001f88:	240007b0 	.word	0x240007b0
 8001f8c:	240002ac 	.word	0x240002ac

08001f90 <ST7735_SetPixel>:
{
 8001f90:	b570      	push	{r4, r5, r6, lr}
  if((Xpos >= ST7735Ctx.Width) || (Ypos >= ST7735Ctx.Height))
 8001f92:	4c11      	ldr	r4, [pc, #68]	@ (8001fd8 <ST7735_SetPixel+0x48>)
  color |= (uint16_t)((uint16_t)(Color >> 8));
 8001f94:	ea4f 2c13 	mov.w	ip, r3, lsr #8
{
 8001f98:	b082      	sub	sp, #8
  if((Xpos >= ST7735Ctx.Width) || (Ypos >= ST7735Ctx.Height))
 8001f9a:	6826      	ldr	r6, [r4, #0]
  color |= (uint16_t)((uint16_t)(Color >> 8));
 8001f9c:	ea4c 2c03 	orr.w	ip, ip, r3, lsl #8
  if((Xpos >= ST7735Ctx.Width) || (Ypos >= ST7735Ctx.Height))
 8001fa0:	428e      	cmp	r6, r1
  color |= (uint16_t)((uint16_t)(Color >> 8));
 8001fa2:	f8ad c006 	strh.w	ip, [sp, #6]
  if((Xpos >= ST7735Ctx.Width) || (Ypos >= ST7735Ctx.Height))
 8001fa6:	d913      	bls.n	8001fd0 <ST7735_SetPixel+0x40>
 8001fa8:	6864      	ldr	r4, [r4, #4]
 8001faa:	4294      	cmp	r4, r2
 8001fac:	d910      	bls.n	8001fd0 <ST7735_SetPixel+0x40>
  else if(ST7735_SetCursor(pObj, Xpos, Ypos) != ST7735_OK)
 8001fae:	4605      	mov	r5, r0
 8001fb0:	f7ff feb2 	bl	8001d18 <ST7735_SetCursor>
 8001fb4:	b960      	cbnz	r0, 8001fd0 <ST7735_SetPixel+0x40>
    if(st7735_send_data(&pObj->Ctx, (uint8_t*)&color, 2) != ST7735_OK)
 8001fb6:	2202      	movs	r2, #2
 8001fb8:	f10d 0106 	add.w	r1, sp, #6
 8001fbc:	f105 0020 	add.w	r0, r5, #32
 8001fc0:	f000 f9c6 	bl	8002350 <st7735_send_data>
 8001fc4:	3800      	subs	r0, #0
 8001fc6:	bf18      	it	ne
 8001fc8:	2001      	movne	r0, #1
 8001fca:	4240      	negs	r0, r0
}
 8001fcc:	b002      	add	sp, #8
 8001fce:	bd70      	pop	{r4, r5, r6, pc}
    ret = ST7735_ERROR;
 8001fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd4:	e7fa      	b.n	8001fcc <ST7735_SetPixel+0x3c>
 8001fd6:	bf00      	nop
 8001fd8:	240007b0 	.word	0x240007b0

08001fdc <ST7735_ReadID>:
{
 8001fdc:	b530      	push	{r4, r5, lr}
  if(st7735_read_reg(&pObj->Ctx, ST7735_READ_ID1, &tmp[0]) != ST7735_OK)
 8001fde:	f100 0420 	add.w	r4, r0, #32
{
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	460d      	mov	r5, r1
  if(st7735_read_reg(&pObj->Ctx, ST7735_READ_ID1, &tmp[0]) != ST7735_OK)
 8001fe6:	21da      	movs	r1, #218	@ 0xda
 8001fe8:	aa01      	add	r2, sp, #4
 8001fea:	4620      	mov	r0, r4
 8001fec:	f000 f9a4 	bl	8002338 <st7735_read_reg>
 8001ff0:	b9d0      	cbnz	r0, 8002028 <ST7735_ReadID+0x4c>
  else if(st7735_read_reg(&pObj->Ctx, ST7735_READ_ID2, &tmp[1]) != ST7735_OK)
 8001ff2:	f10d 0205 	add.w	r2, sp, #5
 8001ff6:	21db      	movs	r1, #219	@ 0xdb
 8001ff8:	4620      	mov	r0, r4
 8001ffa:	f000 f99d 	bl	8002338 <st7735_read_reg>
 8001ffe:	b998      	cbnz	r0, 8002028 <ST7735_ReadID+0x4c>
	else if(st7735_read_reg(&pObj->Ctx, ST7735_READ_ID3, &tmp[2]) != ST7735_OK)
 8002000:	f10d 0206 	add.w	r2, sp, #6
 8002004:	21dc      	movs	r1, #220	@ 0xdc
 8002006:	4620      	mov	r0, r4
 8002008:	f000 f996 	bl	8002338 <st7735_read_reg>
 800200c:	b960      	cbnz	r0, 8002028 <ST7735_ReadID+0x4c>
    *Id = ((uint32_t)tmp[2])<<0| ((uint32_t)tmp[1])<<8 | ((uint32_t)tmp[0])<<16;
 800200e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002012:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8002016:	041b      	lsls	r3, r3, #16
 8002018:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800201c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002020:	4313      	orrs	r3, r2
 8002022:	602b      	str	r3, [r5, #0]
}
 8002024:	b003      	add	sp, #12
 8002026:	bd30      	pop	{r4, r5, pc}
    ret = ST7735_ERROR;
 8002028:	f04f 30ff 	mov.w	r0, #4294967295
 800202c:	e7fa      	b.n	8002024 <ST7735_ReadID+0x48>
 800202e:	bf00      	nop

08002030 <ST7735_GetPixel>:
{
 8002030:	b570      	push	{r4, r5, r6, lr}
 8002032:	4605      	mov	r5, r0
 8002034:	b082      	sub	sp, #8
 8002036:	461e      	mov	r6, r3
  ret = ST7735_SetCursor(pObj, Xpos, Ypos);
 8002038:	f7ff fe6e 	bl	8001d18 <ST7735_SetCursor>
  ret += st7735_read_reg(&pObj->Ctx, ST7735_READ_RAM, &tmp);   /* RAM read data command */
 800203c:	3520      	adds	r5, #32
  ret = ST7735_SetCursor(pObj, Xpos, Ypos);
 800203e:	4604      	mov	r4, r0
  ret += st7735_read_reg(&pObj->Ctx, ST7735_READ_RAM, &tmp);   /* RAM read data command */
 8002040:	f10d 0207 	add.w	r2, sp, #7
 8002044:	212e      	movs	r1, #46	@ 0x2e
 8002046:	4628      	mov	r0, r5
 8002048:	f000 f976 	bl	8002338 <st7735_read_reg>
 800204c:	4404      	add	r4, r0
  ret += st7735_recv_data(&pObj->Ctx, &tmp, 1);
 800204e:	f10d 0107 	add.w	r1, sp, #7
 8002052:	2201      	movs	r2, #1
 8002054:	4628      	mov	r0, r5
 8002056:	f000 f97f 	bl	8002358 <st7735_recv_data>
  ret += st7735_recv_data(&pObj->Ctx, &pixel_lsb, 1);
 800205a:	f10d 0105 	add.w	r1, sp, #5
 800205e:	2201      	movs	r2, #1
  ret += st7735_recv_data(&pObj->Ctx, &tmp, 1);
 8002060:	4404      	add	r4, r0
  ret += st7735_recv_data(&pObj->Ctx, &pixel_lsb, 1);
 8002062:	4628      	mov	r0, r5
 8002064:	f000 f978 	bl	8002358 <st7735_recv_data>
 8002068:	4603      	mov	r3, r0
  ret += st7735_recv_data(&pObj->Ctx, &pixel_msb, 1);
 800206a:	2201      	movs	r2, #1
 800206c:	4628      	mov	r0, r5
  ret += st7735_recv_data(&pObj->Ctx, &pixel_lsb, 1);
 800206e:	441c      	add	r4, r3
  ret += st7735_recv_data(&pObj->Ctx, &pixel_msb, 1);
 8002070:	f10d 0106 	add.w	r1, sp, #6
 8002074:	f000 f970 	bl	8002358 <st7735_recv_data>
  *Color = ((uint32_t)(pixel_lsb)) + ((uint32_t)(pixel_msb) << 8);
 8002078:	f89d 2006 	ldrb.w	r2, [sp, #6]
  if(ret != ST7735_OK)
 800207c:	42c4      	cmn	r4, r0
  *Color = ((uint32_t)(pixel_lsb)) + ((uint32_t)(pixel_msb) << 8);
 800207e:	f89d 3005 	ldrb.w	r3, [sp, #5]
}
 8002082:	bf18      	it	ne
 8002084:	f04f 30ff 	movne.w	r0, #4294967295
  *Color = ((uint32_t)(pixel_lsb)) + ((uint32_t)(pixel_msb) << 8);
 8002088:	eb03 2302 	add.w	r3, r3, r2, lsl #8
}
 800208c:	bf08      	it	eq
 800208e:	2000      	moveq	r0, #0
  *Color = ((uint32_t)(pixel_lsb)) + ((uint32_t)(pixel_msb) << 8);
 8002090:	6033      	str	r3, [r6, #0]
}
 8002092:	b002      	add	sp, #8
 8002094:	bd70      	pop	{r4, r5, r6, pc}
 8002096:	bf00      	nop

08002098 <ST7735_FillRGBRect>:
{
 8002098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800209c:	b085      	sub	sp, #20
 800209e:	468b      	mov	fp, r1
 80020a0:	4614      	mov	r4, r2
  if(((Xpos + Width) > ST7735Ctx.Width) || ((Ypos + Height) > ST7735Ctx.Height))
 80020a2:	4a3d      	ldr	r2, [pc, #244]	@ (8002198 <ST7735_FillRGBRect+0x100>)
{
 80020a4:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 80020a6:	4601      	mov	r1, r0
  if(((Xpos + Width) > ST7735Ctx.Width) || ((Ypos + Height) > ST7735Ctx.Height))
 80020a8:	6810      	ldr	r0, [r2, #0]
{
 80020aa:	461d      	mov	r5, r3
  if(((Xpos + Width) > ST7735Ctx.Width) || ((Ypos + Height) > ST7735Ctx.Height))
 80020ac:	eb0b 0706 	add.w	r7, fp, r6
{
 80020b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
  if(((Xpos + Width) > ST7735Ctx.Width) || ((Ypos + Height) > ST7735Ctx.Height))
 80020b2:	4287      	cmp	r7, r0
 80020b4:	d86c      	bhi.n	8002190 <ST7735_FillRGBRect+0xf8>
 80020b6:	6852      	ldr	r2, [r2, #4]
 80020b8:	eb04 0903 	add.w	r9, r4, r3
 80020bc:	4591      	cmp	r9, r2
 80020be:	d867      	bhi.n	8002190 <ST7735_FillRGBRect+0xf8>
    for(j = 0; j < Height; j++)
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d060      	beq.n	8002186 <ST7735_FillRGBRect+0xee>
        if(st7735_send_data(&pObj->Ctx, (uint8_t*)&pdata[0], 2U*Width) != ST7735_OK)
 80020c4:	0073      	lsls	r3, r6, #1
 80020c6:	4f35      	ldr	r7, [pc, #212]	@ (800219c <ST7735_FillRGBRect+0x104>)
  int32_t ret = ST7735_OK;
 80020c8:	f04f 0a00 	mov.w	sl, #0
 80020cc:	9100      	str	r1, [sp, #0]
        if(st7735_send_data(&pObj->Ctx, (uint8_t*)&pdata[0], 2U*Width) != ST7735_OK)
 80020ce:	9301      	str	r3, [sp, #4]
 80020d0:	1e73      	subs	r3, r6, #1
 80020d2:	f107 0801 	add.w	r8, r7, #1
 80020d6:	9303      	str	r3, [sp, #12]
 80020d8:	f101 0320 	add.w	r3, r1, #32
 80020dc:	9302      	str	r3, [sp, #8]
 80020de:	e004      	b.n	80020ea <ST7735_FillRGBRect+0x52>
    for(j = 0; j < Height; j++)
 80020e0:	3401      	adds	r4, #1
        ret = ST7735_ERROR;
 80020e2:	f04f 3aff 	mov.w	sl, #4294967295
    for(j = 0; j < Height; j++)
 80020e6:	45a1      	cmp	r9, r4
 80020e8:	d02a      	beq.n	8002140 <ST7735_FillRGBRect+0xa8>
      if(ST7735_SetCursor(pObj, Xpos, Ypos+j) != ST7735_OK)
 80020ea:	4622      	mov	r2, r4
 80020ec:	4659      	mov	r1, fp
 80020ee:	9800      	ldr	r0, [sp, #0]
 80020f0:	f7ff fe12 	bl	8001d18 <ST7735_SetCursor>
 80020f4:	2800      	cmp	r0, #0
 80020f6:	d1f3      	bne.n	80020e0 <ST7735_FillRGBRect+0x48>
        for(i = 0; i < Width; i++)
 80020f8:	b1b6      	cbz	r6, 8002128 <ST7735_FillRGBRect+0x90>
 80020fa:	9b03      	ldr	r3, [sp, #12]
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d940      	bls.n	8002182 <ST7735_FillRGBRect+0xea>
 8002100:	1cea      	adds	r2, r5, #3
 8002102:	4639      	mov	r1, r7
 8002104:	1bd2      	subs	r2, r2, r7
 8002106:	2a06      	cmp	r2, #6
 8002108:	d81e      	bhi.n	8002148 <ST7735_FillRGBRect+0xb0>
 800210a:	f105 0c01 	add.w	ip, r5, #1
          pdata[2U*i] = (uint8_t)(*(rgb_data));
 800210e:	f815 3010 	ldrb.w	r3, [r5, r0, lsl #1]
 8002112:	f801 3010 	strb.w	r3, [r1, r0, lsl #1]
          pdata[(2U*i) + 1U] = (uint8_t)(*(rgb_data + 1));
 8002116:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
 800211a:	f808 3010 	strb.w	r3, [r8, r0, lsl #1]
        for(i = 0; i < Width; i++)
 800211e:	3001      	adds	r0, #1
 8002120:	4286      	cmp	r6, r0
 8002122:	d1f4      	bne.n	800210e <ST7735_FillRGBRect+0x76>
 8002124:	9b01      	ldr	r3, [sp, #4]
 8002126:	441d      	add	r5, r3
        if(st7735_send_data(&pObj->Ctx, (uint8_t*)&pdata[0], 2U*Width) != ST7735_OK)
 8002128:	9a01      	ldr	r2, [sp, #4]
 800212a:	4639      	mov	r1, r7
 800212c:	9802      	ldr	r0, [sp, #8]
    for(j = 0; j < Height; j++)
 800212e:	3401      	adds	r4, #1
        if(st7735_send_data(&pObj->Ctx, (uint8_t*)&pdata[0], 2U*Width) != ST7735_OK)
 8002130:	f000 f90e 	bl	8002350 <st7735_send_data>
          ret = ST7735_ERROR;
 8002134:	2800      	cmp	r0, #0
 8002136:	bf18      	it	ne
 8002138:	f04f 3aff 	movne.w	sl, #4294967295
    for(j = 0; j < Height; j++)
 800213c:	45a1      	cmp	r9, r4
 800213e:	d1d4      	bne.n	80020ea <ST7735_FillRGBRect+0x52>
}
 8002140:	4650      	mov	r0, sl
 8002142:	b005      	add	sp, #20
 8002144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002148:	ea4f 0c56 	mov.w	ip, r6, lsr #1
 800214c:	462a      	mov	r2, r5
        for(i = 0; i < Width; i++)
 800214e:	4913      	ldr	r1, [pc, #76]	@ (800219c <ST7735_FillRGBRect+0x104>)
 8002150:	eb05 0c8c 	add.w	ip, r5, ip, lsl #2
          pdata[2U*i] = (uint8_t)(*(rgb_data));
 8002154:	f852 3b04 	ldr.w	r3, [r2], #4
          pdata[(2U*i) + 1U] = (uint8_t)(*(rgb_data + 1));
 8002158:	4594      	cmp	ip, r2
          pdata[2U*i] = (uint8_t)(*(rgb_data));
 800215a:	f841 3b04 	str.w	r3, [r1], #4
        for(i = 0; i < Width; i++)
 800215e:	d1f9      	bne.n	8002154 <ST7735_FillRGBRect+0xbc>
 8002160:	f026 0101 	bic.w	r1, r6, #1
 8002164:	07f3      	lsls	r3, r6, #31
 8002166:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800216a:	eb05 0c41 	add.w	ip, r5, r1, lsl #1
 800216e:	d5d9      	bpl.n	8002124 <ST7735_FillRGBRect+0x8c>
          pdata[2U*i] = (uint8_t)(*(rgb_data));
 8002170:	f815 0011 	ldrb.w	r0, [r5, r1, lsl #1]
          pdata[(2U*i) + 1U] = (uint8_t)(*(rgb_data + 1));
 8002174:	443a      	add	r2, r7
          pdata[2U*i] = (uint8_t)(*(rgb_data));
 8002176:	f807 0011 	strb.w	r0, [r7, r1, lsl #1]
          pdata[(2U*i) + 1U] = (uint8_t)(*(rgb_data + 1));
 800217a:	f89c 1001 	ldrb.w	r1, [ip, #1]
 800217e:	7051      	strb	r1, [r2, #1]
        for(i = 0; i < Width; i++)
 8002180:	e7d0      	b.n	8002124 <ST7735_FillRGBRect+0x8c>
 8002182:	4906      	ldr	r1, [pc, #24]	@ (800219c <ST7735_FillRGBRect+0x104>)
 8002184:	e7c1      	b.n	800210a <ST7735_FillRGBRect+0x72>
  int32_t ret = ST7735_OK;
 8002186:	469a      	mov	sl, r3
}
 8002188:	4650      	mov	r0, sl
 800218a:	b005      	add	sp, #20
 800218c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ret = ST7735_ERROR;
 8002190:	f04f 3aff 	mov.w	sl, #4294967295
 8002194:	e7d4      	b.n	8002140 <ST7735_FillRGBRect+0xa8>
 8002196:	bf00      	nop
 8002198:	240007b0 	.word	0x240007b0
 800219c:	2400052c 	.word	0x2400052c

080021a0 <ST7735_DrawVLine>:
{
 80021a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80021a4:	4614      	mov	r4, r2
  if((Ypos + Length) > ST7735Ctx.Height)
 80021a6:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8002214 <ST7735_DrawVLine+0x74>
{
 80021aa:	460d      	mov	r5, r1
 80021ac:	b082      	sub	sp, #8
  if((Ypos + Length) > ST7735Ctx.Height)
 80021ae:	eb04 0803 	add.w	r8, r4, r3
 80021b2:	f8da 1004 	ldr.w	r1, [sl, #4]
{
 80021b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
  if((Ypos + Length) > ST7735Ctx.Height)
 80021b8:	4588      	cmp	r8, r1
 80021ba:	d826      	bhi.n	800220a <ST7735_DrawVLine+0x6a>
    for(counter = 0; counter < Length; counter++)
 80021bc:	b30b      	cbz	r3, 8002202 <ST7735_DrawVLine+0x62>
  color |= (uint16_t)((uint16_t)(Color >> 8));
 80021be:	0a16      	lsrs	r6, r2, #8
 80021c0:	4607      	mov	r7, r0
    if(st7735_send_data(&pObj->Ctx, (uint8_t*)&color, 2) != ST7735_OK)
 80021c2:	f100 0920 	add.w	r9, r0, #32
  color |= (uint16_t)((uint16_t)(Color >> 8));
 80021c6:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
 80021ca:	b2b6      	uxth	r6, r6
  if((Xpos >= ST7735Ctx.Width) || (Ypos >= ST7735Ctx.Height))
 80021cc:	f8da 3000 	ldr.w	r3, [sl]
  else if(ST7735_SetCursor(pObj, Xpos, Ypos) != ST7735_OK)
 80021d0:	4622      	mov	r2, r4
 80021d2:	4629      	mov	r1, r5
 80021d4:	4638      	mov	r0, r7
  if((Xpos >= ST7735Ctx.Width) || (Ypos >= ST7735Ctx.Height))
 80021d6:	429d      	cmp	r5, r3
  color |= (uint16_t)((uint16_t)(Color >> 8));
 80021d8:	f8ad 6006 	strh.w	r6, [sp, #6]
  if((Xpos >= ST7735Ctx.Width) || (Ypos >= ST7735Ctx.Height))
 80021dc:	d215      	bcs.n	800220a <ST7735_DrawVLine+0x6a>
 80021de:	f8da 3004 	ldr.w	r3, [sl, #4]
 80021e2:	42a3      	cmp	r3, r4
 80021e4:	d911      	bls.n	800220a <ST7735_DrawVLine+0x6a>
  else if(ST7735_SetCursor(pObj, Xpos, Ypos) != ST7735_OK)
 80021e6:	f7ff fd97 	bl	8001d18 <ST7735_SetCursor>
 80021ea:	4603      	mov	r3, r0
    if(st7735_send_data(&pObj->Ctx, (uint8_t*)&color, 2) != ST7735_OK)
 80021ec:	2202      	movs	r2, #2
 80021ee:	f10d 0106 	add.w	r1, sp, #6
 80021f2:	4648      	mov	r0, r9
  else if(ST7735_SetCursor(pObj, Xpos, Ypos) != ST7735_OK)
 80021f4:	b94b      	cbnz	r3, 800220a <ST7735_DrawVLine+0x6a>
    for(counter = 0; counter < Length; counter++)
 80021f6:	3401      	adds	r4, #1
    if(st7735_send_data(&pObj->Ctx, (uint8_t*)&color, 2) != ST7735_OK)
 80021f8:	f000 f8aa 	bl	8002350 <st7735_send_data>
 80021fc:	b928      	cbnz	r0, 800220a <ST7735_DrawVLine+0x6a>
    for(counter = 0; counter < Length; counter++)
 80021fe:	45a0      	cmp	r8, r4
 8002200:	d1e4      	bne.n	80021cc <ST7735_DrawVLine+0x2c>
  int32_t ret = ST7735_OK;
 8002202:	2000      	movs	r0, #0
}
 8002204:	b002      	add	sp, #8
 8002206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ret = ST7735_ERROR;
 800220a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800220e:	b002      	add	sp, #8
 8002210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002214:	240007b0 	.word	0x240007b0

08002218 <ST7735_FillRect>:
{
 8002218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800221c:	b087      	sub	sp, #28
 800221e:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	@ 0x40
  for(i = 0; i < Height; i++)
 8002222:	2c00      	cmp	r4, #0
 8002224:	d04d      	beq.n	80022c2 <ST7735_FillRect+0xaa>
 8002226:	469b      	mov	fp, r3
 8002228:	1913      	adds	r3, r2, r4
 800222a:	4c2a      	ldr	r4, [pc, #168]	@ (80022d4 <ST7735_FillRect+0xbc>)
      pdata[2U*i] = (uint8_t)(Color >> 8);
 800222c:	f3c5 2607 	ubfx	r6, r5, #8, #8
 8002230:	9303      	str	r3, [sp, #12]
    if(st7735_send_data(&pObj->Ctx, (uint8_t*)&pdata[0], 2U*Length) != ST7735_OK)
 8002232:	ea4f 034b 	mov.w	r3, fp, lsl #1
 8002236:	ea4f 075b 	mov.w	r7, fp, lsr #1
 800223a:	4682      	mov	sl, r0
 800223c:	9302      	str	r3, [sp, #8]
  if((Xpos + Length) > ST7735Ctx.Width)
 800223e:	eb01 030b 	add.w	r3, r1, fp
 8002242:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8002246:	4690      	mov	r8, r2
 8002248:	9300      	str	r3, [sp, #0]
 800224a:	f02b 0301 	bic.w	r3, fp, #1
      pdata[(2U*i) + 1U] = (uint8_t)(Color);
 800224e:	b2ed      	uxtb	r5, r5
 8002250:	f8df 9084 	ldr.w	r9, [pc, #132]	@ 80022d8 <ST7735_FillRect+0xc0>
 8002254:	9305      	str	r3, [sp, #20]
 8002256:	f00b 0301 	and.w	r3, fp, #1
 800225a:	9101      	str	r1, [sp, #4]
 800225c:	9304      	str	r3, [sp, #16]
 800225e:	465b      	mov	r3, fp
 8002260:	46bb      	mov	fp, r7
 8002262:	461f      	mov	r7, r3
  if((Xpos + Length) > ST7735Ctx.Width)
 8002264:	f8d9 2000 	ldr.w	r2, [r9]
 8002268:	9b00      	ldr	r3, [sp, #0]
 800226a:	4293      	cmp	r3, r2
 800226c:	d82d      	bhi.n	80022ca <ST7735_FillRect+0xb2>
  else if(ST7735_SetCursor(pObj, Xpos, Ypos) != ST7735_OK)
 800226e:	4642      	mov	r2, r8
 8002270:	9901      	ldr	r1, [sp, #4]
 8002272:	4650      	mov	r0, sl
 8002274:	f7ff fd50 	bl	8001d18 <ST7735_SetCursor>
 8002278:	bb38      	cbnz	r0, 80022ca <ST7735_FillRect+0xb2>
    for(i = 0; i < Length; i++)
 800227a:	b1b7      	cbz	r7, 80022aa <ST7735_FillRect+0x92>
 800227c:	2f01      	cmp	r7, #1
 800227e:	d00f      	beq.n	80022a0 <ST7735_FillRect+0x88>
 8002280:	f366 0007 	bfi	r0, r6, #0, #8
      pdata[(2U*i) + 1U] = (uint8_t)(Color);
 8002284:	4a13      	ldr	r2, [pc, #76]	@ (80022d4 <ST7735_FillRect+0xbc>)
 8002286:	f365 200f 	bfi	r0, r5, #8, #8
 800228a:	f366 4017 	bfi	r0, r6, #16, #8
 800228e:	f365 601f 	bfi	r0, r5, #24, #8
      pdata[2U*i] = (uint8_t)(Color >> 8);
 8002292:	f842 0b04 	str.w	r0, [r2], #4
    for(i = 0; i < Length; i++)
 8002296:	455a      	cmp	r2, fp
 8002298:	d1fb      	bne.n	8002292 <ST7735_FillRect+0x7a>
 800229a:	9b04      	ldr	r3, [sp, #16]
 800229c:	b12b      	cbz	r3, 80022aa <ST7735_FillRect+0x92>
 800229e:	9805      	ldr	r0, [sp, #20]
      pdata[2U*i] = (uint8_t)(Color >> 8);
 80022a0:	f804 6010 	strb.w	r6, [r4, r0, lsl #1]
      pdata[(2U*i) + 1U] = (uint8_t)(Color);
 80022a4:	eb04 0040 	add.w	r0, r4, r0, lsl #1
 80022a8:	7045      	strb	r5, [r0, #1]
    if(st7735_send_data(&pObj->Ctx, (uint8_t*)&pdata[0], 2U*Length) != ST7735_OK)
 80022aa:	9a02      	ldr	r2, [sp, #8]
 80022ac:	4621      	mov	r1, r4
 80022ae:	f10a 0020 	add.w	r0, sl, #32
 80022b2:	f000 f84d 	bl	8002350 <st7735_send_data>
 80022b6:	b940      	cbnz	r0, 80022ca <ST7735_FillRect+0xb2>
    y_pos++;
 80022b8:	f108 0801 	add.w	r8, r8, #1
  for(i = 0; i < Height; i++)
 80022bc:	9b03      	ldr	r3, [sp, #12]
 80022be:	4598      	cmp	r8, r3
 80022c0:	d1d0      	bne.n	8002264 <ST7735_FillRect+0x4c>
  int32_t ret = ST7735_OK;
 80022c2:	2000      	movs	r0, #0
}
 80022c4:	b007      	add	sp, #28
 80022c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ret = ST7735_ERROR;
 80022ca:	f04f 30ff 	mov.w	r0, #4294967295
}
 80022ce:	b007      	add	sp, #28
 80022d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022d4:	240002ac 	.word	0x240002ac
 80022d8:	240007b0 	.word	0x240007b0

080022dc <ST7735_RegisterBusIO>:
  if(pObj == NULL)
 80022dc:	b300      	cbz	r0, 8002320 <ST7735_RegisterBusIO+0x44>
    pObj->IO.Address   = pIO->Address;
 80022de:	890a      	ldrh	r2, [r1, #8]
{
 80022e0:	b4f0      	push	{r4, r5, r6, r7}
    pObj->IO.DeInit    = pIO->DeInit;
 80022e2:	e9d1 3400 	ldrd	r3, r4, [r1]
    pObj->IO.Address   = pIO->Address;
 80022e6:	8102      	strh	r2, [r0, #8]
    pObj->IO.DeInit    = pIO->DeInit;
 80022e8:	e9c0 3400 	strd	r3, r4, [r0]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80022ec:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
 80022f0:	69ca      	ldr	r2, [r1, #28]
 80022f2:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
 80022f6:	e9c0 5206 	strd	r5, r2, [r0, #24]
    pObj->Ctx.WriteReg  = ST7735_WriteRegWrap;
 80022fa:	4a0b      	ldr	r2, [pc, #44]	@ (8002328 <ST7735_RegisterBusIO+0x4c>)
    pObj->Ctx.SendData  = ST7735_SendDataWrap;
 80022fc:	490b      	ldr	r1, [pc, #44]	@ (800232c <ST7735_RegisterBusIO+0x50>)
    pObj->IO.WriteReg  = pIO->WriteReg;
 80022fe:	6144      	str	r4, [r0, #20]
    pObj->Ctx.WriteReg  = ST7735_WriteRegWrap;
 8002300:	6202      	str	r2, [r0, #32]
    pObj->Ctx.ReadReg   = ST7735_ReadRegWrap;
 8002302:	4c0b      	ldr	r4, [pc, #44]	@ (8002330 <ST7735_RegisterBusIO+0x54>)
    pObj->Ctx.RecvData  = ST7735_RecvDataWrap;
 8002304:	4a0b      	ldr	r2, [pc, #44]	@ (8002334 <ST7735_RegisterBusIO+0x58>)
    pObj->Ctx.ReadReg   = ST7735_ReadRegWrap;
 8002306:	6244      	str	r4, [r0, #36]	@ 0x24
    pObj->Ctx.handle    = pObj;
 8002308:	6300      	str	r0, [r0, #48]	@ 0x30
    pObj->IO.WriteReg  = pIO->WriteReg;
 800230a:	e9c0 7603 	strd	r7, r6, [r0, #12]
    pObj->Ctx.RecvData  = ST7735_RecvDataWrap;
 800230e:	e9c0 120a 	strd	r1, r2, [r0, #40]	@ 0x28
    if(pObj->IO.Init != NULL)
 8002312:	b10b      	cbz	r3, 8002318 <ST7735_RegisterBusIO+0x3c>
}
 8002314:	bcf0      	pop	{r4, r5, r6, r7}
      ret = pObj->IO.Init();
 8002316:	4718      	bx	r3
}
 8002318:	f04f 30ff 	mov.w	r0, #4294967295
 800231c:	bcf0      	pop	{r4, r5, r6, r7}
 800231e:	4770      	bx	lr
 8002320:	f04f 30ff 	mov.w	r0, #4294967295
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	080013e9 	.word	0x080013e9
 800232c:	080013fd 	.word	0x080013fd
 8002330:	080013e1 	.word	0x080013e1
 8002334:	08001405 	.word	0x08001405

08002338 <st7735_read_reg>:
  * @param  pdata data to read from the register
  * @retval Component status
  */
int32_t st7735_read_reg(st7735_ctx_t *ctx, uint8_t reg, uint8_t *pdata)
{
  return ctx->ReadReg(ctx->handle, reg, pdata);
 8002338:	6843      	ldr	r3, [r0, #4]
 800233a:	6900      	ldr	r0, [r0, #16]
 800233c:	4718      	bx	r3
 800233e:	bf00      	nop

08002340 <st7735_write_reg>:
  * @param  pdata  data to write to the register
  * @param  length length of data to write to the register
  * @retval Component status
  */
int32_t st7735_write_reg(st7735_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint32_t length)
{
 8002340:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8002342:	6804      	ldr	r4, [r0, #0]
 8002344:	6900      	ldr	r0, [r0, #16]
 8002346:	46a4      	mov	ip, r4
}
 8002348:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 800234c:	4760      	bx	ip
 800234e:	bf00      	nop

08002350 <st7735_send_data>:
  * @param  length length of data to write
  * @retval Component status
  */
int32_t st7735_send_data(st7735_ctx_t *ctx, uint8_t *pdata, uint32_t length)
{
  return ctx->SendData(ctx->handle, pdata, length);
 8002350:	6883      	ldr	r3, [r0, #8]
 8002352:	6900      	ldr	r0, [r0, #16]
 8002354:	4718      	bx	r3
 8002356:	bf00      	nop

08002358 <st7735_recv_data>:
  * @param  length length of data to read
  * @retval Component status
  */
int32_t st7735_recv_data(st7735_ctx_t *ctx, uint8_t *pdata, uint32_t length)
{
  return ctx->RecvData(ctx->handle, pdata, length);
 8002358:	e9d0 3003 	ldrd	r3, r0, [r0, #12]
 800235c:	4718      	bx	r3
 800235e:	bf00      	nop

08002360 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002360:	4b0f      	ldr	r3, [pc, #60]	@ (80023a0 <HAL_InitTick+0x40>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	b90b      	cbnz	r3, 800236a <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 8002366:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002368:	4770      	bx	lr
{
 800236a:	b510      	push	{r4, lr}
 800236c:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800236e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002372:	4a0c      	ldr	r2, [pc, #48]	@ (80023a4 <HAL_InitTick+0x44>)
 8002374:	fbb0 f3f3 	udiv	r3, r0, r3
 8002378:	6810      	ldr	r0, [r2, #0]
 800237a:	fbb0 f0f3 	udiv	r0, r0, r3
 800237e:	f000 f8d3 	bl	8002528 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002382:	2c0f      	cmp	r4, #15
 8002384:	d800      	bhi.n	8002388 <HAL_InitTick+0x28>
 8002386:	b108      	cbz	r0, 800238c <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8002388:	2001      	movs	r0, #1
}
 800238a:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800238c:	2200      	movs	r2, #0
 800238e:	4621      	mov	r1, r4
 8002390:	f04f 30ff 	mov.w	r0, #4294967295
 8002394:	f000 f87e 	bl	8002494 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002398:	4b03      	ldr	r3, [pc, #12]	@ (80023a8 <HAL_InitTick+0x48>)
 800239a:	2000      	movs	r0, #0
 800239c:	601c      	str	r4, [r3, #0]
}
 800239e:	bd10      	pop	{r4, pc}
 80023a0:	24000070 	.word	0x24000070
 80023a4:	2400007c 	.word	0x2400007c
 80023a8:	24000074 	.word	0x24000074

080023ac <HAL_Init>:
{
 80023ac:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023ae:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80023b0:	4c12      	ldr	r4, [pc, #72]	@ (80023fc <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023b2:	f000 f85d 	bl	8002470 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80023b6:	f001 fa41 	bl	800383c <HAL_RCC_GetSysClockFreq>
 80023ba:	4b11      	ldr	r3, [pc, #68]	@ (8002400 <HAL_Init+0x54>)
 80023bc:	4911      	ldr	r1, [pc, #68]	@ (8002404 <HAL_Init+0x58>)
 80023be:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80023c0:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80023c2:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80023c6:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80023ca:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80023cc:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80023ce:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 80023d2:	490d      	ldr	r1, [pc, #52]	@ (8002408 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80023d4:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80023d8:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80023da:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 80023de:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023e0:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80023e2:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023e4:	f7ff ffbc 	bl	8002360 <HAL_InitTick>
 80023e8:	b110      	cbz	r0, 80023f0 <HAL_Init+0x44>
    return HAL_ERROR;
 80023ea:	2401      	movs	r4, #1
}
 80023ec:	4620      	mov	r0, r4
 80023ee:	bd10      	pop	{r4, pc}
 80023f0:	4604      	mov	r4, r0
  HAL_MspInit();
 80023f2:	f004 fbe7 	bl	8006bc4 <HAL_MspInit>
}
 80023f6:	4620      	mov	r0, r4
 80023f8:	bd10      	pop	{r4, pc}
 80023fa:	bf00      	nop
 80023fc:	24000078 	.word	0x24000078
 8002400:	58024400 	.word	0x58024400
 8002404:	080108d8 	.word	0x080108d8
 8002408:	2400007c 	.word	0x2400007c

0800240c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800240c:	4a03      	ldr	r2, [pc, #12]	@ (800241c <HAL_IncTick+0x10>)
 800240e:	4b04      	ldr	r3, [pc, #16]	@ (8002420 <HAL_IncTick+0x14>)
 8002410:	6811      	ldr	r1, [r2, #0]
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	440b      	add	r3, r1
 8002416:	6013      	str	r3, [r2, #0]
}
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	240007c0 	.word	0x240007c0
 8002420:	24000070 	.word	0x24000070

08002424 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002424:	4b01      	ldr	r3, [pc, #4]	@ (800242c <HAL_GetTick+0x8>)
 8002426:	6818      	ldr	r0, [r3, #0]
}
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	240007c0 	.word	0x240007c0

08002430 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002430:	b538      	push	{r3, r4, r5, lr}
 8002432:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002434:	f7ff fff6 	bl	8002424 <HAL_GetTick>
 8002438:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800243a:	1c63      	adds	r3, r4, #1
 800243c:	d002      	beq.n	8002444 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800243e:	4b04      	ldr	r3, [pc, #16]	@ (8002450 <HAL_Delay+0x20>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002444:	f7ff ffee 	bl	8002424 <HAL_GetTick>
 8002448:	1b40      	subs	r0, r0, r5
 800244a:	42a0      	cmp	r0, r4
 800244c:	d3fa      	bcc.n	8002444 <HAL_Delay+0x14>
  {
  }
}
 800244e:	bd38      	pop	{r3, r4, r5, pc}
 8002450:	24000070 	.word	0x24000070

08002454 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8002454:	4b01      	ldr	r3, [pc, #4]	@ (800245c <HAL_GetREVID+0x8>)
 8002456:	6818      	ldr	r0, [r3, #0]
}
 8002458:	0c00      	lsrs	r0, r0, #16
 800245a:	4770      	bx	lr
 800245c:	5c001000 	.word	0x5c001000

08002460 <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8002460:	4b02      	ldr	r3, [pc, #8]	@ (800246c <HAL_GetDEVID+0xc>)
 8002462:	6818      	ldr	r0, [r3, #0]
}
 8002464:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	5c001000 	.word	0x5c001000

08002470 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002470:	4906      	ldr	r1, [pc, #24]	@ (800248c <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002472:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002476:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8002478:	4b05      	ldr	r3, [pc, #20]	@ (8002490 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800247a:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800247c:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002480:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002484:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8002486:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8002488:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800248a:	4770      	bx	lr
 800248c:	e000ed00 	.word	0xe000ed00
 8002490:	05fa0000 	.word	0x05fa0000

08002494 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002494:	4b1a      	ldr	r3, [pc, #104]	@ (8002500 <HAL_NVIC_SetPriority+0x6c>)
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800249c:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800249e:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024a2:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024a6:	f1be 0f04 	cmp.w	lr, #4
 80024aa:	bf28      	it	cs
 80024ac:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024b0:	f1bc 0f06 	cmp.w	ip, #6
 80024b4:	d91a      	bls.n	80024ec <HAL_NVIC_SetPriority+0x58>
 80024b6:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024ba:	f04f 33ff 	mov.w	r3, #4294967295
 80024be:	fa03 f30c 	lsl.w	r3, r3, ip
 80024c2:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c6:	f04f 33ff 	mov.w	r3, #4294967295
  if ((int32_t)(IRQn) >= 0)
 80024ca:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024cc:	fa03 f30e 	lsl.w	r3, r3, lr
 80024d0:	ea21 0303 	bic.w	r3, r1, r3
 80024d4:	fa03 f30c 	lsl.w	r3, r3, ip
 80024d8:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024dc:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80024e0:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80024e2:	db06      	blt.n	80024f2 <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024e4:	4a07      	ldr	r2, [pc, #28]	@ (8002504 <HAL_NVIC_SetPriority+0x70>)
 80024e6:	5413      	strb	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80024e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80024ec:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ee:	4694      	mov	ip, r2
 80024f0:	e7e9      	b.n	80024c6 <HAL_NVIC_SetPriority+0x32>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f2:	f000 000f 	and.w	r0, r0, #15
 80024f6:	4a04      	ldr	r2, [pc, #16]	@ (8002508 <HAL_NVIC_SetPriority+0x74>)
 80024f8:	5413      	strb	r3, [r2, r0]
 80024fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80024fe:	bf00      	nop
 8002500:	e000ed00 	.word	0xe000ed00
 8002504:	e000e400 	.word	0xe000e400
 8002508:	e000ed14 	.word	0xe000ed14

0800250c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800250c:	2800      	cmp	r0, #0
 800250e:	db07      	blt.n	8002520 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002510:	2301      	movs	r3, #1
 8002512:	f000 011f 	and.w	r1, r0, #31
 8002516:	4a03      	ldr	r2, [pc, #12]	@ (8002524 <HAL_NVIC_EnableIRQ+0x18>)
 8002518:	0940      	lsrs	r0, r0, #5
 800251a:	408b      	lsls	r3, r1
 800251c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	e000e100 	.word	0xe000e100

08002528 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002528:	1e43      	subs	r3, r0, #1
 800252a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800252e:	d301      	bcc.n	8002534 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002530:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002532:	4770      	bx	lr
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002534:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002538:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800253a:	4905      	ldr	r1, [pc, #20]	@ (8002550 <HAL_SYSTICK_Config+0x28>)
 800253c:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002540:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002542:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002544:	f881 c023 	strb.w	ip, [r1, #35]	@ 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002548:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800254a:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	e000ed00 	.word	0xe000ed00

08002554 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002554:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002558:	4b04      	ldr	r3, [pc, #16]	@ (800256c <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800255a:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800255c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800255e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002562:	625a      	str	r2, [r3, #36]	@ 0x24
  MPU->CTRL = 0;
 8002564:	f8c3 1094 	str.w	r1, [r3, #148]	@ 0x94
}
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	e000ed00 	.word	0xe000ed00

08002570 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002570:	4b06      	ldr	r3, [pc, #24]	@ (800258c <HAL_MPU_Enable+0x1c>)
 8002572:	f040 0001 	orr.w	r0, r0, #1
 8002576:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800257a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800257c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002580:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002582:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002586:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800258a:	4770      	bx	lr
 800258c:	e000ed00 	.word	0xe000ed00

08002590 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002590:	4a17      	ldr	r2, [pc, #92]	@ (80025f0 <HAL_MPU_ConfigRegion+0x60>)
 8002592:	7843      	ldrb	r3, [r0, #1]
 8002594:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  if ((MPU_Init->Enable) != 0UL)
 8002598:	7801      	ldrb	r1, [r0, #0]
 800259a:	b321      	cbz	r1, 80025e6 <HAL_MPU_ConfigRegion+0x56>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800259c:	6843      	ldr	r3, [r0, #4]
{
 800259e:	b500      	push	{lr}
    MPU->RBAR = MPU_Init->BaseAddress;
 80025a0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80025a4:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80025a6:	f890 c00c 	ldrb.w	ip, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80025aa:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80025ac:	f890 e00f 	ldrb.w	lr, [r0, #15]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80025b0:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80025b4:	f890 c00a 	ldrb.w	ip, [r0, #10]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80025b8:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80025ba:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80025bc:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80025c0:	f890 c00d 	ldrb.w	ip, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80025c4:	ea43 438c 	orr.w	r3, r3, ip, lsl #18
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80025c8:	f890 c009 	ldrb.w	ip, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80025cc:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 80025d0:	7a01      	ldrb	r1, [r0, #8]
 80025d2:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80025d6:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 80025da:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80025de:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80025e2:	f85d fb04 	ldr.w	pc, [sp], #4
    MPU->RBAR = 0x00;
 80025e6:	f8c2 109c 	str.w	r1, [r2, #156]	@ 0x9c
    MPU->RASR = 0x00;
 80025ea:	f8c2 10a0 	str.w	r1, [r2, #160]	@ 0xa0
 80025ee:	4770      	bx	lr
 80025f0:	e000ed00 	.word	0xe000ed00

080025f4 <HAL_DCMI_ErrorCallback>:
  * @brief  Error DCMI callback.
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop

080025f8 <DCMI_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025f8:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 80025fa:	b508      	push	{r3, lr}

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 80025fc:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 80025fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002600:	2b02      	cmp	r3, #2
 8002602:	d006      	beq.n	8002612 <DCMI_DMAError+0x1a>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8002604:	2301      	movs	r3, #1
 8002606:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 800260a:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800260c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002610:	64c3      	str	r3, [r0, #76]	@ 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8002612:	f7ff ffef 	bl	80025f4 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8002616:	bd08      	pop	{r3, pc}

08002618 <HAL_DCMI_LineEventCallback>:
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop

0800261c <HAL_DCMI_VsyncEventCallback>:
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop

08002620 <HAL_DCMI_FrameEventCallback>:
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop

08002624 <HAL_DCMI_IRQHandler>:
{
 8002624:	b538      	push	{r3, r4, r5, lr}
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8002626:	6803      	ldr	r3, [r0, #0]
{
 8002628:	4604      	mov	r4, r0
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 800262a:	691d      	ldr	r5, [r3, #16]
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 800262c:	0769      	lsls	r1, r5, #29
 800262e:	d437      	bmi.n	80026a0 <HAL_DCMI_IRQHandler+0x7c>
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8002630:	07aa      	lsls	r2, r5, #30
 8002632:	d425      	bmi.n	8002680 <HAL_DCMI_IRQHandler+0x5c>
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8002634:	06eb      	lsls	r3, r5, #27
 8002636:	d41c      	bmi.n	8002672 <HAL_DCMI_IRQHandler+0x4e>
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8002638:	0728      	lsls	r0, r5, #28
 800263a:	d413      	bmi.n	8002664 <HAL_DCMI_IRQHandler+0x40>
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 800263c:	07e9      	lsls	r1, r5, #31
 800263e:	d510      	bpl.n	8002662 <HAL_DCMI_IRQHandler+0x3e>
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8002640:	6823      	ldr	r3, [r4, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	0792      	lsls	r2, r2, #30
 8002646:	d503      	bpl.n	8002650 <HAL_DCMI_IRQHandler+0x2c>
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8002648:	68da      	ldr	r2, [r3, #12]
 800264a:	f022 021e 	bic.w	r2, r2, #30
 800264e:	60da      	str	r2, [r3, #12]
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8002650:	68da      	ldr	r2, [r3, #12]
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8002652:	2101      	movs	r1, #1
    HAL_DCMI_FrameEventCallback(hdcmi);
 8002654:	4620      	mov	r0, r4
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8002656:	f022 0201 	bic.w	r2, r2, #1
 800265a:	60da      	str	r2, [r3, #12]
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 800265c:	6159      	str	r1, [r3, #20]
    HAL_DCMI_FrameEventCallback(hdcmi);
 800265e:	f7ff ffdf 	bl	8002620 <HAL_DCMI_FrameEventCallback>
}
 8002662:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8002664:	6823      	ldr	r3, [r4, #0]
 8002666:	2208      	movs	r2, #8
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8002668:	4620      	mov	r0, r4
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 800266a:	615a      	str	r2, [r3, #20]
    HAL_DCMI_VsyncEventCallback(hdcmi);
 800266c:	f7ff ffd6 	bl	800261c <HAL_DCMI_VsyncEventCallback>
 8002670:	e7e4      	b.n	800263c <HAL_DCMI_IRQHandler+0x18>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8002672:	6823      	ldr	r3, [r4, #0]
 8002674:	2210      	movs	r2, #16
    HAL_DCMI_LineEventCallback(hdcmi);
 8002676:	4620      	mov	r0, r4
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8002678:	615a      	str	r2, [r3, #20]
    HAL_DCMI_LineEventCallback(hdcmi);
 800267a:	f7ff ffcd 	bl	8002618 <HAL_DCMI_LineEventCallback>
 800267e:	e7db      	b.n	8002638 <HAL_DCMI_IRQHandler+0x14>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8002680:	6823      	ldr	r3, [r4, #0]
 8002682:	2102      	movs	r1, #2
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8002684:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8002686:	2204      	movs	r2, #4
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8002688:	6159      	str	r1, [r3, #20]
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 800268a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800268c:	f043 0301 	orr.w	r3, r3, #1
 8002690:	64e3      	str	r3, [r4, #76]	@ 0x4c
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8002692:	4b0a      	ldr	r3, [pc, #40]	@ (80026bc <HAL_DCMI_IRQHandler+0x98>)
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8002694:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8002698:	6503      	str	r3, [r0, #80]	@ 0x50
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800269a:	f000 f811 	bl	80026c0 <HAL_DMA_Abort_IT>
 800269e:	e7c9      	b.n	8002634 <HAL_DCMI_IRQHandler+0x10>
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 80026a0:	2204      	movs	r2, #4
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80026a2:	6c80      	ldr	r0, [r0, #72]	@ 0x48
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 80026a4:	615a      	str	r2, [r3, #20]
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 80026a6:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80026a8:	f043 0302 	orr.w	r3, r3, #2
 80026ac:	64e3      	str	r3, [r4, #76]	@ 0x4c
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80026ae:	4b03      	ldr	r3, [pc, #12]	@ (80026bc <HAL_DCMI_IRQHandler+0x98>)
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80026b0:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80026b4:	6503      	str	r3, [r0, #80]	@ 0x50
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80026b6:	f000 f803 	bl	80026c0 <HAL_DMA_Abort_IT>
 80026ba:	e7b9      	b.n	8002630 <HAL_DCMI_IRQHandler+0xc>
 80026bc:	080025f9 	.word	0x080025f9

080026c0 <HAL_DMA_Abort_IT>:
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80026c0:	2800      	cmp	r0, #0
 80026c2:	d062      	beq.n	800278a <HAL_DMA_Abort_IT+0xca>
{
 80026c4:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026c6:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d159      	bne.n	8002782 <HAL_DMA_Abort_IT+0xc2>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
    return HAL_ERROR;
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80026ce:	6802      	ldr	r2, [r0, #0]
 80026d0:	4b57      	ldr	r3, [pc, #348]	@ (8002830 <HAL_DMA_Abort_IT+0x170>)
 80026d2:	4c58      	ldr	r4, [pc, #352]	@ (8002834 <HAL_DMA_Abort_IT+0x174>)
 80026d4:	4958      	ldr	r1, [pc, #352]	@ (8002838 <HAL_DMA_Abort_IT+0x178>)
 80026d6:	42a2      	cmp	r2, r4
 80026d8:	bf18      	it	ne
 80026da:	429a      	cmpne	r2, r3
 80026dc:	f104 0430 	add.w	r4, r4, #48	@ 0x30
 80026e0:	bf0c      	ite	eq
 80026e2:	2301      	moveq	r3, #1
 80026e4:	2300      	movne	r3, #0
 80026e6:	428a      	cmp	r2, r1
 80026e8:	bf08      	it	eq
 80026ea:	f043 0301 	orreq.w	r3, r3, #1
 80026ee:	3130      	adds	r1, #48	@ 0x30
 80026f0:	42a2      	cmp	r2, r4
 80026f2:	bf08      	it	eq
 80026f4:	f043 0301 	orreq.w	r3, r3, #1
 80026f8:	3430      	adds	r4, #48	@ 0x30
 80026fa:	428a      	cmp	r2, r1
 80026fc:	bf08      	it	eq
 80026fe:	f043 0301 	orreq.w	r3, r3, #1
 8002702:	3130      	adds	r1, #48	@ 0x30
 8002704:	42a2      	cmp	r2, r4
 8002706:	bf08      	it	eq
 8002708:	f043 0301 	orreq.w	r3, r3, #1
 800270c:	3430      	adds	r4, #48	@ 0x30
 800270e:	428a      	cmp	r2, r1
 8002710:	bf08      	it	eq
 8002712:	f043 0301 	orreq.w	r3, r3, #1
 8002716:	f501 715c 	add.w	r1, r1, #880	@ 0x370
 800271a:	42a2      	cmp	r2, r4
 800271c:	bf08      	it	eq
 800271e:	f043 0301 	orreq.w	r3, r3, #1
 8002722:	f504 745c 	add.w	r4, r4, #880	@ 0x370
 8002726:	428a      	cmp	r2, r1
 8002728:	bf08      	it	eq
 800272a:	f043 0301 	orreq.w	r3, r3, #1
 800272e:	3130      	adds	r1, #48	@ 0x30
 8002730:	42a2      	cmp	r2, r4
 8002732:	bf08      	it	eq
 8002734:	f043 0301 	orreq.w	r3, r3, #1
 8002738:	3430      	adds	r4, #48	@ 0x30
 800273a:	428a      	cmp	r2, r1
 800273c:	bf08      	it	eq
 800273e:	f043 0301 	orreq.w	r3, r3, #1
 8002742:	3130      	adds	r1, #48	@ 0x30
 8002744:	42a2      	cmp	r2, r4
 8002746:	bf08      	it	eq
 8002748:	f043 0301 	orreq.w	r3, r3, #1
 800274c:	3430      	adds	r4, #48	@ 0x30
 800274e:	428a      	cmp	r2, r1
 8002750:	bf08      	it	eq
 8002752:	f043 0301 	orreq.w	r3, r3, #1
 8002756:	3130      	adds	r1, #48	@ 0x30
 8002758:	42a2      	cmp	r2, r4
 800275a:	bf08      	it	eq
 800275c:	f043 0301 	orreq.w	r3, r3, #1
 8002760:	428a      	cmp	r2, r1
 8002762:	bf08      	it	eq
 8002764:	f043 0301 	orreq.w	r3, r3, #1
 8002768:	b913      	cbnz	r3, 8002770 <HAL_DMA_Abort_IT+0xb0>
 800276a:	4b34      	ldr	r3, [pc, #208]	@ (800283c <HAL_DMA_Abort_IT+0x17c>)
 800276c:	429a      	cmp	r2, r3
 800276e:	d10e      	bne.n	800278e <HAL_DMA_Abort_IT+0xce>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002770:	2304      	movs	r3, #4
 8002772:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002776:	6813      	ldr	r3, [r2, #0]
 8002778:	f023 0301 	bic.w	r3, r3, #1
 800277c:	6013      	str	r3, [r2, #0]
        hdma->XferAbortCallback(hdma);
      }
    }
  }

  return HAL_OK;
 800277e:	2000      	movs	r0, #0
}
 8002780:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002782:	2380      	movs	r3, #128	@ 0x80
 8002784:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 8002786:	2001      	movs	r0, #1
}
 8002788:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800278a:	2001      	movs	r0, #1
}
 800278c:	4770      	bx	lr
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800278e:	4b2c      	ldr	r3, [pc, #176]	@ (8002840 <HAL_DMA_Abort_IT+0x180>)
 8002790:	4d2c      	ldr	r5, [pc, #176]	@ (8002844 <HAL_DMA_Abort_IT+0x184>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002792:	6811      	ldr	r1, [r2, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002794:	42aa      	cmp	r2, r5
 8002796:	bf18      	it	ne
 8002798:	429a      	cmpne	r2, r3
 800279a:	4c2b      	ldr	r4, [pc, #172]	@ (8002848 <HAL_DMA_Abort_IT+0x188>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800279c:	f021 010e 	bic.w	r1, r1, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80027a0:	f105 053c 	add.w	r5, r5, #60	@ 0x3c
 80027a4:	bf0c      	ite	eq
 80027a6:	2301      	moveq	r3, #1
 80027a8:	2300      	movne	r3, #0
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80027aa:	6011      	str	r1, [r2, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80027ac:	42a2      	cmp	r2, r4
 80027ae:	bf08      	it	eq
 80027b0:	f043 0301 	orreq.w	r3, r3, #1
      __HAL_DMA_DISABLE(hdma);
 80027b4:	6811      	ldr	r1, [r2, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80027b6:	3428      	adds	r4, #40	@ 0x28
 80027b8:	42aa      	cmp	r2, r5
 80027ba:	bf08      	it	eq
 80027bc:	f043 0301 	orreq.w	r3, r3, #1
      __HAL_DMA_DISABLE(hdma);
 80027c0:	f021 0101 	bic.w	r1, r1, #1
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80027c4:	42a2      	cmp	r2, r4
 80027c6:	bf08      	it	eq
 80027c8:	f043 0301 	orreq.w	r3, r3, #1
 80027cc:	3414      	adds	r4, #20
      __HAL_DMA_DISABLE(hdma);
 80027ce:	6011      	str	r1, [r2, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80027d0:	42a2      	cmp	r2, r4
 80027d2:	bf08      	it	eq
 80027d4:	f043 0301 	orreq.w	r3, r3, #1
 80027d8:	491c      	ldr	r1, [pc, #112]	@ (800284c <HAL_DMA_Abort_IT+0x18c>)
 80027da:	428a      	cmp	r2, r1
 80027dc:	bf08      	it	eq
 80027de:	f043 0301 	orreq.w	r3, r3, #1
 80027e2:	b913      	cbnz	r3, 80027ea <HAL_DMA_Abort_IT+0x12a>
 80027e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002850 <HAL_DMA_Abort_IT+0x190>)
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d117      	bne.n	800281a <HAL_DMA_Abort_IT+0x15a>
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80027ea:	2301      	movs	r3, #1
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80027ec:	6d85      	ldr	r5, [r0, #88]	@ 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80027ee:	e9d0 1417 	ldrd	r1, r4, [r0, #92]	@ 0x5c
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80027f2:	6822      	ldr	r2, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80027f4:	f001 011f 	and.w	r1, r1, #31
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80027f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80027fc:	408b      	lsls	r3, r1
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80027fe:	6022      	str	r2, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002800:	606b      	str	r3, [r5, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8002802:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002804:	e9d0 2119 	ldrd	r2, r1, [r0, #100]	@ 0x64
 8002808:	6051      	str	r1, [r2, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 800280a:	b133      	cbz	r3, 800281a <HAL_DMA_Abort_IT+0x15a>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800280c:	681a      	ldr	r2, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800280e:	e9d0 141c 	ldrd	r1, r4, [r0, #112]	@ 0x70
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002812:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002816:	601a      	str	r2, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002818:	604c      	str	r4, [r1, #4]
      __HAL_UNLOCK(hdma);
 800281a:	2100      	movs	r1, #0
      hdma->State = HAL_DMA_STATE_READY;
 800281c:	2201      	movs	r2, #1
      if(hdma->XferAbortCallback != NULL)
 800281e:	6d03      	ldr	r3, [r0, #80]	@ 0x50
      __HAL_UNLOCK(hdma);
 8002820:	f880 1034 	strb.w	r1, [r0, #52]	@ 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8002824:	f880 2035 	strb.w	r2, [r0, #53]	@ 0x35
      if(hdma->XferAbortCallback != NULL)
 8002828:	2b00      	cmp	r3, #0
 800282a:	d0a8      	beq.n	800277e <HAL_DMA_Abort_IT+0xbe>
        hdma->XferAbortCallback(hdma);
 800282c:	4798      	blx	r3
 800282e:	e7a6      	b.n	800277e <HAL_DMA_Abort_IT+0xbe>
 8002830:	40020010 	.word	0x40020010
 8002834:	40020028 	.word	0x40020028
 8002838:	40020040 	.word	0x40020040
 800283c:	400204b8 	.word	0x400204b8
 8002840:	5802541c 	.word	0x5802541c
 8002844:	58025408 	.word	0x58025408
 8002848:	58025430 	.word	0x58025430
 800284c:	58025480 	.word	0x58025480
 8002850:	58025494 	.word	0x58025494

08002854 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002854:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002856:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 8002858:	4b94      	ldr	r3, [pc, #592]	@ (8002aac <HAL_DMA_IRQHandler+0x258>)
{
 800285a:	b083      	sub	sp, #12

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800285c:	6d85      	ldr	r5, [r0, #88]	@ 0x58
{
 800285e:	4607      	mov	r7, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 8002860:	681e      	ldr	r6, [r3, #0]
  __IO uint32_t count = 0U;
 8002862:	9201      	str	r2, [sp, #4]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr_dma  = regs_dma->ISR;
  tmpisr_bdma = regs_bdma->ISR;

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002864:	4b92      	ldr	r3, [pc, #584]	@ (8002ab0 <HAL_DMA_IRQHandler+0x25c>)
 8002866:	6802      	ldr	r2, [r0, #0]
 8002868:	4892      	ldr	r0, [pc, #584]	@ (8002ab4 <HAL_DMA_IRQHandler+0x260>)
  tmpisr_dma  = regs_dma->ISR;
 800286a:	682c      	ldr	r4, [r5, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800286c:	4282      	cmp	r2, r0
 800286e:	bf18      	it	ne
 8002870:	429a      	cmpne	r2, r3
 8002872:	f100 0018 	add.w	r0, r0, #24
  tmpisr_bdma = regs_bdma->ISR;
 8002876:	6829      	ldr	r1, [r5, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002878:	bf0c      	ite	eq
 800287a:	2301      	moveq	r3, #1
 800287c:	2300      	movne	r3, #0
 800287e:	4282      	cmp	r2, r0
 8002880:	bf08      	it	eq
 8002882:	f043 0301 	orreq.w	r3, r3, #1
 8002886:	3018      	adds	r0, #24
 8002888:	4282      	cmp	r2, r0
 800288a:	bf08      	it	eq
 800288c:	f043 0301 	orreq.w	r3, r3, #1
 8002890:	3018      	adds	r0, #24
 8002892:	4282      	cmp	r2, r0
 8002894:	bf08      	it	eq
 8002896:	f043 0301 	orreq.w	r3, r3, #1
 800289a:	3018      	adds	r0, #24
 800289c:	4282      	cmp	r2, r0
 800289e:	bf08      	it	eq
 80028a0:	f043 0301 	orreq.w	r3, r3, #1
 80028a4:	3018      	adds	r0, #24
 80028a6:	4282      	cmp	r2, r0
 80028a8:	bf08      	it	eq
 80028aa:	f043 0301 	orreq.w	r3, r3, #1
 80028ae:	3018      	adds	r0, #24
 80028b0:	4282      	cmp	r2, r0
 80028b2:	bf08      	it	eq
 80028b4:	f043 0301 	orreq.w	r3, r3, #1
 80028b8:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 80028bc:	4282      	cmp	r2, r0
 80028be:	bf08      	it	eq
 80028c0:	f043 0301 	orreq.w	r3, r3, #1
 80028c4:	3018      	adds	r0, #24
 80028c6:	4282      	cmp	r2, r0
 80028c8:	bf08      	it	eq
 80028ca:	f043 0301 	orreq.w	r3, r3, #1
 80028ce:	3018      	adds	r0, #24
 80028d0:	4282      	cmp	r2, r0
 80028d2:	bf08      	it	eq
 80028d4:	f043 0301 	orreq.w	r3, r3, #1
 80028d8:	3018      	adds	r0, #24
 80028da:	4282      	cmp	r2, r0
 80028dc:	bf08      	it	eq
 80028de:	f043 0301 	orreq.w	r3, r3, #1
 80028e2:	3018      	adds	r0, #24
 80028e4:	4282      	cmp	r2, r0
 80028e6:	bf08      	it	eq
 80028e8:	f043 0301 	orreq.w	r3, r3, #1
 80028ec:	3018      	adds	r0, #24
 80028ee:	4282      	cmp	r2, r0
 80028f0:	bf08      	it	eq
 80028f2:	f043 0301 	orreq.w	r3, r3, #1
 80028f6:	3018      	adds	r0, #24
 80028f8:	4282      	cmp	r2, r0
 80028fa:	bf08      	it	eq
 80028fc:	f043 0301 	orreq.w	r3, r3, #1
 8002900:	b91b      	cbnz	r3, 800290a <HAL_DMA_IRQHandler+0xb6>
 8002902:	4b6d      	ldr	r3, [pc, #436]	@ (8002ab8 <HAL_DMA_IRQHandler+0x264>)
 8002904:	429a      	cmp	r2, r3
 8002906:	f040 812f 	bne.w	8002b68 <HAL_DMA_IRQHandler+0x314>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800290a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800290c:	2108      	movs	r1, #8
 800290e:	f003 031f 	and.w	r3, r3, #31
 8002912:	4099      	lsls	r1, r3
 8002914:	4221      	tst	r1, r4
 8002916:	d00b      	beq.n	8002930 <HAL_DMA_IRQHandler+0xdc>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002918:	6810      	ldr	r0, [r2, #0]
 800291a:	0740      	lsls	r0, r0, #29
 800291c:	d508      	bpl.n	8002930 <HAL_DMA_IRQHandler+0xdc>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800291e:	6810      	ldr	r0, [r2, #0]
 8002920:	f020 0004 	bic.w	r0, r0, #4
 8002924:	6010      	str	r0, [r2, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002926:	60a9      	str	r1, [r5, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002928:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800292a:	f041 0101 	orr.w	r1, r1, #1
 800292e:	6579      	str	r1, [r7, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002930:	fa24 f103 	lsr.w	r1, r4, r3
 8002934:	07c8      	lsls	r0, r1, #31
 8002936:	d509      	bpl.n	800294c <HAL_DMA_IRQHandler+0xf8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002938:	6951      	ldr	r1, [r2, #20]
 800293a:	0609      	lsls	r1, r1, #24
 800293c:	d506      	bpl.n	800294c <HAL_DMA_IRQHandler+0xf8>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800293e:	2101      	movs	r1, #1
 8002940:	4099      	lsls	r1, r3
 8002942:	60a9      	str	r1, [r5, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002944:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002946:	f041 0102 	orr.w	r1, r1, #2
 800294a:	6579      	str	r1, [r7, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800294c:	2104      	movs	r1, #4
 800294e:	4099      	lsls	r1, r3
 8002950:	4221      	tst	r1, r4
 8002952:	d007      	beq.n	8002964 <HAL_DMA_IRQHandler+0x110>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002954:	6810      	ldr	r0, [r2, #0]
 8002956:	0780      	lsls	r0, r0, #30
 8002958:	d504      	bpl.n	8002964 <HAL_DMA_IRQHandler+0x110>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800295a:	60a9      	str	r1, [r5, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800295c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800295e:	f041 0104 	orr.w	r1, r1, #4
 8002962:	6579      	str	r1, [r7, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002964:	2110      	movs	r1, #16
 8002966:	4099      	lsls	r1, r3
 8002968:	4221      	tst	r1, r4
 800296a:	f000 80b0 	beq.w	8002ace <HAL_DMA_IRQHandler+0x27a>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800296e:	6810      	ldr	r0, [r2, #0]
 8002970:	0700      	lsls	r0, r0, #28
 8002972:	f140 80ac 	bpl.w	8002ace <HAL_DMA_IRQHandler+0x27a>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002976:	60a9      	str	r1, [r5, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002978:	6811      	ldr	r1, [r2, #0]
 800297a:	f411 2f80 	tst.w	r1, #262144	@ 0x40000
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800297e:	6811      	ldr	r1, [r2, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002980:	f040 809e 	bne.w	8002ac0 <HAL_DMA_IRQHandler+0x26c>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002984:	05c9      	lsls	r1, r1, #23
 8002986:	d403      	bmi.n	8002990 <HAL_DMA_IRQHandler+0x13c>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002988:	6811      	ldr	r1, [r2, #0]
 800298a:	f021 0108 	bic.w	r1, r1, #8
 800298e:	6011      	str	r1, [r2, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002990:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002992:	2900      	cmp	r1, #0
 8002994:	f000 809b 	beq.w	8002ace <HAL_DMA_IRQHandler+0x27a>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002998:	4638      	mov	r0, r7
 800299a:	4788      	blx	r1
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800299c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800299e:	2120      	movs	r1, #32
 80029a0:	f003 031f 	and.w	r3, r3, #31
 80029a4:	4099      	lsls	r1, r3
 80029a6:	4221      	tst	r1, r4
 80029a8:	d053      	beq.n	8002a52 <HAL_DMA_IRQHandler+0x1fe>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80029aa:	683a      	ldr	r2, [r7, #0]
 80029ac:	4840      	ldr	r0, [pc, #256]	@ (8002ab0 <HAL_DMA_IRQHandler+0x25c>)
 80029ae:	4c41      	ldr	r4, [pc, #260]	@ (8002ab4 <HAL_DMA_IRQHandler+0x260>)
 80029b0:	42a2      	cmp	r2, r4
 80029b2:	bf18      	it	ne
 80029b4:	4282      	cmpne	r2, r0
 80029b6:	f104 0418 	add.w	r4, r4, #24
 80029ba:	bf0c      	ite	eq
 80029bc:	2001      	moveq	r0, #1
 80029be:	2000      	movne	r0, #0
 80029c0:	42a2      	cmp	r2, r4
 80029c2:	bf08      	it	eq
 80029c4:	f040 0001 	orreq.w	r0, r0, #1
 80029c8:	3418      	adds	r4, #24
 80029ca:	42a2      	cmp	r2, r4
 80029cc:	bf08      	it	eq
 80029ce:	f040 0001 	orreq.w	r0, r0, #1
 80029d2:	3418      	adds	r4, #24
 80029d4:	42a2      	cmp	r2, r4
 80029d6:	bf08      	it	eq
 80029d8:	f040 0001 	orreq.w	r0, r0, #1
 80029dc:	3418      	adds	r4, #24
 80029de:	42a2      	cmp	r2, r4
 80029e0:	bf08      	it	eq
 80029e2:	f040 0001 	orreq.w	r0, r0, #1
 80029e6:	3418      	adds	r4, #24
 80029e8:	42a2      	cmp	r2, r4
 80029ea:	bf08      	it	eq
 80029ec:	f040 0001 	orreq.w	r0, r0, #1
 80029f0:	3418      	adds	r4, #24
 80029f2:	42a2      	cmp	r2, r4
 80029f4:	bf08      	it	eq
 80029f6:	f040 0001 	orreq.w	r0, r0, #1
 80029fa:	f504 7456 	add.w	r4, r4, #856	@ 0x358
 80029fe:	42a2      	cmp	r2, r4
 8002a00:	bf08      	it	eq
 8002a02:	f040 0001 	orreq.w	r0, r0, #1
 8002a06:	3418      	adds	r4, #24
 8002a08:	42a2      	cmp	r2, r4
 8002a0a:	bf08      	it	eq
 8002a0c:	f040 0001 	orreq.w	r0, r0, #1
 8002a10:	3418      	adds	r4, #24
 8002a12:	42a2      	cmp	r2, r4
 8002a14:	bf08      	it	eq
 8002a16:	f040 0001 	orreq.w	r0, r0, #1
 8002a1a:	3418      	adds	r4, #24
 8002a1c:	42a2      	cmp	r2, r4
 8002a1e:	bf08      	it	eq
 8002a20:	f040 0001 	orreq.w	r0, r0, #1
 8002a24:	3418      	adds	r4, #24
 8002a26:	42a2      	cmp	r2, r4
 8002a28:	bf08      	it	eq
 8002a2a:	f040 0001 	orreq.w	r0, r0, #1
 8002a2e:	3418      	adds	r4, #24
 8002a30:	42a2      	cmp	r2, r4
 8002a32:	bf08      	it	eq
 8002a34:	f040 0001 	orreq.w	r0, r0, #1
 8002a38:	3418      	adds	r4, #24
 8002a3a:	42a2      	cmp	r2, r4
 8002a3c:	bf08      	it	eq
 8002a3e:	f040 0001 	orreq.w	r0, r0, #1
 8002a42:	2800      	cmp	r0, #0
 8002a44:	d147      	bne.n	8002ad6 <HAL_DMA_IRQHandler+0x282>
 8002a46:	481c      	ldr	r0, [pc, #112]	@ (8002ab8 <HAL_DMA_IRQHandler+0x264>)
 8002a48:	4282      	cmp	r2, r0
 8002a4a:	d044      	beq.n	8002ad6 <HAL_DMA_IRQHandler+0x282>
 8002a4c:	6810      	ldr	r0, [r2, #0]
 8002a4e:	0780      	lsls	r0, r0, #30
 8002a50:	d444      	bmi.n	8002adc <HAL_DMA_IRQHandler+0x288>
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d070      	beq.n	8002b3a <HAL_DMA_IRQHandler+0x2e6>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002a58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a5a:	07dc      	lsls	r4, r3, #31
 8002a5c:	d51e      	bpl.n	8002a9c <HAL_DMA_IRQHandler+0x248>
      {
        hdma->State = HAL_DMA_STATE_ABORT;

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002a5e:	683a      	ldr	r2, [r7, #0]
        hdma->State = HAL_DMA_STATE_ABORT;
 8002a60:	2104      	movs	r1, #4
 8002a62:	f887 1035 	strb.w	r1, [r7, #53]	@ 0x35
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a66:	4915      	ldr	r1, [pc, #84]	@ (8002abc <HAL_DMA_IRQHandler+0x268>)
        __HAL_DMA_DISABLE(hdma);
 8002a68:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a6a:	fba1 6106 	umull	r6, r1, r1, r6
        __HAL_DMA_DISABLE(hdma);
 8002a6e:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a72:	0a89      	lsrs	r1, r1, #10
        __HAL_DMA_DISABLE(hdma);
 8002a74:	6013      	str	r3, [r2, #0]
 8002a76:	e002      	b.n	8002a7e <HAL_DMA_IRQHandler+0x22a>
          if (++count > timeout)
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002a78:	6813      	ldr	r3, [r2, #0]
 8002a7a:	07d8      	lsls	r0, r3, #31
 8002a7c:	d504      	bpl.n	8002a88 <HAL_DMA_IRQHandler+0x234>
          if (++count > timeout)
 8002a7e:	9b01      	ldr	r3, [sp, #4]
 8002a80:	3301      	adds	r3, #1
 8002a82:	428b      	cmp	r3, r1
 8002a84:	9301      	str	r3, [sp, #4]
 8002a86:	d9f7      	bls.n	8002a78 <HAL_DMA_IRQHandler+0x224>

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a88:	2300      	movs	r3, #0
 8002a8a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002a8e:	6813      	ldr	r3, [r2, #0]
 8002a90:	07db      	lsls	r3, r3, #31
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002a92:	bf4c      	ite	mi
 8002a94:	2303      	movmi	r3, #3
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002a96:	2301      	movpl	r3, #1
 8002a98:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8002a9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d04b      	beq.n	8002b3a <HAL_DMA_IRQHandler+0x2e6>
        }

        if(hdma->XferCpltCallback != NULL)
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002aa2:	4638      	mov	r0, r7
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002aa4:	b003      	add	sp, #12
 8002aa6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          hdma->XferCpltCallback(hdma);
 8002aaa:	4718      	bx	r3
 8002aac:	2400007c 	.word	0x2400007c
 8002ab0:	40020010 	.word	0x40020010
 8002ab4:	40020028 	.word	0x40020028
 8002ab8:	400204b8 	.word	0x400204b8
 8002abc:	1b4e81b5 	.word	0x1b4e81b5
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002ac0:	0308      	lsls	r0, r1, #12
 8002ac2:	f57f af65 	bpl.w	8002990 <HAL_DMA_IRQHandler+0x13c>
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002ac6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002ac8:	2900      	cmp	r1, #0
 8002aca:	f47f af65 	bne.w	8002998 <HAL_DMA_IRQHandler+0x144>
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002ace:	2120      	movs	r1, #32
 8002ad0:	4099      	lsls	r1, r3
 8002ad2:	420c      	tst	r4, r1
 8002ad4:	d0bd      	beq.n	8002a52 <HAL_DMA_IRQHandler+0x1fe>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002ad6:	6810      	ldr	r0, [r2, #0]
 8002ad8:	06c4      	lsls	r4, r0, #27
 8002ada:	d5ba      	bpl.n	8002a52 <HAL_DMA_IRQHandler+0x1fe>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002adc:	60a9      	str	r1, [r5, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ade:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 8002ae2:	2904      	cmp	r1, #4
 8002ae4:	d00e      	beq.n	8002b04 <HAL_DMA_IRQHandler+0x2b0>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002ae6:	6813      	ldr	r3, [r2, #0]
 8002ae8:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002aec:	6813      	ldr	r3, [r2, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002aee:	d026      	beq.n	8002b3e <HAL_DMA_IRQHandler+0x2ea>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002af0:	031d      	lsls	r5, r3, #12
 8002af2:	d531      	bpl.n	8002b58 <HAL_DMA_IRQHandler+0x304>
          if(hdma->XferCpltCallback != NULL)
 8002af4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d0ab      	beq.n	8002a52 <HAL_DMA_IRQHandler+0x1fe>
            hdma->XferCpltCallback(hdma);
 8002afa:	4638      	mov	r0, r7
 8002afc:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002afe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b00:	b1db      	cbz	r3, 8002b3a <HAL_DMA_IRQHandler+0x2e6>
 8002b02:	e7a9      	b.n	8002a58 <HAL_DMA_IRQHandler+0x204>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b04:	6811      	ldr	r1, [r2, #0]
 8002b06:	f021 0116 	bic.w	r1, r1, #22
 8002b0a:	6011      	str	r1, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002b0c:	6951      	ldr	r1, [r2, #20]
 8002b0e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8002b12:	6151      	str	r1, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b14:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002b16:	b319      	cbz	r1, 8002b60 <HAL_DMA_IRQHandler+0x30c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002b18:	6811      	ldr	r1, [r2, #0]
 8002b1a:	f021 0108 	bic.w	r1, r1, #8
 8002b1e:	6011      	str	r1, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002b20:	223f      	movs	r2, #63	@ 0x3f
          __HAL_UNLOCK(hdma);
 8002b22:	2100      	movs	r1, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
          hdma->State = HAL_DMA_STATE_READY;
 8002b28:	2201      	movs	r2, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002b2a:	60ab      	str	r3, [r5, #8]
          if(hdma->XferAbortCallback != NULL)
 8002b2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
          __HAL_UNLOCK(hdma);
 8002b2e:	f887 1034 	strb.w	r1, [r7, #52]	@ 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8002b32:	f887 2035 	strb.w	r2, [r7, #53]	@ 0x35
          if(hdma->XferAbortCallback != NULL)
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1b3      	bne.n	8002aa2 <HAL_DMA_IRQHandler+0x24e>
}
 8002b3a:	b003      	add	sp, #12
 8002b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002b3e:	f413 7380 	ands.w	r3, r3, #256	@ 0x100
 8002b42:	d1d7      	bne.n	8002af4 <HAL_DMA_IRQHandler+0x2a0>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002b44:	6811      	ldr	r1, [r2, #0]
 8002b46:	f021 0110 	bic.w	r1, r1, #16
 8002b4a:	6011      	str	r1, [r2, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8002b4c:	2201      	movs	r2, #1
            __HAL_UNLOCK(hdma);
 8002b4e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8002b52:	f887 2035 	strb.w	r2, [r7, #53]	@ 0x35
 8002b56:	e7cd      	b.n	8002af4 <HAL_DMA_IRQHandler+0x2a0>
            if(hdma->XferM1CpltCallback != NULL)
 8002b58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d1cd      	bne.n	8002afa <HAL_DMA_IRQHandler+0x2a6>
 8002b5e:	e778      	b.n	8002a52 <HAL_DMA_IRQHandler+0x1fe>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b60:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002b62:	2900      	cmp	r1, #0
 8002b64:	d1d8      	bne.n	8002b18 <HAL_DMA_IRQHandler+0x2c4>
 8002b66:	e7db      	b.n	8002b20 <HAL_DMA_IRQHandler+0x2cc>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002b68:	4b40      	ldr	r3, [pc, #256]	@ (8002c6c <HAL_DMA_IRQHandler+0x418>)
 8002b6a:	4841      	ldr	r0, [pc, #260]	@ (8002c70 <HAL_DMA_IRQHandler+0x41c>)
 8002b6c:	4282      	cmp	r2, r0
 8002b6e:	bf18      	it	ne
 8002b70:	429a      	cmpne	r2, r3
 8002b72:	f100 0014 	add.w	r0, r0, #20
 8002b76:	bf0c      	ite	eq
 8002b78:	2301      	moveq	r3, #1
 8002b7a:	2300      	movne	r3, #0
 8002b7c:	4282      	cmp	r2, r0
 8002b7e:	bf08      	it	eq
 8002b80:	f043 0301 	orreq.w	r3, r3, #1
 8002b84:	3014      	adds	r0, #20
 8002b86:	4282      	cmp	r2, r0
 8002b88:	bf08      	it	eq
 8002b8a:	f043 0301 	orreq.w	r3, r3, #1
 8002b8e:	3014      	adds	r0, #20
 8002b90:	4282      	cmp	r2, r0
 8002b92:	bf08      	it	eq
 8002b94:	f043 0301 	orreq.w	r3, r3, #1
 8002b98:	3014      	adds	r0, #20
 8002b9a:	4282      	cmp	r2, r0
 8002b9c:	bf08      	it	eq
 8002b9e:	f043 0301 	orreq.w	r3, r3, #1
 8002ba2:	3014      	adds	r0, #20
 8002ba4:	4282      	cmp	r2, r0
 8002ba6:	bf08      	it	eq
 8002ba8:	f043 0301 	orreq.w	r3, r3, #1
 8002bac:	b913      	cbnz	r3, 8002bb4 <HAL_DMA_IRQHandler+0x360>
 8002bae:	4b31      	ldr	r3, [pc, #196]	@ (8002c74 <HAL_DMA_IRQHandler+0x420>)
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d1c2      	bne.n	8002b3a <HAL_DMA_IRQHandler+0x2e6>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002bb4:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8002bb6:	2404      	movs	r4, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002bb8:	6813      	ldr	r3, [r2, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002bba:	f000 001f 	and.w	r0, r0, #31
 8002bbe:	4084      	lsls	r4, r0
 8002bc0:	420c      	tst	r4, r1
 8002bc2:	d00b      	beq.n	8002bdc <HAL_DMA_IRQHandler+0x388>
 8002bc4:	075e      	lsls	r6, r3, #29
 8002bc6:	d509      	bpl.n	8002bdc <HAL_DMA_IRQHandler+0x388>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002bc8:	0419      	lsls	r1, r3, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002bca:	606c      	str	r4, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002bcc:	d532      	bpl.n	8002c34 <HAL_DMA_IRQHandler+0x3e0>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002bce:	03da      	lsls	r2, r3, #15
 8002bd0:	d436      	bmi.n	8002c40 <HAL_DMA_IRQHandler+0x3ec>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002bd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f47f af64 	bne.w	8002aa2 <HAL_DMA_IRQHandler+0x24e>
 8002bda:	e7ae      	b.n	8002b3a <HAL_DMA_IRQHandler+0x2e6>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002bdc:	2402      	movs	r4, #2
 8002bde:	4084      	lsls	r4, r0
 8002be0:	420c      	tst	r4, r1
 8002be2:	d00b      	beq.n	8002bfc <HAL_DMA_IRQHandler+0x3a8>
 8002be4:	079e      	lsls	r6, r3, #30
 8002be6:	d509      	bpl.n	8002bfc <HAL_DMA_IRQHandler+0x3a8>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002be8:	0419      	lsls	r1, r3, #16
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002bea:	606c      	str	r4, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002bec:	d52d      	bpl.n	8002c4a <HAL_DMA_IRQHandler+0x3f6>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002bee:	03da      	lsls	r2, r3, #15
 8002bf0:	d437      	bmi.n	8002c62 <HAL_DMA_IRQHandler+0x40e>
          if(hdma->XferM1CpltCallback != NULL)
 8002bf2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f47f af54 	bne.w	8002aa2 <HAL_DMA_IRQHandler+0x24e>
 8002bfa:	e79e      	b.n	8002b3a <HAL_DMA_IRQHandler+0x2e6>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002bfc:	2408      	movs	r4, #8
 8002bfe:	4084      	lsls	r4, r0
 8002c00:	420c      	tst	r4, r1
 8002c02:	d09a      	beq.n	8002b3a <HAL_DMA_IRQHandler+0x2e6>
 8002c04:	071b      	lsls	r3, r3, #28
 8002c06:	d598      	bpl.n	8002b3a <HAL_DMA_IRQHandler+0x2e6>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c08:	6813      	ldr	r3, [r2, #0]
      __HAL_UNLOCK(hdma);
 8002c0a:	2100      	movs	r1, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c0c:	f023 030e 	bic.w	r3, r3, #14
 8002c10:	6013      	str	r3, [r2, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002c12:	2301      	movs	r3, #1
      if (hdma->XferErrorCallback != NULL)
 8002c14:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002c16:	fa03 f000 	lsl.w	r0, r3, r0
 8002c1a:	6068      	str	r0, [r5, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c1c:	657b      	str	r3, [r7, #84]	@ 0x54
      __HAL_UNLOCK(hdma);
 8002c1e:	f887 1034 	strb.w	r1, [r7, #52]	@ 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8002c22:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
      if (hdma->XferErrorCallback != NULL)
 8002c26:	2a00      	cmp	r2, #0
 8002c28:	d087      	beq.n	8002b3a <HAL_DMA_IRQHandler+0x2e6>
        hdma->XferErrorCallback(hdma);
 8002c2a:	4638      	mov	r0, r7
}
 8002c2c:	b003      	add	sp, #12
 8002c2e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        hdma->XferErrorCallback(hdma);
 8002c32:	4710      	bx	r2
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002c34:	069b      	lsls	r3, r3, #26
 8002c36:	d403      	bmi.n	8002c40 <HAL_DMA_IRQHandler+0x3ec>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c38:	6813      	ldr	r3, [r2, #0]
 8002c3a:	f023 0304 	bic.w	r3, r3, #4
 8002c3e:	6013      	str	r3, [r2, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8002c40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f47f af2d 	bne.w	8002aa2 <HAL_DMA_IRQHandler+0x24e>
 8002c48:	e777      	b.n	8002b3a <HAL_DMA_IRQHandler+0x2e6>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002c4a:	f013 0320 	ands.w	r3, r3, #32
 8002c4e:	d108      	bne.n	8002c62 <HAL_DMA_IRQHandler+0x40e>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002c50:	6811      	ldr	r1, [r2, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8002c52:	2001      	movs	r0, #1
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002c54:	f021 010a 	bic.w	r1, r1, #10
 8002c58:	6011      	str	r1, [r2, #0]
          __HAL_UNLOCK(hdma);
 8002c5a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8002c5e:	f887 0035 	strb.w	r0, [r7, #53]	@ 0x35
        if(hdma->XferCpltCallback != NULL)
 8002c62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f47f af1c 	bne.w	8002aa2 <HAL_DMA_IRQHandler+0x24e>
 8002c6a:	e766      	b.n	8002b3a <HAL_DMA_IRQHandler+0x2e6>
 8002c6c:	58025408 	.word	0x58025408
 8002c70:	5802541c 	.word	0x5802541c
 8002c74:	58025494 	.word	0x58025494

08002c78 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002c78:	680b      	ldr	r3, [r1, #0]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	f000 81ed 	beq.w	800305a <HAL_GPIO_Init+0x3e2>
 8002c80:	4a80      	ldr	r2, [pc, #512]	@ (8002e84 <HAL_GPIO_Init+0x20c>)
 8002c82:	4290      	cmp	r0, r2
  uint32_t position = 0x00U;
 8002c84:	f04f 0200 	mov.w	r2, #0
{
 8002c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002c8c:	f04f 0901 	mov.w	r9, #1
{
 8002c90:	b085      	sub	sp, #20
 8002c92:	f000 80f3 	beq.w	8002e7c <HAL_GPIO_Init+0x204>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002c96:	f04f 48b0 	mov.w	r8, #1476395008	@ 0x58000000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002c9a:	9301      	str	r3, [sp, #4]
 8002c9c:	e03c      	b.n	8002d18 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR;
 8002c9e:	f8d0 b008 	ldr.w	fp, [r0, #8]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ca2:	2f02      	cmp	r7, #2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ca4:	68cb      	ldr	r3, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002ca6:	ea0b 0b06 	and.w	fp, fp, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002caa:	fa03 fa0c 	lsl.w	sl, r3, ip
 8002cae:	ea4a 0a0b 	orr.w	sl, sl, fp
        GPIOx->OSPEEDR = temp;
 8002cb2:	f8c0 a008 	str.w	sl, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002cb6:	ea4f 1a15 	mov.w	sl, r5, lsr #4
        temp = GPIOx->OTYPER;
 8002cba:	f8d0 b004 	ldr.w	fp, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002cbe:	fa0a fa02 	lsl.w	sl, sl, r2
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002cc2:	ea2b 0404 	bic.w	r4, fp, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002cc6:	ea4a 0404 	orr.w	r4, sl, r4
        GPIOx->OTYPER = temp;
 8002cca:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8002ccc:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002cce:	ea04 0406 	and.w	r4, r4, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cd2:	ea44 040e 	orr.w	r4, r4, lr
      GPIOx->PUPDR = temp;
 8002cd6:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cd8:	f040 80c7 	bne.w	8002e6a <HAL_GPIO_Init+0x1f2>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cdc:	fa07 f70c 	lsl.w	r7, r7, ip
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002ce0:	f002 0407 	and.w	r4, r2, #7
        temp = GPIOx->AFR[position >> 3U];
 8002ce4:	ea4f 0cd2 	mov.w	ip, r2, lsr #3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002ce8:	690d      	ldr	r5, [r1, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002cea:	00a4      	lsls	r4, r4, #2
 8002cec:	230f      	movs	r3, #15
 8002cee:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002cf2:	40a5      	lsls	r5, r4
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002cf4:	fa03 f404 	lsl.w	r4, r3, r4
        temp = GPIOx->AFR[position >> 3U];
 8002cf8:	f8dc e020 	ldr.w	lr, [ip, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002cfc:	ea2e 0404 	bic.w	r4, lr, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002d00:	4325      	orrs	r5, r4
        GPIOx->AFR[position >> 3U] = temp;
 8002d02:	f8cc 5020 	str.w	r5, [ip, #32]
      temp = GPIOx->MODER;
 8002d06:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002d08:	4034      	ands	r4, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d0a:	4327      	orrs	r7, r4
      GPIOx->MODER = temp;
 8002d0c:	6007      	str	r7, [r0, #0]
        }
        EXTI->FTSR1 = temp;
      }
    }

    position++;
 8002d0e:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002d10:	9b01      	ldr	r3, [sp, #4]
 8002d12:	fa33 f402 	lsrs.w	r4, r3, r2
 8002d16:	d074      	beq.n	8002e02 <HAL_GPIO_Init+0x18a>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002d18:	fa09 f402 	lsl.w	r4, r9, r2
    if (iocurrent != 0x00U)
 8002d1c:	9b01      	ldr	r3, [sp, #4]
 8002d1e:	ea14 0a03 	ands.w	sl, r4, r3
 8002d22:	d0f4      	beq.n	8002d0e <HAL_GPIO_Init+0x96>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d24:	684d      	ldr	r5, [r1, #4]
 8002d26:	ea4f 0c42 	mov.w	ip, r2, lsl #1
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d2a:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002d2c:	2303      	movs	r3, #3
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d2e:	f025 0710 	bic.w	r7, r5, #16
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d32:	fa06 fe0c 	lsl.w	lr, r6, ip
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002d36:	fa03 f60c 	lsl.w	r6, r3, ip
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d3a:	f107 3bff 	add.w	fp, r7, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002d3e:	43f6      	mvns	r6, r6
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d40:	f1bb 0f01 	cmp.w	fp, #1
 8002d44:	d9ab      	bls.n	8002c9e <HAL_GPIO_Init+0x26>
      temp = GPIOx->PUPDR;
 8002d46:	68c4      	ldr	r4, [r0, #12]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d48:	00eb      	lsls	r3, r5, #3
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d4a:	ea04 0406 	and.w	r4, r4, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d4e:	ea44 040e 	orr.w	r4, r4, lr
      GPIOx->PUPDR = temp;
 8002d52:	60c4      	str	r4, [r0, #12]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d54:	f005 0403 	and.w	r4, r5, #3
      temp = GPIOx->MODER;
 8002d58:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d5a:	fa04 f40c 	lsl.w	r4, r4, ip
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002d5e:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d62:	ea44 0406 	orr.w	r4, r4, r6
      GPIOx->MODER = temp;
 8002d66:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d68:	d5d1      	bpl.n	8002d0e <HAL_GPIO_Init+0x96>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d6a:	4e47      	ldr	r6, [pc, #284]	@ (8002e88 <HAL_GPIO_Init+0x210>)
 8002d6c:	f022 0703 	bic.w	r7, r2, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002d70:	230f      	movs	r3, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d72:	f8d6 40f4 	ldr.w	r4, [r6, #244]	@ 0xf4
 8002d76:	f107 47b0 	add.w	r7, r7, #1476395008	@ 0x58000000
 8002d7a:	f044 0402 	orr.w	r4, r4, #2
 8002d7e:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8002d82:	f8c6 40f4 	str.w	r4, [r6, #244]	@ 0xf4
 8002d86:	f8d6 40f4 	ldr.w	r4, [r6, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002d8a:	f002 0603 	and.w	r6, r2, #3
 8002d8e:	00b6      	lsls	r6, r6, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d90:	f004 0402 	and.w	r4, r4, #2
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002d94:	fa03 fc06 	lsl.w	ip, r3, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002d98:	4b3c      	ldr	r3, [pc, #240]	@ (8002e8c <HAL_GPIO_Init+0x214>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d9a:	9403      	str	r4, [sp, #12]
 8002d9c:	9c03      	ldr	r4, [sp, #12]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002d9e:	4298      	cmp	r0, r3
        temp = SYSCFG->EXTICR[position >> 2U];
 8002da0:	68bc      	ldr	r4, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002da2:	ea24 040c 	bic.w	r4, r4, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002da6:	d05c      	beq.n	8002e62 <HAL_GPIO_Init+0x1ea>
 8002da8:	4b39      	ldr	r3, [pc, #228]	@ (8002e90 <HAL_GPIO_Init+0x218>)
 8002daa:	4298      	cmp	r0, r3
 8002dac:	d02c      	beq.n	8002e08 <HAL_GPIO_Init+0x190>
 8002dae:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 8002e94 <HAL_GPIO_Init+0x21c>
 8002db2:	4560      	cmp	r0, ip
 8002db4:	f000 8143 	beq.w	800303e <HAL_GPIO_Init+0x3c6>
 8002db8:	f8df c0dc 	ldr.w	ip, [pc, #220]	@ 8002e98 <HAL_GPIO_Init+0x220>
 8002dbc:	4560      	cmp	r0, ip
 8002dbe:	f000 814d 	beq.w	800305c <HAL_GPIO_Init+0x3e4>
 8002dc2:	f8df c0d8 	ldr.w	ip, [pc, #216]	@ 8002e9c <HAL_GPIO_Init+0x224>
 8002dc6:	4560      	cmp	r0, ip
 8002dc8:	f000 8133 	beq.w	8003032 <HAL_GPIO_Init+0x3ba>
 8002dcc:	f8df c0d0 	ldr.w	ip, [pc, #208]	@ 8002ea0 <HAL_GPIO_Init+0x228>
 8002dd0:	4560      	cmp	r0, ip
 8002dd2:	f000 8149 	beq.w	8003068 <HAL_GPIO_Init+0x3f0>
 8002dd6:	f8df c0cc 	ldr.w	ip, [pc, #204]	@ 8002ea4 <HAL_GPIO_Init+0x22c>
 8002dda:	4560      	cmp	r0, ip
 8002ddc:	f000 814a 	beq.w	8003074 <HAL_GPIO_Init+0x3fc>
 8002de0:	f8df c0c4 	ldr.w	ip, [pc, #196]	@ 8002ea8 <HAL_GPIO_Init+0x230>
 8002de4:	4560      	cmp	r0, ip
 8002de6:	f000 814b 	beq.w	8003080 <HAL_GPIO_Init+0x408>
 8002dea:	f8df c0c0 	ldr.w	ip, [pc, #192]	@ 8002eac <HAL_GPIO_Init+0x234>
 8002dee:	4560      	cmp	r0, ip
 8002df0:	bf0c      	ite	eq
 8002df2:	f04f 0c09 	moveq.w	ip, #9
 8002df6:	f04f 0c0a 	movne.w	ip, #10
 8002dfa:	fa0c f606 	lsl.w	r6, ip, r6
 8002dfe:	4334      	orrs	r4, r6
 8002e00:	e007      	b.n	8002e12 <HAL_GPIO_Init+0x19a>
  }
}
 8002e02:	b005      	add	sp, #20
 8002e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002e08:	f04f 0c02 	mov.w	ip, #2
 8002e0c:	fa0c f606 	lsl.w	r6, ip, r6
 8002e10:	4334      	orrs	r4, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e12:	60bc      	str	r4, [r7, #8]
        temp &= ~(iocurrent);
 8002e14:	ea6f 060a 	mvn.w	r6, sl
        temp = EXTI_CurrentCPU->IMR1;
 8002e18:	f8d8 4080 	ldr.w	r4, [r8, #128]	@ 0x80
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e1c:	03ef      	lsls	r7, r5, #15
        temp &= ~(iocurrent);
 8002e1e:	bf54      	ite	pl
 8002e20:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8002e22:	ea4a 0404 	orrmi.w	r4, sl, r4
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e26:	03ab      	lsls	r3, r5, #14
        EXTI_CurrentCPU->IMR1 = temp;
 8002e28:	f8c8 4080 	str.w	r4, [r8, #128]	@ 0x80
        temp = EXTI_CurrentCPU->EMR1;
 8002e2c:	f8d8 4084 	ldr.w	r4, [r8, #132]	@ 0x84
        temp &= ~(iocurrent);
 8002e30:	bf54      	ite	pl
 8002e32:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8002e34:	ea4a 0404 	orrmi.w	r4, sl, r4
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e38:	02ef      	lsls	r7, r5, #11
        EXTI_CurrentCPU->EMR1 = temp;
 8002e3a:	f8c8 4084 	str.w	r4, [r8, #132]	@ 0x84
        temp = EXTI->RTSR1;
 8002e3e:	f8d8 4000 	ldr.w	r4, [r8]
        temp &= ~(iocurrent);
 8002e42:	bf54      	ite	pl
 8002e44:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8002e46:	ea4a 0404 	orrmi.w	r4, sl, r4
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e4a:	02ad      	lsls	r5, r5, #10
        EXTI->RTSR1 = temp;
 8002e4c:	f8c8 4000 	str.w	r4, [r8]
        temp = EXTI->FTSR1;
 8002e50:	f8d8 4004 	ldr.w	r4, [r8, #4]
        temp &= ~(iocurrent);
 8002e54:	bf54      	ite	pl
 8002e56:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8002e58:	ea4a 0404 	orrmi.w	r4, sl, r4
        EXTI->FTSR1 = temp;
 8002e5c:	f8c8 4004 	str.w	r4, [r8, #4]
 8002e60:	e755      	b.n	8002d0e <HAL_GPIO_Init+0x96>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002e62:	fa09 f606 	lsl.w	r6, r9, r6
 8002e66:	4334      	orrs	r4, r6
 8002e68:	e7d3      	b.n	8002e12 <HAL_GPIO_Init+0x19a>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e6a:	f005 0403 	and.w	r4, r5, #3
      temp = GPIOx->MODER;
 8002e6e:	6805      	ldr	r5, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e70:	fa04 f40c 	lsl.w	r4, r4, ip
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002e74:	402e      	ands	r6, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e76:	4334      	orrs	r4, r6
      GPIOx->MODER = temp;
 8002e78:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e7a:	e748      	b.n	8002d0e <HAL_GPIO_Init+0x96>
        temp = EXTI_CurrentCPU->IMR1;
 8002e7c:	f04f 47b0 	mov.w	r7, #1476395008	@ 0x58000000
 8002e80:	e057      	b.n	8002f32 <HAL_GPIO_Init+0x2ba>
 8002e82:	bf00      	nop
 8002e84:	58020000 	.word	0x58020000
 8002e88:	58024400 	.word	0x58024400
 8002e8c:	58020400 	.word	0x58020400
 8002e90:	58020800 	.word	0x58020800
 8002e94:	58020c00 	.word	0x58020c00
 8002e98:	58021000 	.word	0x58021000
 8002e9c:	58021400 	.word	0x58021400
 8002ea0:	58021800 	.word	0x58021800
 8002ea4:	58021c00 	.word	0x58021c00
 8002ea8:	58022000 	.word	0x58022000
 8002eac:	58022400 	.word	0x58022400
        temp = GPIOx->OSPEEDR;
 8002eb0:	f8d0 b008 	ldr.w	fp, [r0, #8]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002eb4:	f1bc 0f02 	cmp.w	ip, #2
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002eb8:	ea06 0b0b 	and.w	fp, r6, fp
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ebc:	68ce      	ldr	r6, [r1, #12]
 8002ebe:	fa06 f80e 	lsl.w	r8, r6, lr
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ec2:	9e01      	ldr	r6, [sp, #4]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ec4:	ea48 080b 	orr.w	r8, r8, fp
        GPIOx->OSPEEDR = temp;
 8002ec8:	f8c0 8008 	str.w	r8, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002ecc:	ea4f 1815 	mov.w	r8, r5, lsr #4
        temp = GPIOx->OTYPER;
 8002ed0:	f8d0 b004 	ldr.w	fp, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002ed4:	fa08 f802 	lsl.w	r8, r8, r2
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ed8:	ea2b 0404 	bic.w	r4, fp, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002edc:	ea48 0404 	orr.w	r4, r8, r4
        GPIOx->OTYPER = temp;
 8002ee0:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8002ee2:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ee4:	ea04 0406 	and.w	r4, r4, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ee8:	ea4a 0404 	orr.w	r4, sl, r4
      GPIOx->PUPDR = temp;
 8002eec:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002eee:	f040 80ab 	bne.w	8003048 <HAL_GPIO_Init+0x3d0>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ef2:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002ef6:	f002 0407 	and.w	r4, r2, #7
        temp = GPIOx->AFR[position >> 3U];
 8002efa:	ea4f 0ed2 	mov.w	lr, r2, lsr #3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002efe:	690d      	ldr	r5, [r1, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002f00:	00a4      	lsls	r4, r4, #2
 8002f02:	260f      	movs	r6, #15
 8002f04:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002f08:	40a5      	lsls	r5, r4
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002f0a:	fa06 f404 	lsl.w	r4, r6, r4
        temp = GPIOx->AFR[position >> 3U];
 8002f0e:	f8de 8020 	ldr.w	r8, [lr, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002f12:	ea28 0404 	bic.w	r4, r8, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002f16:	4325      	orrs	r5, r4
        GPIOx->AFR[position >> 3U] = temp;
 8002f18:	f8ce 5020 	str.w	r5, [lr, #32]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002f1c:	9d01      	ldr	r5, [sp, #4]
      temp = GPIOx->MODER;
 8002f1e:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002f20:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f22:	ea4c 0404 	orr.w	r4, ip, r4
      GPIOx->MODER = temp;
 8002f26:	6004      	str	r4, [r0, #0]
    position++;
 8002f28:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002f2a:	fa33 f402 	lsrs.w	r4, r3, r2
 8002f2e:	f43f af68 	beq.w	8002e02 <HAL_GPIO_Init+0x18a>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002f32:	fa09 f402 	lsl.w	r4, r9, r2
    if (iocurrent != 0x00U)
 8002f36:	ea13 0804 	ands.w	r8, r3, r4
 8002f3a:	d0f5      	beq.n	8002f28 <HAL_GPIO_Init+0x2b0>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f3c:	ea4f 0e42 	mov.w	lr, r2, lsl #1
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f40:	688e      	ldr	r6, [r1, #8]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f42:	684d      	ldr	r5, [r1, #4]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f44:	fa06 fa0e 	lsl.w	sl, r6, lr
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002f48:	2603      	movs	r6, #3
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f4a:	f025 0c10 	bic.w	ip, r5, #16
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002f4e:	fa06 f60e 	lsl.w	r6, r6, lr
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f52:	f10c 3bff 	add.w	fp, ip, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002f56:	43f6      	mvns	r6, r6
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f58:	f1bb 0f01 	cmp.w	fp, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002f5c:	9601      	str	r6, [sp, #4]
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f5e:	d9a7      	bls.n	8002eb0 <HAL_GPIO_Init+0x238>
      temp = GPIOx->PUPDR;
 8002f60:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f62:	4034      	ands	r4, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f64:	ea44 040a 	orr.w	r4, r4, sl
      GPIOx->PUPDR = temp;
 8002f68:	60c4      	str	r4, [r0, #12]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f6a:	f005 0403 	and.w	r4, r5, #3
      temp = GPIOx->MODER;
 8002f6e:	f8d0 c000 	ldr.w	ip, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f72:	fa04 f40e 	lsl.w	r4, r4, lr
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002f76:	ea0c 0606 	and.w	r6, ip, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f7a:	4334      	orrs	r4, r6
      GPIOx->MODER = temp;
 8002f7c:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f7e:	00ec      	lsls	r4, r5, #3
 8002f80:	d5d2      	bpl.n	8002f28 <HAL_GPIO_Init+0x2b0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f82:	4e42      	ldr	r6, [pc, #264]	@ (800308c <HAL_GPIO_Init+0x414>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002f84:	f04f 0c0f 	mov.w	ip, #15
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f88:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f8c:	f8d6 40f4 	ldr.w	r4, [r6, #244]	@ 0xf4
 8002f90:	f044 0402 	orr.w	r4, r4, #2
 8002f94:	f8c6 40f4 	str.w	r4, [r6, #244]	@ 0xf4
 8002f98:	f8d6 40f4 	ldr.w	r4, [r6, #244]	@ 0xf4
 8002f9c:	f022 0603 	bic.w	r6, r2, #3
 8002fa0:	f004 0402 	and.w	r4, r4, #2
 8002fa4:	f106 46b0 	add.w	r6, r6, #1476395008	@ 0x58000000
 8002fa8:	9403      	str	r4, [sp, #12]
 8002faa:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8002fae:	9c03      	ldr	r4, [sp, #12]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002fb0:	f002 0403 	and.w	r4, r2, #3
 8002fb4:	ea4f 0484 	mov.w	r4, r4, lsl #2
 8002fb8:	fa0c f404 	lsl.w	r4, ip, r4
        temp = SYSCFG->EXTICR[position >> 2U];
 8002fbc:	f8d6 c008 	ldr.w	ip, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002fc0:	ea2c 0404 	bic.w	r4, ip, r4
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fc4:	60b4      	str	r4, [r6, #8]
        temp &= ~(iocurrent);
 8002fc6:	ea6f 0608 	mvn.w	r6, r8
        temp = EXTI_CurrentCPU->IMR1;
 8002fca:	f8d7 4080 	ldr.w	r4, [r7, #128]	@ 0x80
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fce:	d116      	bne.n	8002ffe <HAL_GPIO_Init+0x386>
        temp &= ~(iocurrent);
 8002fd0:	4034      	ands	r4, r6
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fd2:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
        EXTI_CurrentCPU->IMR1 = temp;
 8002fd6:	f8c7 4080 	str.w	r4, [r7, #128]	@ 0x80
        temp = EXTI_CurrentCPU->EMR1;
 8002fda:	f8d7 4084 	ldr.w	r4, [r7, #132]	@ 0x84
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fde:	d117      	bne.n	8003010 <HAL_GPIO_Init+0x398>
        temp &= ~(iocurrent);
 8002fe0:	4034      	ands	r4, r6
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fe2:	f415 1f80 	tst.w	r5, #1048576	@ 0x100000
        EXTI_CurrentCPU->EMR1 = temp;
 8002fe6:	f8c7 4084 	str.w	r4, [r7, #132]	@ 0x84
        temp = EXTI->RTSR1;
 8002fea:	683c      	ldr	r4, [r7, #0]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fec:	d118      	bne.n	8003020 <HAL_GPIO_Init+0x3a8>
        temp &= ~(iocurrent);
 8002fee:	4034      	ands	r4, r6
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ff0:	02ad      	lsls	r5, r5, #10
        EXTI->RTSR1 = temp;
 8002ff2:	603c      	str	r4, [r7, #0]
        temp = EXTI->FTSR1;
 8002ff4:	687c      	ldr	r4, [r7, #4]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ff6:	d419      	bmi.n	800302c <HAL_GPIO_Init+0x3b4>
        temp &= ~(iocurrent);
 8002ff8:	4034      	ands	r4, r6
        EXTI->FTSR1 = temp;
 8002ffa:	607c      	str	r4, [r7, #4]
 8002ffc:	e794      	b.n	8002f28 <HAL_GPIO_Init+0x2b0>
          temp |= iocurrent;
 8002ffe:	ea44 0408 	orr.w	r4, r4, r8
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003002:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
        EXTI_CurrentCPU->IMR1 = temp;
 8003006:	f8c7 4080 	str.w	r4, [r7, #128]	@ 0x80
        temp = EXTI_CurrentCPU->EMR1;
 800300a:	f8d7 4084 	ldr.w	r4, [r7, #132]	@ 0x84
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800300e:	d0e7      	beq.n	8002fe0 <HAL_GPIO_Init+0x368>
          temp |= iocurrent;
 8003010:	ea44 0408 	orr.w	r4, r4, r8
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003014:	f415 1f80 	tst.w	r5, #1048576	@ 0x100000
        EXTI_CurrentCPU->EMR1 = temp;
 8003018:	f8c7 4084 	str.w	r4, [r7, #132]	@ 0x84
        temp = EXTI->RTSR1;
 800301c:	683c      	ldr	r4, [r7, #0]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800301e:	d0e6      	beq.n	8002fee <HAL_GPIO_Init+0x376>
          temp |= iocurrent;
 8003020:	ea48 0404 	orr.w	r4, r8, r4
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003024:	02ad      	lsls	r5, r5, #10
        EXTI->RTSR1 = temp;
 8003026:	603c      	str	r4, [r7, #0]
        temp = EXTI->FTSR1;
 8003028:	687c      	ldr	r4, [r7, #4]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800302a:	d5e5      	bpl.n	8002ff8 <HAL_GPIO_Init+0x380>
          temp |= iocurrent;
 800302c:	ea48 0404 	orr.w	r4, r8, r4
 8003030:	e7e3      	b.n	8002ffa <HAL_GPIO_Init+0x382>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003032:	f04f 0c05 	mov.w	ip, #5
 8003036:	fa0c f606 	lsl.w	r6, ip, r6
 800303a:	4334      	orrs	r4, r6
 800303c:	e6e9      	b.n	8002e12 <HAL_GPIO_Init+0x19a>
 800303e:	2303      	movs	r3, #3
 8003040:	fa03 f606 	lsl.w	r6, r3, r6
 8003044:	4334      	orrs	r4, r6
 8003046:	e6e4      	b.n	8002e12 <HAL_GPIO_Init+0x19a>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003048:	f005 0403 	and.w	r4, r5, #3
      temp = GPIOx->MODER;
 800304c:	6805      	ldr	r5, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800304e:	fa04 f40e 	lsl.w	r4, r4, lr
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003052:	402e      	ands	r6, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003054:	4334      	orrs	r4, r6
      GPIOx->MODER = temp;
 8003056:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003058:	e766      	b.n	8002f28 <HAL_GPIO_Init+0x2b0>
 800305a:	4770      	bx	lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800305c:	f04f 0c04 	mov.w	ip, #4
 8003060:	fa0c f606 	lsl.w	r6, ip, r6
 8003064:	4334      	orrs	r4, r6
 8003066:	e6d4      	b.n	8002e12 <HAL_GPIO_Init+0x19a>
 8003068:	f04f 0c06 	mov.w	ip, #6
 800306c:	fa0c f606 	lsl.w	r6, ip, r6
 8003070:	4334      	orrs	r4, r6
 8003072:	e6ce      	b.n	8002e12 <HAL_GPIO_Init+0x19a>
 8003074:	f04f 0c07 	mov.w	ip, #7
 8003078:	fa0c f606 	lsl.w	r6, ip, r6
 800307c:	4334      	orrs	r4, r6
 800307e:	e6c8      	b.n	8002e12 <HAL_GPIO_Init+0x19a>
 8003080:	f04f 0c08 	mov.w	ip, #8
 8003084:	fa0c f606 	lsl.w	r6, ip, r6
 8003088:	4334      	orrs	r4, r6
 800308a:	e6c2      	b.n	8002e12 <HAL_GPIO_Init+0x19a>
 800308c:	58024400 	.word	0x58024400

08003090 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003090:	6903      	ldr	r3, [r0, #16]
 8003092:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8003094:	bf14      	ite	ne
 8003096:	2001      	movne	r0, #1
 8003098:	2000      	moveq	r0, #0
 800309a:	4770      	bx	lr

0800309c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800309c:	b902      	cbnz	r2, 80030a0 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800309e:	0409      	lsls	r1, r1, #16
 80030a0:	6181      	str	r1, [r0, #24]
  }
}
 80030a2:	4770      	bx	lr

080030a4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80030a4:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80030a6:	4c10      	ldr	r4, [pc, #64]	@ (80030e8 <HAL_PWREx_ConfigSupply+0x44>)
 80030a8:	68e3      	ldr	r3, [r4, #12]
 80030aa:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80030ae:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80030b0:	d105      	bne.n	80030be <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80030b2:	f003 0307 	and.w	r3, r3, #7
 80030b6:	1a18      	subs	r0, r3, r0
 80030b8:	bf18      	it	ne
 80030ba:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 80030bc:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80030be:	f023 0307 	bic.w	r3, r3, #7
 80030c2:	4303      	orrs	r3, r0
 80030c4:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
 80030c6:	f7ff f9ad 	bl	8002424 <HAL_GetTick>
 80030ca:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80030cc:	e005      	b.n	80030da <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80030ce:	f7ff f9a9 	bl	8002424 <HAL_GetTick>
 80030d2:	1b40      	subs	r0, r0, r5
 80030d4:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80030d8:	d804      	bhi.n	80030e4 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80030da:	6863      	ldr	r3, [r4, #4]
 80030dc:	049b      	lsls	r3, r3, #18
 80030de:	d5f6      	bpl.n	80030ce <HAL_PWREx_ConfigSupply+0x2a>
      return HAL_OK;
 80030e0:	2000      	movs	r0, #0
}
 80030e2:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 80030e4:	2001      	movs	r0, #1
}
 80030e6:	bd38      	pop	{r3, r4, r5, pc}
 80030e8:	58024800 	.word	0x58024800

080030ec <HAL_RCC_GetSysClockFreq.part.0>:
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80030ec:	4b33      	ldr	r3, [pc, #204]	@ (80031bc <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 80030ee:	b430      	push	{r4, r5}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80030f0:	6a99      	ldr	r1, [r3, #40]	@ 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80030f2:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80030f4:	6add      	ldr	r5, [r3, #44]	@ 0x2c
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));

    if (pllm != 0U)
 80030f6:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80030fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80030fc:	f3c4 1005 	ubfx	r0, r4, #4, #6
    if (pllm != 0U)
 8003100:	d036      	beq.n	8003170 <HAL_RCC_GetSysClockFreq.part.0+0x84>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003102:	f3c2 02cc 	ubfx	r2, r2, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003106:	f005 0501 	and.w	r5, r5, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800310a:	f001 0103 	and.w	r1, r1, #3
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800310e:	ee07 0a90 	vmov	s15, r0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003112:	fb05 f202 	mul.w	r2, r5, r2
      switch (pllsource)
 8003116:	2901      	cmp	r1, #1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003118:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800311c:	ee06 2a90 	vmov	s13, r2
 8003120:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
      switch (pllsource)
 8003124:	d002      	beq.n	800312c <HAL_RCC_GetSysClockFreq.part.0+0x40>
 8003126:	2902      	cmp	r1, #2
 8003128:	d042      	beq.n	80031b0 <HAL_RCC_GetSysClockFreq.part.0+0xc4>
 800312a:	b319      	cbz	r1, 8003174 <HAL_RCC_GetSysClockFreq.part.0+0x88>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800312c:	eddf 7a24 	vldr	s15, [pc, #144]	@ 80031c0 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 8003130:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8003134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800313a:	ee07 3a90 	vmov	s15, r3
 800313e:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8003142:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800314a:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800314e:	ee67 7a86 	vmul.f32	s15, s15, s12
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003152:	4b1a      	ldr	r3, [pc, #104]	@ (80031bc <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
 8003154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003156:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800315a:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800315c:	ee07 3a10 	vmov	s14, r3
 8003160:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8003164:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003168:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800316c:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8003170:	bc30      	pop	{r4, r5}
 8003172:	4770      	bx	lr
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	0692      	lsls	r2, r2, #26
 8003178:	d51d      	bpl.n	80031b6 <HAL_RCC_GetSysClockFreq.part.0+0xca>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800317a:	6819      	ldr	r1, [r3, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800317c:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003180:	4a10      	ldr	r2, [pc, #64]	@ (80031c4 <HAL_RCC_GetSysClockFreq.part.0+0xd8>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003184:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003188:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800318c:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800318e:	ee07 3a90 	vmov	s15, r3
 8003192:	ee06 2a10 	vmov	s12, r2
 8003196:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800319a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800319e:	ee77 6aa6 	vadd.f32	s13, s15, s13
 80031a2:	eec6 7a07 	vdiv.f32	s15, s12, s14
 80031a6:	ee36 7aa5 	vadd.f32	s14, s13, s11
 80031aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031ae:	e7d0      	b.n	8003152 <HAL_RCC_GetSysClockFreq.part.0+0x66>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80031b0:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80031c8 <HAL_RCC_GetSysClockFreq.part.0+0xdc>
 80031b4:	e7bc      	b.n	8003130 <HAL_RCC_GetSysClockFreq.part.0+0x44>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80031b6:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80031cc <HAL_RCC_GetSysClockFreq.part.0+0xe0>
 80031ba:	e7b9      	b.n	8003130 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 80031bc:	58024400 	.word	0x58024400
 80031c0:	4a742400 	.word	0x4a742400
 80031c4:	03d09000 	.word	0x03d09000
 80031c8:	4bbebc20 	.word	0x4bbebc20
 80031cc:	4c742400 	.word	0x4c742400

080031d0 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 80031d0:	2800      	cmp	r0, #0
 80031d2:	f000 82dc 	beq.w	800378e <HAL_RCC_OscConfig+0x5be>
{
 80031d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031d8:	6803      	ldr	r3, [r0, #0]
 80031da:	4604      	mov	r4, r0
 80031dc:	07d9      	lsls	r1, r3, #31
 80031de:	d52e      	bpl.n	800323e <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031e0:	499f      	ldr	r1, [pc, #636]	@ (8003460 <HAL_RCC_OscConfig+0x290>)
 80031e2:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80031e4:	6a89      	ldr	r1, [r1, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031e6:	f002 0238 	and.w	r2, r2, #56	@ 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80031ea:	2a10      	cmp	r2, #16
 80031ec:	f000 8125 	beq.w	800343a <HAL_RCC_OscConfig+0x26a>
 80031f0:	2a18      	cmp	r2, #24
 80031f2:	f000 811d 	beq.w	8003430 <HAL_RCC_OscConfig+0x260>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031f6:	6863      	ldr	r3, [r4, #4]
 80031f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031fc:	f000 815f 	beq.w	80034be <HAL_RCC_OscConfig+0x2ee>
 8003200:	2b00      	cmp	r3, #0
 8003202:	f000 8177 	beq.w	80034f4 <HAL_RCC_OscConfig+0x324>
 8003206:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800320a:	4b95      	ldr	r3, [pc, #596]	@ (8003460 <HAL_RCC_OscConfig+0x290>)
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	f000 8266 	beq.w	80036de <HAL_RCC_OscConfig+0x50e>
 8003212:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003216:	601a      	str	r2, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800321e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003220:	f7ff f900 	bl	8002424 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003224:	4e8e      	ldr	r6, [pc, #568]	@ (8003460 <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 8003226:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003228:	e005      	b.n	8003236 <HAL_RCC_OscConfig+0x66>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800322a:	f7ff f8fb 	bl	8002424 <HAL_GetTick>
 800322e:	1b40      	subs	r0, r0, r5
 8003230:	2864      	cmp	r0, #100	@ 0x64
 8003232:	f200 815d 	bhi.w	80034f0 <HAL_RCC_OscConfig+0x320>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003236:	6833      	ldr	r3, [r6, #0]
 8003238:	039f      	lsls	r7, r3, #14
 800323a:	d5f6      	bpl.n	800322a <HAL_RCC_OscConfig+0x5a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800323c:	6823      	ldr	r3, [r4, #0]
 800323e:	0799      	lsls	r1, r3, #30
 8003240:	d521      	bpl.n	8003286 <HAL_RCC_OscConfig+0xb6>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003242:	4a87      	ldr	r2, [pc, #540]	@ (8003460 <HAL_RCC_OscConfig+0x290>)
 8003244:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003246:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003248:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 800324c:	f040 80a4 	bne.w	8003398 <HAL_RCC_OscConfig+0x1c8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003250:	4b83      	ldr	r3, [pc, #524]	@ (8003460 <HAL_RCC_OscConfig+0x290>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	075b      	lsls	r3, r3, #29
 8003256:	d503      	bpl.n	8003260 <HAL_RCC_OscConfig+0x90>
 8003258:	68e3      	ldr	r3, [r4, #12]
 800325a:	2b00      	cmp	r3, #0
 800325c:	f000 80e6 	beq.w	800342c <HAL_RCC_OscConfig+0x25c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003260:	f7ff f8f8 	bl	8002454 <HAL_GetREVID>
 8003264:	f241 0303 	movw	r3, #4099	@ 0x1003
 8003268:	4298      	cmp	r0, r3
 800326a:	f200 817c 	bhi.w	8003566 <HAL_RCC_OscConfig+0x396>
 800326e:	6922      	ldr	r2, [r4, #16]
 8003270:	2a40      	cmp	r2, #64	@ 0x40
 8003272:	f000 823c 	beq.w	80036ee <HAL_RCC_OscConfig+0x51e>
 8003276:	497a      	ldr	r1, [pc, #488]	@ (8003460 <HAL_RCC_OscConfig+0x290>)
 8003278:	684b      	ldr	r3, [r1, #4]
 800327a:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800327e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8003282:	604b      	str	r3, [r1, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003284:	6823      	ldr	r3, [r4, #0]
 8003286:	06d9      	lsls	r1, r3, #27
 8003288:	d453      	bmi.n	8003332 <HAL_RCC_OscConfig+0x162>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800328a:	071d      	lsls	r5, r3, #28
 800328c:	d516      	bpl.n	80032bc <HAL_RCC_OscConfig+0xec>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800328e:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8003290:	4d73      	ldr	r5, [pc, #460]	@ (8003460 <HAL_RCC_OscConfig+0x290>)
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003292:	2b00      	cmp	r3, #0
 8003294:	f000 80ae 	beq.w	80033f4 <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_LSI_ENABLE();
 8003298:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800329a:	f043 0301 	orr.w	r3, r3, #1
 800329e:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 80032a0:	f7ff f8c0 	bl	8002424 <HAL_GetTick>
 80032a4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80032a6:	e005      	b.n	80032b4 <HAL_RCC_OscConfig+0xe4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032a8:	f7ff f8bc 	bl	8002424 <HAL_GetTick>
 80032ac:	1b80      	subs	r0, r0, r6
 80032ae:	2802      	cmp	r0, #2
 80032b0:	f200 811e 	bhi.w	80034f0 <HAL_RCC_OscConfig+0x320>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80032b4:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80032b6:	0798      	lsls	r0, r3, #30
 80032b8:	d5f6      	bpl.n	80032a8 <HAL_RCC_OscConfig+0xd8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80032ba:	6823      	ldr	r3, [r4, #0]
 80032bc:	069a      	lsls	r2, r3, #26
 80032be:	d516      	bpl.n	80032ee <HAL_RCC_OscConfig+0x11e>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80032c0:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 80032c2:	4d67      	ldr	r5, [pc, #412]	@ (8003460 <HAL_RCC_OscConfig+0x290>)
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f000 812b 	beq.w	8003520 <HAL_RCC_OscConfig+0x350>
      __HAL_RCC_HSI48_ENABLE();
 80032ca:	682b      	ldr	r3, [r5, #0]
 80032cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80032d0:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80032d2:	f7ff f8a7 	bl	8002424 <HAL_GetTick>
 80032d6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80032d8:	e005      	b.n	80032e6 <HAL_RCC_OscConfig+0x116>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80032da:	f7ff f8a3 	bl	8002424 <HAL_GetTick>
 80032de:	1b80      	subs	r0, r0, r6
 80032e0:	2802      	cmp	r0, #2
 80032e2:	f200 8105 	bhi.w	80034f0 <HAL_RCC_OscConfig+0x320>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80032e6:	682b      	ldr	r3, [r5, #0]
 80032e8:	049f      	lsls	r7, r3, #18
 80032ea:	d5f6      	bpl.n	80032da <HAL_RCC_OscConfig+0x10a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032ec:	6823      	ldr	r3, [r4, #0]
 80032ee:	0759      	lsls	r1, r3, #29
 80032f0:	f100 80ad 	bmi.w	800344e <HAL_RCC_OscConfig+0x27e>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032f4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80032f6:	b1d2      	cbz	r2, 800332e <HAL_RCC_OscConfig+0x15e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80032f8:	4d59      	ldr	r5, [pc, #356]	@ (8003460 <HAL_RCC_OscConfig+0x290>)
 80032fa:	692b      	ldr	r3, [r5, #16]
 80032fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003300:	2b18      	cmp	r3, #24
 8003302:	f000 81be 	beq.w	8003682 <HAL_RCC_OscConfig+0x4b2>
        __HAL_RCC_PLL_DISABLE();
 8003306:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003308:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800330a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800330e:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003310:	f000 8152 	beq.w	80035b8 <HAL_RCC_OscConfig+0x3e8>
        tickstart = HAL_GetTick();
 8003314:	f7ff f886 	bl	8002424 <HAL_GetTick>
 8003318:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800331a:	e005      	b.n	8003328 <HAL_RCC_OscConfig+0x158>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800331c:	f7ff f882 	bl	8002424 <HAL_GetTick>
 8003320:	1b00      	subs	r0, r0, r4
 8003322:	2802      	cmp	r0, #2
 8003324:	f200 80e4 	bhi.w	80034f0 <HAL_RCC_OscConfig+0x320>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003328:	682b      	ldr	r3, [r5, #0]
 800332a:	019b      	lsls	r3, r3, #6
 800332c:	d4f6      	bmi.n	800331c <HAL_RCC_OscConfig+0x14c>
  return HAL_OK;
 800332e:	2000      	movs	r0, #0
}
 8003330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003332:	4a4b      	ldr	r2, [pc, #300]	@ (8003460 <HAL_RCC_OscConfig+0x290>)
 8003334:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003336:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003338:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800333c:	2b08      	cmp	r3, #8
 800333e:	d06e      	beq.n	800341e <HAL_RCC_OscConfig+0x24e>
 8003340:	2b18      	cmp	r3, #24
 8003342:	d068      	beq.n	8003416 <HAL_RCC_OscConfig+0x246>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003344:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 8003346:	4d46      	ldr	r5, [pc, #280]	@ (8003460 <HAL_RCC_OscConfig+0x290>)
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003348:	2b00      	cmp	r3, #0
 800334a:	f000 80fa 	beq.w	8003542 <HAL_RCC_OscConfig+0x372>
        __HAL_RCC_CSI_ENABLE();
 800334e:	682b      	ldr	r3, [r5, #0]
 8003350:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003354:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003356:	f7ff f865 	bl	8002424 <HAL_GetTick>
 800335a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800335c:	e005      	b.n	800336a <HAL_RCC_OscConfig+0x19a>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800335e:	f7ff f861 	bl	8002424 <HAL_GetTick>
 8003362:	1b80      	subs	r0, r0, r6
 8003364:	2802      	cmp	r0, #2
 8003366:	f200 80c3 	bhi.w	80034f0 <HAL_RCC_OscConfig+0x320>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800336a:	682b      	ldr	r3, [r5, #0]
 800336c:	05db      	lsls	r3, r3, #23
 800336e:	d5f6      	bpl.n	800335e <HAL_RCC_OscConfig+0x18e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003370:	f7ff f870 	bl	8002454 <HAL_GetREVID>
 8003374:	f241 0303 	movw	r3, #4099	@ 0x1003
 8003378:	4298      	cmp	r0, r3
 800337a:	f200 81df 	bhi.w	800373c <HAL_RCC_OscConfig+0x56c>
 800337e:	6a22      	ldr	r2, [r4, #32]
 8003380:	686b      	ldr	r3, [r5, #4]
 8003382:	2a20      	cmp	r2, #32
 8003384:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003388:	bf0c      	ite	eq
 800338a:	f043 4380 	orreq.w	r3, r3, #1073741824	@ 0x40000000
 800338e:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8003392:	606b      	str	r3, [r5, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003394:	6823      	ldr	r3, [r4, #0]
 8003396:	e778      	b.n	800328a <HAL_RCC_OscConfig+0xba>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003398:	2b18      	cmp	r3, #24
 800339a:	f000 80ff 	beq.w	800359c <HAL_RCC_OscConfig+0x3cc>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800339e:	4d30      	ldr	r5, [pc, #192]	@ (8003460 <HAL_RCC_OscConfig+0x290>)
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033a0:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80033a2:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033a4:	2a00      	cmp	r2, #0
 80033a6:	f000 80e8 	beq.w	800357a <HAL_RCC_OscConfig+0x3aa>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80033aa:	f023 0319 	bic.w	r3, r3, #25
 80033ae:	4313      	orrs	r3, r2
 80033b0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80033b2:	f7ff f837 	bl	8002424 <HAL_GetTick>
 80033b6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033b8:	e005      	b.n	80033c6 <HAL_RCC_OscConfig+0x1f6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033ba:	f7ff f833 	bl	8002424 <HAL_GetTick>
 80033be:	1b80      	subs	r0, r0, r6
 80033c0:	2802      	cmp	r0, #2
 80033c2:	f200 8095 	bhi.w	80034f0 <HAL_RCC_OscConfig+0x320>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033c6:	682b      	ldr	r3, [r5, #0]
 80033c8:	075f      	lsls	r7, r3, #29
 80033ca:	d5f6      	bpl.n	80033ba <HAL_RCC_OscConfig+0x1ea>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033cc:	f7ff f842 	bl	8002454 <HAL_GetREVID>
 80033d0:	f241 0303 	movw	r3, #4099	@ 0x1003
 80033d4:	4298      	cmp	r0, r3
 80033d6:	f200 81ba 	bhi.w	800374e <HAL_RCC_OscConfig+0x57e>
 80033da:	6922      	ldr	r2, [r4, #16]
 80033dc:	686b      	ldr	r3, [r5, #4]
 80033de:	2a40      	cmp	r2, #64	@ 0x40
 80033e0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80033e4:	bf0c      	ite	eq
 80033e6:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
 80033ea:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 80033ee:	606b      	str	r3, [r5, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80033f0:	6823      	ldr	r3, [r4, #0]
 80033f2:	e748      	b.n	8003286 <HAL_RCC_OscConfig+0xb6>
      __HAL_RCC_LSI_DISABLE();
 80033f4:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80033f6:	f023 0301 	bic.w	r3, r3, #1
 80033fa:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 80033fc:	f7ff f812 	bl	8002424 <HAL_GetTick>
 8003400:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003402:	e004      	b.n	800340e <HAL_RCC_OscConfig+0x23e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003404:	f7ff f80e 	bl	8002424 <HAL_GetTick>
 8003408:	1b80      	subs	r0, r0, r6
 800340a:	2802      	cmp	r0, #2
 800340c:	d870      	bhi.n	80034f0 <HAL_RCC_OscConfig+0x320>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800340e:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8003410:	0799      	lsls	r1, r3, #30
 8003412:	d4f7      	bmi.n	8003404 <HAL_RCC_OscConfig+0x234>
 8003414:	e751      	b.n	80032ba <HAL_RCC_OscConfig+0xea>
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003416:	f002 0203 	and.w	r2, r2, #3
 800341a:	2a01      	cmp	r2, #1
 800341c:	d192      	bne.n	8003344 <HAL_RCC_OscConfig+0x174>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800341e:	4b10      	ldr	r3, [pc, #64]	@ (8003460 <HAL_RCC_OscConfig+0x290>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	05da      	lsls	r2, r3, #23
 8003424:	d551      	bpl.n	80034ca <HAL_RCC_OscConfig+0x2fa>
 8003426:	69e3      	ldr	r3, [r4, #28]
 8003428:	2b80      	cmp	r3, #128	@ 0x80
 800342a:	d04e      	beq.n	80034ca <HAL_RCC_OscConfig+0x2fa>
    return HAL_ERROR;
 800342c:	2001      	movs	r0, #1
}
 800342e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003430:	f001 0103 	and.w	r1, r1, #3
 8003434:	2902      	cmp	r1, #2
 8003436:	f47f aede 	bne.w	80031f6 <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800343a:	4a09      	ldr	r2, [pc, #36]	@ (8003460 <HAL_RCC_OscConfig+0x290>)
 800343c:	6812      	ldr	r2, [r2, #0]
 800343e:	0392      	lsls	r2, r2, #14
 8003440:	f57f aefd 	bpl.w	800323e <HAL_RCC_OscConfig+0x6e>
 8003444:	6862      	ldr	r2, [r4, #4]
 8003446:	2a00      	cmp	r2, #0
 8003448:	f47f aef9 	bne.w	800323e <HAL_RCC_OscConfig+0x6e>
 800344c:	e7ee      	b.n	800342c <HAL_RCC_OscConfig+0x25c>
    PWR->CR1 |= PWR_CR1_DBP;
 800344e:	4d05      	ldr	r5, [pc, #20]	@ (8003464 <HAL_RCC_OscConfig+0x294>)
 8003450:	682b      	ldr	r3, [r5, #0]
 8003452:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003456:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8003458:	f7fe ffe4 	bl	8002424 <HAL_GetTick>
 800345c:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800345e:	e008      	b.n	8003472 <HAL_RCC_OscConfig+0x2a2>
 8003460:	58024400 	.word	0x58024400
 8003464:	58024800 	.word	0x58024800
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003468:	f7fe ffdc 	bl	8002424 <HAL_GetTick>
 800346c:	1b80      	subs	r0, r0, r6
 800346e:	2864      	cmp	r0, #100	@ 0x64
 8003470:	d83e      	bhi.n	80034f0 <HAL_RCC_OscConfig+0x320>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003472:	682b      	ldr	r3, [r5, #0]
 8003474:	05da      	lsls	r2, r3, #23
 8003476:	d5f7      	bpl.n	8003468 <HAL_RCC_OscConfig+0x298>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003478:	68a3      	ldr	r3, [r4, #8]
 800347a:	2b01      	cmp	r3, #1
 800347c:	f000 8170 	beq.w	8003760 <HAL_RCC_OscConfig+0x590>
 8003480:	2b00      	cmp	r3, #0
 8003482:	f000 813d 	beq.w	8003700 <HAL_RCC_OscConfig+0x530>
 8003486:	2b05      	cmp	r3, #5
 8003488:	4ba5      	ldr	r3, [pc, #660]	@ (8003720 <HAL_RCC_OscConfig+0x550>)
 800348a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800348c:	f000 8177 	beq.w	800377e <HAL_RCC_OscConfig+0x5ae>
 8003490:	f022 0201 	bic.w	r2, r2, #1
 8003494:	671a      	str	r2, [r3, #112]	@ 0x70
 8003496:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003498:	f022 0204 	bic.w	r2, r2, #4
 800349c:	671a      	str	r2, [r3, #112]	@ 0x70
      tickstart = HAL_GetTick();
 800349e:	f7fe ffc1 	bl	8002424 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80034a2:	4e9f      	ldr	r6, [pc, #636]	@ (8003720 <HAL_RCC_OscConfig+0x550>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034a4:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 80034a8:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80034aa:	e004      	b.n	80034b6 <HAL_RCC_OscConfig+0x2e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034ac:	f7fe ffba 	bl	8002424 <HAL_GetTick>
 80034b0:	1b40      	subs	r0, r0, r5
 80034b2:	42b8      	cmp	r0, r7
 80034b4:	d81c      	bhi.n	80034f0 <HAL_RCC_OscConfig+0x320>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80034b6:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 80034b8:	079b      	lsls	r3, r3, #30
 80034ba:	d5f7      	bpl.n	80034ac <HAL_RCC_OscConfig+0x2dc>
 80034bc:	e71a      	b.n	80032f4 <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034be:	4a98      	ldr	r2, [pc, #608]	@ (8003720 <HAL_RCC_OscConfig+0x550>)
 80034c0:	6813      	ldr	r3, [r2, #0]
 80034c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034c6:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034c8:	e6aa      	b.n	8003220 <HAL_RCC_OscConfig+0x50>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80034ca:	f7fe ffc3 	bl	8002454 <HAL_GetREVID>
 80034ce:	f241 0303 	movw	r3, #4099	@ 0x1003
 80034d2:	4298      	cmp	r0, r3
 80034d4:	d866      	bhi.n	80035a4 <HAL_RCC_OscConfig+0x3d4>
 80034d6:	6a22      	ldr	r2, [r4, #32]
 80034d8:	2a20      	cmp	r2, #32
 80034da:	f000 8147 	beq.w	800376c <HAL_RCC_OscConfig+0x59c>
 80034de:	4990      	ldr	r1, [pc, #576]	@ (8003720 <HAL_RCC_OscConfig+0x550>)
 80034e0:	684b      	ldr	r3, [r1, #4]
 80034e2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80034e6:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 80034ea:	604b      	str	r3, [r1, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034ec:	6823      	ldr	r3, [r4, #0]
 80034ee:	e6cc      	b.n	800328a <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
 80034f0:	2003      	movs	r0, #3
}
 80034f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034f4:	4d8a      	ldr	r5, [pc, #552]	@ (8003720 <HAL_RCC_OscConfig+0x550>)
 80034f6:	682b      	ldr	r3, [r5, #0]
 80034f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034fc:	602b      	str	r3, [r5, #0]
 80034fe:	682b      	ldr	r3, [r5, #0]
 8003500:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003504:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003506:	f7fe ff8d 	bl	8002424 <HAL_GetTick>
 800350a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800350c:	e004      	b.n	8003518 <HAL_RCC_OscConfig+0x348>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800350e:	f7fe ff89 	bl	8002424 <HAL_GetTick>
 8003512:	1b80      	subs	r0, r0, r6
 8003514:	2864      	cmp	r0, #100	@ 0x64
 8003516:	d8eb      	bhi.n	80034f0 <HAL_RCC_OscConfig+0x320>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003518:	682b      	ldr	r3, [r5, #0]
 800351a:	0398      	lsls	r0, r3, #14
 800351c:	d4f7      	bmi.n	800350e <HAL_RCC_OscConfig+0x33e>
 800351e:	e68d      	b.n	800323c <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_HSI48_DISABLE();
 8003520:	682b      	ldr	r3, [r5, #0]
 8003522:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003526:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003528:	f7fe ff7c 	bl	8002424 <HAL_GetTick>
 800352c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800352e:	e004      	b.n	800353a <HAL_RCC_OscConfig+0x36a>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003530:	f7fe ff78 	bl	8002424 <HAL_GetTick>
 8003534:	1b80      	subs	r0, r0, r6
 8003536:	2802      	cmp	r0, #2
 8003538:	d8da      	bhi.n	80034f0 <HAL_RCC_OscConfig+0x320>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800353a:	682b      	ldr	r3, [r5, #0]
 800353c:	0498      	lsls	r0, r3, #18
 800353e:	d4f7      	bmi.n	8003530 <HAL_RCC_OscConfig+0x360>
 8003540:	e6d4      	b.n	80032ec <HAL_RCC_OscConfig+0x11c>
        __HAL_RCC_CSI_DISABLE();
 8003542:	682b      	ldr	r3, [r5, #0]
 8003544:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003548:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800354a:	f7fe ff6b 	bl	8002424 <HAL_GetTick>
 800354e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003550:	e004      	b.n	800355c <HAL_RCC_OscConfig+0x38c>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003552:	f7fe ff67 	bl	8002424 <HAL_GetTick>
 8003556:	1b80      	subs	r0, r0, r6
 8003558:	2802      	cmp	r0, #2
 800355a:	d8c9      	bhi.n	80034f0 <HAL_RCC_OscConfig+0x320>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800355c:	682b      	ldr	r3, [r5, #0]
 800355e:	05df      	lsls	r7, r3, #23
 8003560:	d4f7      	bmi.n	8003552 <HAL_RCC_OscConfig+0x382>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003562:	6823      	ldr	r3, [r4, #0]
 8003564:	e691      	b.n	800328a <HAL_RCC_OscConfig+0xba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003566:	4a6e      	ldr	r2, [pc, #440]	@ (8003720 <HAL_RCC_OscConfig+0x550>)
 8003568:	6921      	ldr	r1, [r4, #16]
 800356a:	6853      	ldr	r3, [r2, #4]
 800356c:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003570:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003574:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003576:	6823      	ldr	r3, [r4, #0]
 8003578:	e685      	b.n	8003286 <HAL_RCC_OscConfig+0xb6>
        __HAL_RCC_HSI_DISABLE();
 800357a:	f023 0301 	bic.w	r3, r3, #1
 800357e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003580:	f7fe ff50 	bl	8002424 <HAL_GetTick>
 8003584:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003586:	e004      	b.n	8003592 <HAL_RCC_OscConfig+0x3c2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003588:	f7fe ff4c 	bl	8002424 <HAL_GetTick>
 800358c:	1b80      	subs	r0, r0, r6
 800358e:	2802      	cmp	r0, #2
 8003590:	d8ae      	bhi.n	80034f0 <HAL_RCC_OscConfig+0x320>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003592:	682b      	ldr	r3, [r5, #0]
 8003594:	0758      	lsls	r0, r3, #29
 8003596:	d4f7      	bmi.n	8003588 <HAL_RCC_OscConfig+0x3b8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003598:	6823      	ldr	r3, [r4, #0]
 800359a:	e674      	b.n	8003286 <HAL_RCC_OscConfig+0xb6>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800359c:	0792      	lsls	r2, r2, #30
 800359e:	f47f aefe 	bne.w	800339e <HAL_RCC_OscConfig+0x1ce>
 80035a2:	e655      	b.n	8003250 <HAL_RCC_OscConfig+0x80>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80035a4:	4a5e      	ldr	r2, [pc, #376]	@ (8003720 <HAL_RCC_OscConfig+0x550>)
 80035a6:	6a21      	ldr	r1, [r4, #32]
 80035a8:	68d3      	ldr	r3, [r2, #12]
 80035aa:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 80035ae:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80035b2:	60d3      	str	r3, [r2, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035b4:	6823      	ldr	r3, [r4, #0]
 80035b6:	e668      	b.n	800328a <HAL_RCC_OscConfig+0xba>
        tickstart = HAL_GetTick();
 80035b8:	f7fe ff34 	bl	8002424 <HAL_GetTick>
 80035bc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80035be:	e004      	b.n	80035ca <HAL_RCC_OscConfig+0x3fa>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035c0:	f7fe ff30 	bl	8002424 <HAL_GetTick>
 80035c4:	1b80      	subs	r0, r0, r6
 80035c6:	2802      	cmp	r0, #2
 80035c8:	d892      	bhi.n	80034f0 <HAL_RCC_OscConfig+0x320>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80035ca:	682b      	ldr	r3, [r5, #0]
 80035cc:	0199      	lsls	r1, r3, #6
 80035ce:	d4f7      	bmi.n	80035c0 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035d0:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 80035d2:	4b54      	ldr	r3, [pc, #336]	@ (8003724 <HAL_RCC_OscConfig+0x554>)
 80035d4:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80035d6:	400b      	ands	r3, r1
 80035d8:	4313      	orrs	r3, r2
 80035da:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80035dc:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80035e0:	62ab      	str	r3, [r5, #40]	@ 0x28
 80035e2:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80035e4:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	@ 0x34
 80035e8:	3901      	subs	r1, #1
 80035ea:	3b01      	subs	r3, #1
 80035ec:	3a01      	subs	r2, #1
 80035ee:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80035f2:	025b      	lsls	r3, r3, #9
 80035f4:	0412      	lsls	r2, r2, #16
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80035fc:	4313      	orrs	r3, r2
 80035fe:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8003600:	3a01      	subs	r2, #1
 8003602:	430b      	orrs	r3, r1
 8003604:	0612      	lsls	r2, r2, #24
 8003606:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800360a:	4313      	orrs	r3, r2
 800360c:	632b      	str	r3, [r5, #48]	@ 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 800360e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003610:	f023 0301 	bic.w	r3, r3, #1
 8003614:	62eb      	str	r3, [r5, #44]	@ 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003616:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8003618:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800361a:	f36f 03cf 	bfc	r3, #3, #13
 800361e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003622:	636b      	str	r3, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003624:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003626:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003628:	f023 030c 	bic.w	r3, r3, #12
 800362c:	4313      	orrs	r3, r2
 800362e:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003630:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003632:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003634:	f023 0302 	bic.w	r3, r3, #2
 8003638:	4313      	orrs	r3, r2
 800363a:	62eb      	str	r3, [r5, #44]	@ 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800363c:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800363e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003642:	62eb      	str	r3, [r5, #44]	@ 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003644:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003646:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800364a:	62eb      	str	r3, [r5, #44]	@ 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800364c:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800364e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003652:	62eb      	str	r3, [r5, #44]	@ 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8003654:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003656:	f043 0301 	orr.w	r3, r3, #1
 800365a:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 800365c:	682b      	ldr	r3, [r5, #0]
 800365e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003662:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003664:	f7fe fede 	bl	8002424 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003668:	4d2d      	ldr	r5, [pc, #180]	@ (8003720 <HAL_RCC_OscConfig+0x550>)
        tickstart = HAL_GetTick();
 800366a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800366c:	e005      	b.n	800367a <HAL_RCC_OscConfig+0x4aa>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800366e:	f7fe fed9 	bl	8002424 <HAL_GetTick>
 8003672:	1b00      	subs	r0, r0, r4
 8003674:	2802      	cmp	r0, #2
 8003676:	f63f af3b 	bhi.w	80034f0 <HAL_RCC_OscConfig+0x320>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800367a:	682b      	ldr	r3, [r5, #0]
 800367c:	019a      	lsls	r2, r3, #6
 800367e:	d5f6      	bpl.n	800366e <HAL_RCC_OscConfig+0x49e>
 8003680:	e655      	b.n	800332e <HAL_RCC_OscConfig+0x15e>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003682:	2a01      	cmp	r2, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003684:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003686:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003688:	f43f aed0 	beq.w	800342c <HAL_RCC_OscConfig+0x25c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800368c:	f001 0203 	and.w	r2, r1, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003690:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8003692:	4282      	cmp	r2, r0
 8003694:	f47f aeca 	bne.w	800342c <HAL_RCC_OscConfig+0x25c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003698:	f3c1 1105 	ubfx	r1, r1, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800369c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800369e:	4291      	cmp	r1, r2
 80036a0:	f47f aec4 	bne.w	800342c <HAL_RCC_OscConfig+0x25c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80036a4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80036a6:	f3c3 0108 	ubfx	r1, r3, #0, #9
 80036aa:	3a01      	subs	r2, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80036ac:	4291      	cmp	r1, r2
 80036ae:	f47f aebd 	bne.w	800342c <HAL_RCC_OscConfig+0x25c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80036b2:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80036b4:	f3c3 2146 	ubfx	r1, r3, #9, #7
 80036b8:	3a01      	subs	r2, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80036ba:	4291      	cmp	r1, r2
 80036bc:	f47f aeb6 	bne.w	800342c <HAL_RCC_OscConfig+0x25c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80036c0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80036c2:	f3c3 4106 	ubfx	r1, r3, #16, #7
 80036c6:	3a01      	subs	r2, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80036c8:	4291      	cmp	r1, r2
 80036ca:	f47f aeaf 	bne.w	800342c <HAL_RCC_OscConfig+0x25c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80036ce:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80036d0:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80036d4:	3a01      	subs	r2, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80036d6:	1a98      	subs	r0, r3, r2
 80036d8:	bf18      	it	ne
 80036da:	2001      	movne	r0, #1
}
 80036dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036de:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80036ea:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036ec:	e598      	b.n	8003220 <HAL_RCC_OscConfig+0x50>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ee:	4a0c      	ldr	r2, [pc, #48]	@ (8003720 <HAL_RCC_OscConfig+0x550>)
 80036f0:	6853      	ldr	r3, [r2, #4]
 80036f2:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80036f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036fa:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80036fc:	6823      	ldr	r3, [r4, #0]
 80036fe:	e5c2      	b.n	8003286 <HAL_RCC_OscConfig+0xb6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003700:	4d07      	ldr	r5, [pc, #28]	@ (8003720 <HAL_RCC_OscConfig+0x550>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003702:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003706:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8003708:	f023 0301 	bic.w	r3, r3, #1
 800370c:	672b      	str	r3, [r5, #112]	@ 0x70
 800370e:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8003710:	f023 0304 	bic.w	r3, r3, #4
 8003714:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8003716:	f7fe fe85 	bl	8002424 <HAL_GetTick>
 800371a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800371c:	e00a      	b.n	8003734 <HAL_RCC_OscConfig+0x564>
 800371e:	bf00      	nop
 8003720:	58024400 	.word	0x58024400
 8003724:	fffffc0c 	.word	0xfffffc0c
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003728:	f7fe fe7c 	bl	8002424 <HAL_GetTick>
 800372c:	1b80      	subs	r0, r0, r6
 800372e:	42b8      	cmp	r0, r7
 8003730:	f63f aede 	bhi.w	80034f0 <HAL_RCC_OscConfig+0x320>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003734:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8003736:	0798      	lsls	r0, r3, #30
 8003738:	d4f6      	bmi.n	8003728 <HAL_RCC_OscConfig+0x558>
 800373a:	e5db      	b.n	80032f4 <HAL_RCC_OscConfig+0x124>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800373c:	68eb      	ldr	r3, [r5, #12]
 800373e:	6a22      	ldr	r2, [r4, #32]
 8003740:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8003744:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003748:	60eb      	str	r3, [r5, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800374a:	6823      	ldr	r3, [r4, #0]
 800374c:	e59d      	b.n	800328a <HAL_RCC_OscConfig+0xba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800374e:	686b      	ldr	r3, [r5, #4]
 8003750:	6922      	ldr	r2, [r4, #16]
 8003752:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003756:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800375a:	606b      	str	r3, [r5, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800375c:	6823      	ldr	r3, [r4, #0]
 800375e:	e592      	b.n	8003286 <HAL_RCC_OscConfig+0xb6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003760:	4a0c      	ldr	r2, [pc, #48]	@ (8003794 <HAL_RCC_OscConfig+0x5c4>)
 8003762:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8003764:	f043 0301 	orr.w	r3, r3, #1
 8003768:	6713      	str	r3, [r2, #112]	@ 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800376a:	e698      	b.n	800349e <HAL_RCC_OscConfig+0x2ce>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800376c:	4a09      	ldr	r2, [pc, #36]	@ (8003794 <HAL_RCC_OscConfig+0x5c4>)
 800376e:	6853      	ldr	r3, [r2, #4]
 8003770:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003774:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003778:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800377a:	6823      	ldr	r3, [r4, #0]
 800377c:	e585      	b.n	800328a <HAL_RCC_OscConfig+0xba>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800377e:	f042 0204 	orr.w	r2, r2, #4
 8003782:	671a      	str	r2, [r3, #112]	@ 0x70
 8003784:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003786:	f042 0201 	orr.w	r2, r2, #1
 800378a:	671a      	str	r2, [r3, #112]	@ 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800378c:	e687      	b.n	800349e <HAL_RCC_OscConfig+0x2ce>
    return HAL_ERROR;
 800378e:	2001      	movs	r0, #1
}
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	58024400 	.word	0x58024400

08003798 <HAL_RCC_MCOConfig>:
{
 8003798:	b570      	push	{r4, r5, r6, lr}
    MCO1_CLK_ENABLE();
 800379a:	4e25      	ldr	r6, [pc, #148]	@ (8003830 <HAL_RCC_MCOConfig+0x98>)
{
 800379c:	b088      	sub	sp, #32
 800379e:	460d      	mov	r5, r1
 80037a0:	4614      	mov	r4, r2
    MCO1_CLK_ENABLE();
 80037a2:	f8d6 30e0 	ldr.w	r3, [r6, #224]	@ 0xe0
  if(RCC_MCOx == RCC_MCO1)
 80037a6:	b9f8      	cbnz	r0, 80037e8 <HAL_RCC_MCOConfig+0x50>
    MCO1_CLK_ENABLE();
 80037a8:	f043 0301 	orr.w	r3, r3, #1
    GPIO_InitStruct.Pin = MCO1_PIN;
 80037ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80037b0:	a902      	add	r1, sp, #8
    MCO1_CLK_ENABLE();
 80037b2:	f8c6 30e0 	str.w	r3, [r6, #224]	@ 0xe0
 80037b6:	f8d6 30e0 	ldr.w	r3, [r6, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80037ba:	9006      	str	r0, [sp, #24]
    MCO1_CLK_ENABLE();
 80037bc:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80037c0:	481c      	ldr	r0, [pc, #112]	@ (8003834 <HAL_RCC_MCOConfig+0x9c>)
    MCO1_CLK_ENABLE();
 80037c2:	9300      	str	r3, [sp, #0]
 80037c4:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = MCO1_PIN;
 80037c6:	2302      	movs	r3, #2
 80037c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80037cc:	2200      	movs	r2, #0
 80037ce:	2303      	movs	r3, #3
 80037d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80037d4:	f7ff fa50 	bl	8002c78 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80037d8:	6933      	ldr	r3, [r6, #16]
 80037da:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 80037de:	432b      	orrs	r3, r5
 80037e0:	4323      	orrs	r3, r4
 80037e2:	6133      	str	r3, [r6, #16]
}
 80037e4:	b008      	add	sp, #32
 80037e6:	bd70      	pop	{r4, r5, r6, pc}
    MCO2_CLK_ENABLE();
 80037e8:	f043 0304 	orr.w	r3, r3, #4
    GPIO_InitStruct.Pin = MCO2_PIN;
 80037ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80037f0:	4811      	ldr	r0, [pc, #68]	@ (8003838 <HAL_RCC_MCOConfig+0xa0>)
    MCO2_CLK_ENABLE();
 80037f2:	f8c6 30e0 	str.w	r3, [r6, #224]	@ 0xe0
 80037f6:	f8d6 30e0 	ldr.w	r3, [r6, #224]	@ 0xe0
 80037fa:	f003 0304 	and.w	r3, r3, #4
 80037fe:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8003800:	2302      	movs	r3, #2
    MCO2_CLK_ENABLE();
 8003802:	9901      	ldr	r1, [sp, #4]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8003804:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = MCO2_PIN;
 8003806:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800380a:	2200      	movs	r2, #0
 800380c:	2303      	movs	r3, #3
 800380e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003812:	2300      	movs	r3, #0
 8003814:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8003816:	f7ff fa2f 	bl	8002c78 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800381a:	6933      	ldr	r3, [r6, #16]
 800381c:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 8003820:	ea43 0105 	orr.w	r1, r3, r5
 8003824:	ea41 11c4 	orr.w	r1, r1, r4, lsl #7
 8003828:	6131      	str	r1, [r6, #16]
}
 800382a:	b008      	add	sp, #32
 800382c:	bd70      	pop	{r4, r5, r6, pc}
 800382e:	bf00      	nop
 8003830:	58024400 	.word	0x58024400
 8003834:	58020000 	.word	0x58020000
 8003838:	58020800 	.word	0x58020800

0800383c <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800383c:	4a3f      	ldr	r2, [pc, #252]	@ (800393c <HAL_RCC_GetSysClockFreq+0x100>)
 800383e:	6913      	ldr	r3, [r2, #16]
 8003840:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003844:	2b10      	cmp	r3, #16
 8003846:	d04f      	beq.n	80038e8 <HAL_RCC_GetSysClockFreq+0xac>
 8003848:	2b18      	cmp	r3, #24
 800384a:	d00a      	beq.n	8003862 <HAL_RCC_GetSysClockFreq+0x26>
 800384c:	2b00      	cmp	r3, #0
 800384e:	d14d      	bne.n	80038ec <HAL_RCC_GetSysClockFreq+0xb0>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003850:	6813      	ldr	r3, [r2, #0]
 8003852:	0699      	lsls	r1, r3, #26
 8003854:	d54c      	bpl.n	80038f0 <HAL_RCC_GetSysClockFreq+0xb4>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003856:	6813      	ldr	r3, [r2, #0]
 8003858:	4839      	ldr	r0, [pc, #228]	@ (8003940 <HAL_RCC_GetSysClockFreq+0x104>)
 800385a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800385e:	40d8      	lsrs	r0, r3
 8003860:	4770      	bx	lr
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003862:	6a91      	ldr	r1, [r2, #40]	@ 0x28
{
 8003864:	b430      	push	{r4, r5}
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003866:	6a94      	ldr	r4, [r2, #40]	@ 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003868:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
    if (pllm != 0U)
 800386a:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800386e:	6b53      	ldr	r3, [r2, #52]	@ 0x34
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003870:	f3c4 1005 	ubfx	r0, r4, #4, #6
    if (pllm != 0U)
 8003874:	d036      	beq.n	80038e4 <HAL_RCC_GetSysClockFreq+0xa8>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003876:	f3c3 03cc 	ubfx	r3, r3, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800387a:	f005 0501 	and.w	r5, r5, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800387e:	f001 0103 	and.w	r1, r1, #3
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003882:	ee07 0a90 	vmov	s15, r0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003886:	fb05 f303 	mul.w	r3, r5, r3
      switch (pllsource)
 800388a:	2901      	cmp	r1, #1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800388c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003890:	ee06 3a90 	vmov	s13, r3
 8003894:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
      switch (pllsource)
 8003898:	d002      	beq.n	80038a0 <HAL_RCC_GetSysClockFreq+0x64>
 800389a:	2902      	cmp	r1, #2
 800389c:	d048      	beq.n	8003930 <HAL_RCC_GetSysClockFreq+0xf4>
 800389e:	b349      	cbz	r1, 80038f4 <HAL_RCC_GetSysClockFreq+0xb8>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80038a0:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8003944 <HAL_RCC_GetSysClockFreq+0x108>
 80038a4:	ee87 6a27 	vdiv.f32	s12, s14, s15
 80038a8:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80038aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038ae:	ee07 3a10 	vmov	s14, r3
 80038b2:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 80038b6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80038ba:	ee37 7a26 	vadd.f32	s14, s14, s13
 80038be:	ee37 7a25 	vadd.f32	s14, s14, s11
 80038c2:	ee27 7a06 	vmul.f32	s14, s14, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80038c6:	4b1d      	ldr	r3, [pc, #116]	@ (800393c <HAL_RCC_GetSysClockFreq+0x100>)
 80038c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ca:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80038ce:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80038d0:	ee07 3a90 	vmov	s15, r3
 80038d4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80038d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80038dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038e0:	ee17 0a90 	vmov	r0, s15
}
 80038e4:	bc30      	pop	{r4, r5}
 80038e6:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038e8:	4817      	ldr	r0, [pc, #92]	@ (8003948 <HAL_RCC_GetSysClockFreq+0x10c>)
 80038ea:	4770      	bx	lr
    sysclockfreq = CSI_VALUE;
 80038ec:	4817      	ldr	r0, [pc, #92]	@ (800394c <HAL_RCC_GetSysClockFreq+0x110>)
 80038ee:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 80038f0:	4813      	ldr	r0, [pc, #76]	@ (8003940 <HAL_RCC_GetSysClockFreq+0x104>)
}
 80038f2:	4770      	bx	lr
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038f4:	6813      	ldr	r3, [r2, #0]
 80038f6:	069b      	lsls	r3, r3, #26
 80038f8:	d51d      	bpl.n	8003936 <HAL_RCC_GetSysClockFreq+0xfa>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80038fa:	6810      	ldr	r0, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80038fc:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8003900:	6b13      	ldr	r3, [r2, #48]	@ 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003902:	490f      	ldr	r1, [pc, #60]	@ (8003940 <HAL_RCC_GetSysClockFreq+0x104>)
 8003904:	f3c0 02c1 	ubfx	r2, r0, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003908:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800390c:	40d1      	lsrs	r1, r2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800390e:	ee07 3a10 	vmov	s14, r3
 8003912:	ee06 1a10 	vmov	s12, r1
 8003916:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800391a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800391e:	ee77 6a26 	vadd.f32	s13, s14, s13
 8003922:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8003926:	ee76 7aa5 	vadd.f32	s15, s13, s11
 800392a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800392e:	e7ca      	b.n	80038c6 <HAL_RCC_GetSysClockFreq+0x8a>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003930:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8003950 <HAL_RCC_GetSysClockFreq+0x114>
 8003934:	e7b6      	b.n	80038a4 <HAL_RCC_GetSysClockFreq+0x68>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003936:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8003954 <HAL_RCC_GetSysClockFreq+0x118>
 800393a:	e7b3      	b.n	80038a4 <HAL_RCC_GetSysClockFreq+0x68>
 800393c:	58024400 	.word	0x58024400
 8003940:	03d09000 	.word	0x03d09000
 8003944:	4a742400 	.word	0x4a742400
 8003948:	017d7840 	.word	0x017d7840
 800394c:	003d0900 	.word	0x003d0900
 8003950:	4bbebc20 	.word	0x4bbebc20
 8003954:	4c742400 	.word	0x4c742400

08003958 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003958:	2800      	cmp	r0, #0
 800395a:	f000 810e 	beq.w	8003b7a <HAL_RCC_ClockConfig+0x222>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800395e:	4a8d      	ldr	r2, [pc, #564]	@ (8003b94 <HAL_RCC_ClockConfig+0x23c>)
 8003960:	6813      	ldr	r3, [r2, #0]
 8003962:	f003 030f 	and.w	r3, r3, #15
 8003966:	428b      	cmp	r3, r1
{
 8003968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800396c:	4604      	mov	r4, r0
 800396e:	460d      	mov	r5, r1
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003970:	d20c      	bcs.n	800398c <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003972:	6813      	ldr	r3, [r2, #0]
 8003974:	f023 030f 	bic.w	r3, r3, #15
 8003978:	430b      	orrs	r3, r1
 800397a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800397c:	6813      	ldr	r3, [r2, #0]
 800397e:	f003 030f 	and.w	r3, r3, #15
 8003982:	428b      	cmp	r3, r1
 8003984:	d002      	beq.n	800398c <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8003986:	2001      	movs	r0, #1
}
 8003988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800398c:	6823      	ldr	r3, [r4, #0]
 800398e:	0758      	lsls	r0, r3, #29
 8003990:	d50b      	bpl.n	80039aa <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003992:	4981      	ldr	r1, [pc, #516]	@ (8003b98 <HAL_RCC_ClockConfig+0x240>)
 8003994:	6920      	ldr	r0, [r4, #16]
 8003996:	698a      	ldr	r2, [r1, #24]
 8003998:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800399c:	4290      	cmp	r0, r2
 800399e:	d904      	bls.n	80039aa <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80039a0:	698a      	ldr	r2, [r1, #24]
 80039a2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80039a6:	4302      	orrs	r2, r0
 80039a8:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039aa:	0719      	lsls	r1, r3, #28
 80039ac:	d50b      	bpl.n	80039c6 <HAL_RCC_ClockConfig+0x6e>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80039ae:	497a      	ldr	r1, [pc, #488]	@ (8003b98 <HAL_RCC_ClockConfig+0x240>)
 80039b0:	6960      	ldr	r0, [r4, #20]
 80039b2:	69ca      	ldr	r2, [r1, #28]
 80039b4:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80039b8:	4290      	cmp	r0, r2
 80039ba:	d904      	bls.n	80039c6 <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80039bc:	69ca      	ldr	r2, [r1, #28]
 80039be:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80039c2:	4302      	orrs	r2, r0
 80039c4:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039c6:	06da      	lsls	r2, r3, #27
 80039c8:	d50b      	bpl.n	80039e2 <HAL_RCC_ClockConfig+0x8a>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80039ca:	4973      	ldr	r1, [pc, #460]	@ (8003b98 <HAL_RCC_ClockConfig+0x240>)
 80039cc:	69a0      	ldr	r0, [r4, #24]
 80039ce:	69ca      	ldr	r2, [r1, #28]
 80039d0:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 80039d4:	4290      	cmp	r0, r2
 80039d6:	d904      	bls.n	80039e2 <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80039d8:	69ca      	ldr	r2, [r1, #28]
 80039da:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80039de:	4302      	orrs	r2, r0
 80039e0:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80039e2:	069f      	lsls	r7, r3, #26
 80039e4:	d50b      	bpl.n	80039fe <HAL_RCC_ClockConfig+0xa6>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80039e6:	496c      	ldr	r1, [pc, #432]	@ (8003b98 <HAL_RCC_ClockConfig+0x240>)
 80039e8:	69e0      	ldr	r0, [r4, #28]
 80039ea:	6a0a      	ldr	r2, [r1, #32]
 80039ec:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80039f0:	4290      	cmp	r0, r2
 80039f2:	d904      	bls.n	80039fe <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80039f4:	6a0a      	ldr	r2, [r1, #32]
 80039f6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80039fa:	4302      	orrs	r2, r0
 80039fc:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039fe:	079e      	lsls	r6, r3, #30
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a00:	f003 0201 	and.w	r2, r3, #1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a04:	f140 80ab 	bpl.w	8003b5e <HAL_RCC_ClockConfig+0x206>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003a08:	4e63      	ldr	r6, [pc, #396]	@ (8003b98 <HAL_RCC_ClockConfig+0x240>)
 8003a0a:	68e0      	ldr	r0, [r4, #12]
 8003a0c:	69b1      	ldr	r1, [r6, #24]
 8003a0e:	f001 010f 	and.w	r1, r1, #15
 8003a12:	4288      	cmp	r0, r1
 8003a14:	d904      	bls.n	8003a20 <HAL_RCC_ClockConfig+0xc8>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a16:	69b1      	ldr	r1, [r6, #24]
 8003a18:	f021 010f 	bic.w	r1, r1, #15
 8003a1c:	4301      	orrs	r1, r0
 8003a1e:	61b1      	str	r1, [r6, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a20:	2a00      	cmp	r2, #0
 8003a22:	d030      	beq.n	8003a86 <HAL_RCC_ClockConfig+0x12e>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003a24:	4a5c      	ldr	r2, [pc, #368]	@ (8003b98 <HAL_RCC_ClockConfig+0x240>)
 8003a26:	68a1      	ldr	r1, [r4, #8]
 8003a28:	6993      	ldr	r3, [r2, #24]
 8003a2a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003a2e:	430b      	orrs	r3, r1
 8003a30:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a32:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a34:	6813      	ldr	r3, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a36:	2902      	cmp	r1, #2
 8003a38:	f000 80a1 	beq.w	8003b7e <HAL_RCC_ClockConfig+0x226>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a3c:	2903      	cmp	r1, #3
 8003a3e:	f000 8098 	beq.w	8003b72 <HAL_RCC_ClockConfig+0x21a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003a42:	2901      	cmp	r1, #1
 8003a44:	f000 80a1 	beq.w	8003b8a <HAL_RCC_ClockConfig+0x232>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a48:	075f      	lsls	r7, r3, #29
 8003a4a:	d59c      	bpl.n	8003986 <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a4c:	4e52      	ldr	r6, [pc, #328]	@ (8003b98 <HAL_RCC_ClockConfig+0x240>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a4e:	f241 3888 	movw	r8, #5000	@ 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a52:	6933      	ldr	r3, [r6, #16]
 8003a54:	f023 0307 	bic.w	r3, r3, #7
 8003a58:	430b      	orrs	r3, r1
 8003a5a:	6133      	str	r3, [r6, #16]
      tickstart = HAL_GetTick();
 8003a5c:	f7fe fce2 	bl	8002424 <HAL_GetTick>
 8003a60:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a62:	e005      	b.n	8003a70 <HAL_RCC_ClockConfig+0x118>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a64:	f7fe fcde 	bl	8002424 <HAL_GetTick>
 8003a68:	1bc0      	subs	r0, r0, r7
 8003a6a:	4540      	cmp	r0, r8
 8003a6c:	f200 808b 	bhi.w	8003b86 <HAL_RCC_ClockConfig+0x22e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a70:	6933      	ldr	r3, [r6, #16]
 8003a72:	6862      	ldr	r2, [r4, #4]
 8003a74:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003a78:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8003a7c:	d1f2      	bne.n	8003a64 <HAL_RCC_ClockConfig+0x10c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a7e:	6823      	ldr	r3, [r4, #0]
 8003a80:	079e      	lsls	r6, r3, #30
 8003a82:	d506      	bpl.n	8003a92 <HAL_RCC_ClockConfig+0x13a>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003a84:	68e0      	ldr	r0, [r4, #12]
 8003a86:	4944      	ldr	r1, [pc, #272]	@ (8003b98 <HAL_RCC_ClockConfig+0x240>)
 8003a88:	698a      	ldr	r2, [r1, #24]
 8003a8a:	f002 020f 	and.w	r2, r2, #15
 8003a8e:	4290      	cmp	r0, r2
 8003a90:	d369      	bcc.n	8003b66 <HAL_RCC_ClockConfig+0x20e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a92:	4940      	ldr	r1, [pc, #256]	@ (8003b94 <HAL_RCC_ClockConfig+0x23c>)
 8003a94:	680a      	ldr	r2, [r1, #0]
 8003a96:	f002 020f 	and.w	r2, r2, #15
 8003a9a:	42aa      	cmp	r2, r5
 8003a9c:	d90a      	bls.n	8003ab4 <HAL_RCC_ClockConfig+0x15c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a9e:	680a      	ldr	r2, [r1, #0]
 8003aa0:	f022 020f 	bic.w	r2, r2, #15
 8003aa4:	432a      	orrs	r2, r5
 8003aa6:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aa8:	680a      	ldr	r2, [r1, #0]
 8003aaa:	f002 020f 	and.w	r2, r2, #15
 8003aae:	42aa      	cmp	r2, r5
 8003ab0:	f47f af69 	bne.w	8003986 <HAL_RCC_ClockConfig+0x2e>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003ab4:	0758      	lsls	r0, r3, #29
 8003ab6:	d50b      	bpl.n	8003ad0 <HAL_RCC_ClockConfig+0x178>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003ab8:	4937      	ldr	r1, [pc, #220]	@ (8003b98 <HAL_RCC_ClockConfig+0x240>)
 8003aba:	6920      	ldr	r0, [r4, #16]
 8003abc:	698a      	ldr	r2, [r1, #24]
 8003abe:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8003ac2:	4290      	cmp	r0, r2
 8003ac4:	d204      	bcs.n	8003ad0 <HAL_RCC_ClockConfig+0x178>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003ac6:	698a      	ldr	r2, [r1, #24]
 8003ac8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003acc:	4302      	orrs	r2, r0
 8003ace:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ad0:	0719      	lsls	r1, r3, #28
 8003ad2:	d50b      	bpl.n	8003aec <HAL_RCC_ClockConfig+0x194>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003ad4:	4930      	ldr	r1, [pc, #192]	@ (8003b98 <HAL_RCC_ClockConfig+0x240>)
 8003ad6:	6960      	ldr	r0, [r4, #20]
 8003ad8:	69ca      	ldr	r2, [r1, #28]
 8003ada:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8003ade:	4290      	cmp	r0, r2
 8003ae0:	d204      	bcs.n	8003aec <HAL_RCC_ClockConfig+0x194>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003ae2:	69ca      	ldr	r2, [r1, #28]
 8003ae4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003ae8:	4302      	orrs	r2, r0
 8003aea:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aec:	06da      	lsls	r2, r3, #27
 8003aee:	d50b      	bpl.n	8003b08 <HAL_RCC_ClockConfig+0x1b0>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003af0:	4929      	ldr	r1, [pc, #164]	@ (8003b98 <HAL_RCC_ClockConfig+0x240>)
 8003af2:	69a0      	ldr	r0, [r4, #24]
 8003af4:	69ca      	ldr	r2, [r1, #28]
 8003af6:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8003afa:	4290      	cmp	r0, r2
 8003afc:	d204      	bcs.n	8003b08 <HAL_RCC_ClockConfig+0x1b0>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003afe:	69ca      	ldr	r2, [r1, #28]
 8003b00:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003b04:	4302      	orrs	r2, r0
 8003b06:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003b08:	069b      	lsls	r3, r3, #26
 8003b0a:	d50b      	bpl.n	8003b24 <HAL_RCC_ClockConfig+0x1cc>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003b0c:	4a22      	ldr	r2, [pc, #136]	@ (8003b98 <HAL_RCC_ClockConfig+0x240>)
 8003b0e:	69e1      	ldr	r1, [r4, #28]
 8003b10:	6a13      	ldr	r3, [r2, #32]
 8003b12:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003b16:	4299      	cmp	r1, r3
 8003b18:	d204      	bcs.n	8003b24 <HAL_RCC_ClockConfig+0x1cc>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003b1a:	6a13      	ldr	r3, [r2, #32]
 8003b1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b20:	430b      	orrs	r3, r1
 8003b22:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003b24:	f7ff fe8a 	bl	800383c <HAL_RCC_GetSysClockFreq>
 8003b28:	4a1b      	ldr	r2, [pc, #108]	@ (8003b98 <HAL_RCC_ClockConfig+0x240>)
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	481b      	ldr	r0, [pc, #108]	@ (8003b9c <HAL_RCC_ClockConfig+0x244>)
 8003b2e:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003b30:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003b32:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 8003b36:	4d1a      	ldr	r5, [pc, #104]	@ (8003ba0 <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003b38:	f002 020f 	and.w	r2, r2, #15
 8003b3c:	4c19      	ldr	r4, [pc, #100]	@ (8003ba4 <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003b3e:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003b40:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003b42:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick (uwTickPrio);
 8003b46:	4818      	ldr	r0, [pc, #96]	@ (8003ba8 <HAL_RCC_ClockConfig+0x250>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003b48:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003b4c:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick (uwTickPrio);
 8003b4e:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 8003b50:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003b52:	40d3      	lsrs	r3, r2
 8003b54:	6023      	str	r3, [r4, #0]
}
 8003b56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 8003b5a:	f7fe bc01 	b.w	8002360 <HAL_InitTick>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b5e:	2a00      	cmp	r2, #0
 8003b60:	f47f af60 	bne.w	8003a24 <HAL_RCC_ClockConfig+0xcc>
 8003b64:	e795      	b.n	8003a92 <HAL_RCC_ClockConfig+0x13a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b66:	698a      	ldr	r2, [r1, #24]
 8003b68:	f022 020f 	bic.w	r2, r2, #15
 8003b6c:	4302      	orrs	r2, r0
 8003b6e:	618a      	str	r2, [r1, #24]
 8003b70:	e78f      	b.n	8003a92 <HAL_RCC_ClockConfig+0x13a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003b72:	019a      	lsls	r2, r3, #6
 8003b74:	f53f af6a 	bmi.w	8003a4c <HAL_RCC_ClockConfig+0xf4>
 8003b78:	e705      	b.n	8003986 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8003b7a:	2001      	movs	r0, #1
}
 8003b7c:	4770      	bx	lr
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b7e:	0398      	lsls	r0, r3, #14
 8003b80:	f53f af64 	bmi.w	8003a4c <HAL_RCC_ClockConfig+0xf4>
 8003b84:	e6ff      	b.n	8003986 <HAL_RCC_ClockConfig+0x2e>
            return HAL_TIMEOUT;
 8003b86:	2003      	movs	r0, #3
 8003b88:	e6fe      	b.n	8003988 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b8a:	05db      	lsls	r3, r3, #23
 8003b8c:	f53f af5e 	bmi.w	8003a4c <HAL_RCC_ClockConfig+0xf4>
 8003b90:	e6f9      	b.n	8003986 <HAL_RCC_ClockConfig+0x2e>
 8003b92:	bf00      	nop
 8003b94:	52002000 	.word	0x52002000
 8003b98:	58024400 	.word	0x58024400
 8003b9c:	080108d8 	.word	0x080108d8
 8003ba0:	2400007c 	.word	0x2400007c
 8003ba4:	24000078 	.word	0x24000078
 8003ba8:	24000074 	.word	0x24000074

08003bac <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bac:	4a18      	ldr	r2, [pc, #96]	@ (8003c10 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bae:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bb0:	6913      	ldr	r3, [r2, #16]
 8003bb2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003bb6:	2b10      	cmp	r3, #16
 8003bb8:	d024      	beq.n	8003c04 <HAL_RCC_GetHCLKFreq+0x58>
 8003bba:	2b18      	cmp	r3, #24
 8003bbc:	d009      	beq.n	8003bd2 <HAL_RCC_GetHCLKFreq+0x26>
 8003bbe:	bb1b      	cbnz	r3, 8003c08 <HAL_RCC_GetHCLKFreq+0x5c>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003bc0:	6813      	ldr	r3, [r2, #0]
 8003bc2:	069b      	lsls	r3, r3, #26
 8003bc4:	d522      	bpl.n	8003c0c <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003bc6:	6812      	ldr	r2, [r2, #0]
 8003bc8:	4b12      	ldr	r3, [pc, #72]	@ (8003c14 <HAL_RCC_GetHCLKFreq+0x68>)
 8003bca:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8003bce:	40d3      	lsrs	r3, r2
 8003bd0:	e002      	b.n	8003bd8 <HAL_RCC_GetHCLKFreq+0x2c>
 8003bd2:	f7ff fa8b 	bl	80030ec <HAL_RCC_GetSysClockFreq.part.0>
 8003bd6:	4603      	mov	r3, r0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003bd8:	490d      	ldr	r1, [pc, #52]	@ (8003c10 <HAL_RCC_GetHCLKFreq+0x64>)
 8003bda:	480f      	ldr	r0, [pc, #60]	@ (8003c18 <HAL_RCC_GetHCLKFreq+0x6c>)
 8003bdc:	698a      	ldr	r2, [r1, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003bde:	6989      	ldr	r1, [r1, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003be0:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003be4:	4c0d      	ldr	r4, [pc, #52]	@ (8003c1c <HAL_RCC_GetHCLKFreq+0x70>)
 8003be6:	f001 010f 	and.w	r1, r1, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003bea:	4d0d      	ldr	r5, [pc, #52]	@ (8003c20 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003bec:	5c82      	ldrb	r2, [r0, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003bee:	5c40      	ldrb	r0, [r0, r1]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003bf0:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003bf4:	f000 001f 	and.w	r0, r0, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003bf8:	40d3      	lsrs	r3, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003bfa:	fa23 f000 	lsr.w	r0, r3, r0
  SystemCoreClock = common_system_clock;
 8003bfe:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003c00:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8003c02:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c04:	4b07      	ldr	r3, [pc, #28]	@ (8003c24 <HAL_RCC_GetHCLKFreq+0x78>)
 8003c06:	e7e7      	b.n	8003bd8 <HAL_RCC_GetHCLKFreq+0x2c>
    sysclockfreq = CSI_VALUE;
 8003c08:	4b07      	ldr	r3, [pc, #28]	@ (8003c28 <HAL_RCC_GetHCLKFreq+0x7c>)
 8003c0a:	e7e5      	b.n	8003bd8 <HAL_RCC_GetHCLKFreq+0x2c>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003c0c:	4b01      	ldr	r3, [pc, #4]	@ (8003c14 <HAL_RCC_GetHCLKFreq+0x68>)
 8003c0e:	e7e3      	b.n	8003bd8 <HAL_RCC_GetHCLKFreq+0x2c>
 8003c10:	58024400 	.word	0x58024400
 8003c14:	03d09000 	.word	0x03d09000
 8003c18:	080108d8 	.word	0x080108d8
 8003c1c:	24000078 	.word	0x24000078
 8003c20:	2400007c 	.word	0x2400007c
 8003c24:	017d7840 	.word	0x017d7840
 8003c28:	003d0900 	.word	0x003d0900

08003c2c <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c2c:	4a1c      	ldr	r2, [pc, #112]	@ (8003ca0 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c2e:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c30:	6913      	ldr	r3, [r2, #16]
 8003c32:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c36:	2b10      	cmp	r3, #16
 8003c38:	d02b      	beq.n	8003c92 <HAL_RCC_GetPCLK1Freq+0x66>
 8003c3a:	2b18      	cmp	r3, #24
 8003c3c:	d009      	beq.n	8003c52 <HAL_RCC_GetPCLK1Freq+0x26>
 8003c3e:	bb53      	cbnz	r3, 8003c96 <HAL_RCC_GetPCLK1Freq+0x6a>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c40:	6813      	ldr	r3, [r2, #0]
 8003c42:	069b      	lsls	r3, r3, #26
 8003c44:	d529      	bpl.n	8003c9a <HAL_RCC_GetPCLK1Freq+0x6e>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003c46:	6812      	ldr	r2, [r2, #0]
 8003c48:	4b16      	ldr	r3, [pc, #88]	@ (8003ca4 <HAL_RCC_GetPCLK1Freq+0x78>)
 8003c4a:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8003c4e:	40d3      	lsrs	r3, r2
 8003c50:	e002      	b.n	8003c58 <HAL_RCC_GetPCLK1Freq+0x2c>
 8003c52:	f7ff fa4b 	bl	80030ec <HAL_RCC_GetSysClockFreq.part.0>
 8003c56:	4603      	mov	r3, r0
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003c58:	4a11      	ldr	r2, [pc, #68]	@ (8003ca0 <HAL_RCC_GetPCLK1Freq+0x74>)
 8003c5a:	4913      	ldr	r1, [pc, #76]	@ (8003ca8 <HAL_RCC_GetPCLK1Freq+0x7c>)
 8003c5c:	6990      	ldr	r0, [r2, #24]
  SystemCoreClock = common_system_clock;
 8003c5e:	4d13      	ldr	r5, [pc, #76]	@ (8003cac <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003c60:	f3c0 2003 	ubfx	r0, r0, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003c64:	4c12      	ldr	r4, [pc, #72]	@ (8003cb0 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003c66:	5c08      	ldrb	r0, [r1, r0]
 8003c68:	f000 001f 	and.w	r0, r0, #31
 8003c6c:	40c3      	lsrs	r3, r0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003c6e:	6990      	ldr	r0, [r2, #24]
 8003c70:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 8003c74:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003c76:	5c08      	ldrb	r0, [r1, r0]
 8003c78:	f000 001f 	and.w	r0, r0, #31
 8003c7c:	40c3      	lsrs	r3, r0
 8003c7e:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003c80:	69d2      	ldr	r2, [r2, #28]
 8003c82:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8003c86:	5c88      	ldrb	r0, [r1, r2]
 8003c88:	f000 001f 	and.w	r0, r0, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003c8c:	fa23 f000 	lsr.w	r0, r3, r0
 8003c90:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c92:	4b08      	ldr	r3, [pc, #32]	@ (8003cb4 <HAL_RCC_GetPCLK1Freq+0x88>)
 8003c94:	e7e0      	b.n	8003c58 <HAL_RCC_GetPCLK1Freq+0x2c>
    sysclockfreq = CSI_VALUE;
 8003c96:	4b08      	ldr	r3, [pc, #32]	@ (8003cb8 <HAL_RCC_GetPCLK1Freq+0x8c>)
 8003c98:	e7de      	b.n	8003c58 <HAL_RCC_GetPCLK1Freq+0x2c>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003c9a:	4b02      	ldr	r3, [pc, #8]	@ (8003ca4 <HAL_RCC_GetPCLK1Freq+0x78>)
 8003c9c:	e7dc      	b.n	8003c58 <HAL_RCC_GetPCLK1Freq+0x2c>
 8003c9e:	bf00      	nop
 8003ca0:	58024400 	.word	0x58024400
 8003ca4:	03d09000 	.word	0x03d09000
 8003ca8:	080108d8 	.word	0x080108d8
 8003cac:	2400007c 	.word	0x2400007c
 8003cb0:	24000078 	.word	0x24000078
 8003cb4:	017d7840 	.word	0x017d7840
 8003cb8:	003d0900 	.word	0x003d0900

08003cbc <HAL_RCC_GetPCLK2Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cbc:	4a1c      	ldr	r2, [pc, #112]	@ (8003d30 <HAL_RCC_GetPCLK2Freq+0x74>)
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cbe:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cc0:	6913      	ldr	r3, [r2, #16]
 8003cc2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003cc6:	2b10      	cmp	r3, #16
 8003cc8:	d02b      	beq.n	8003d22 <HAL_RCC_GetPCLK2Freq+0x66>
 8003cca:	2b18      	cmp	r3, #24
 8003ccc:	d009      	beq.n	8003ce2 <HAL_RCC_GetPCLK2Freq+0x26>
 8003cce:	bb53      	cbnz	r3, 8003d26 <HAL_RCC_GetPCLK2Freq+0x6a>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003cd0:	6813      	ldr	r3, [r2, #0]
 8003cd2:	069b      	lsls	r3, r3, #26
 8003cd4:	d529      	bpl.n	8003d2a <HAL_RCC_GetPCLK2Freq+0x6e>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003cd6:	6812      	ldr	r2, [r2, #0]
 8003cd8:	4b16      	ldr	r3, [pc, #88]	@ (8003d34 <HAL_RCC_GetPCLK2Freq+0x78>)
 8003cda:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8003cde:	40d3      	lsrs	r3, r2
 8003ce0:	e002      	b.n	8003ce8 <HAL_RCC_GetPCLK2Freq+0x2c>
 8003ce2:	f7ff fa03 	bl	80030ec <HAL_RCC_GetSysClockFreq.part.0>
 8003ce6:	4603      	mov	r3, r0
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003ce8:	4a11      	ldr	r2, [pc, #68]	@ (8003d30 <HAL_RCC_GetPCLK2Freq+0x74>)
 8003cea:	4913      	ldr	r1, [pc, #76]	@ (8003d38 <HAL_RCC_GetPCLK2Freq+0x7c>)
 8003cec:	6990      	ldr	r0, [r2, #24]
  SystemCoreClock = common_system_clock;
 8003cee:	4d13      	ldr	r5, [pc, #76]	@ (8003d3c <HAL_RCC_GetPCLK2Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003cf0:	f3c0 2003 	ubfx	r0, r0, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003cf4:	4c12      	ldr	r4, [pc, #72]	@ (8003d40 <HAL_RCC_GetPCLK2Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003cf6:	5c08      	ldrb	r0, [r1, r0]
 8003cf8:	f000 001f 	and.w	r0, r0, #31
 8003cfc:	40c3      	lsrs	r3, r0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003cfe:	6990      	ldr	r0, [r2, #24]
 8003d00:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 8003d04:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003d06:	5c08      	ldrb	r0, [r1, r0]
 8003d08:	f000 001f 	and.w	r0, r0, #31
 8003d0c:	40c3      	lsrs	r3, r0
 8003d0e:	6023      	str	r3, [r4, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003d10:	69d2      	ldr	r2, [r2, #28]
 8003d12:	f3c2 2202 	ubfx	r2, r2, #8, #3
 8003d16:	5c88      	ldrb	r0, [r1, r2]
 8003d18:	f000 001f 	and.w	r0, r0, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003d1c:	fa23 f000 	lsr.w	r0, r3, r0
 8003d20:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d22:	4b08      	ldr	r3, [pc, #32]	@ (8003d44 <HAL_RCC_GetPCLK2Freq+0x88>)
 8003d24:	e7e0      	b.n	8003ce8 <HAL_RCC_GetPCLK2Freq+0x2c>
    sysclockfreq = CSI_VALUE;
 8003d26:	4b08      	ldr	r3, [pc, #32]	@ (8003d48 <HAL_RCC_GetPCLK2Freq+0x8c>)
 8003d28:	e7de      	b.n	8003ce8 <HAL_RCC_GetPCLK2Freq+0x2c>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003d2a:	4b02      	ldr	r3, [pc, #8]	@ (8003d34 <HAL_RCC_GetPCLK2Freq+0x78>)
 8003d2c:	e7dc      	b.n	8003ce8 <HAL_RCC_GetPCLK2Freq+0x2c>
 8003d2e:	bf00      	nop
 8003d30:	58024400 	.word	0x58024400
 8003d34:	03d09000 	.word	0x03d09000
 8003d38:	080108d8 	.word	0x080108d8
 8003d3c:	2400007c 	.word	0x2400007c
 8003d40:	24000078 	.word	0x24000078
 8003d44:	017d7840 	.word	0x017d7840
 8003d48:	003d0900 	.word	0x003d0900

08003d4c <RCCEx_PLL2_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 8003d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003d4e:	4c36      	ldr	r4, [pc, #216]	@ (8003e28 <RCCEx_PLL2_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 8003d50:	4606      	mov	r6, r0
 8003d52:	460f      	mov	r7, r1
    __HAL_RCC_PLL2_DISABLE();
 8003d54:	6823      	ldr	r3, [r4, #0]
 8003d56:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003d5a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d5c:	f7fe fb62 	bl	8002424 <HAL_GetTick>
 8003d60:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003d62:	e004      	b.n	8003d6e <RCCEx_PLL2_Config.part.0+0x22>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003d64:	f7fe fb5e 	bl	8002424 <HAL_GetTick>
 8003d68:	1b40      	subs	r0, r0, r5
 8003d6a:	2802      	cmp	r0, #2
 8003d6c:	d856      	bhi.n	8003e1c <RCCEx_PLL2_Config.part.0+0xd0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003d6e:	6823      	ldr	r3, [r4, #0]
 8003d70:	011a      	lsls	r2, r3, #4
 8003d72:	d4f7      	bmi.n	8003d64 <RCCEx_PLL2_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003d74:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003d76:	6832      	ldr	r2, [r6, #0]
 8003d78:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003d7c:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8003d80:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003d82:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8003d86:	3b01      	subs	r3, #1
 8003d88:	3a01      	subs	r2, #1
 8003d8a:	025b      	lsls	r3, r3, #9
 8003d8c:	0412      	lsls	r2, r2, #16
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8003d94:	4313      	orrs	r3, r2
 8003d96:	6872      	ldr	r2, [r6, #4]
 8003d98:	3a01      	subs	r2, #1
 8003d9a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	6932      	ldr	r2, [r6, #16]
 8003da2:	3a01      	subs	r2, #1
 8003da4:	0612      	lsls	r2, r2, #24
 8003da6:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8003daa:	4313      	orrs	r3, r2
 8003dac:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003dae:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003db0:	6972      	ldr	r2, [r6, #20]
 8003db2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003db6:	4313      	orrs	r3, r2
 8003db8:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003dba:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003dbc:	69b2      	ldr	r2, [r6, #24]
 8003dbe:	f023 0320 	bic.w	r3, r3, #32
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003dc6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003dc8:	f023 0310 	bic.w	r3, r3, #16
 8003dcc:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003dce:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003dd0:	69f2      	ldr	r2, [r6, #28]
 8003dd2:	f36f 03cf 	bfc	r3, #3, #13
 8003dd6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003dda:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003ddc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003dde:	f043 0310 	orr.w	r3, r3, #16
 8003de2:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003de4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8003de6:	b1df      	cbz	r7, 8003e20 <RCCEx_PLL2_Config.part.0+0xd4>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003de8:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003dea:	bf0c      	ite	eq
 8003dec:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003df0:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 8003df4:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003df6:	4c0c      	ldr	r4, [pc, #48]	@ (8003e28 <RCCEx_PLL2_Config.part.0+0xdc>)
 8003df8:	6823      	ldr	r3, [r4, #0]
 8003dfa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003dfe:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e00:	f7fe fb10 	bl	8002424 <HAL_GetTick>
 8003e04:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003e06:	e004      	b.n	8003e12 <RCCEx_PLL2_Config.part.0+0xc6>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003e08:	f7fe fb0c 	bl	8002424 <HAL_GetTick>
 8003e0c:	1b40      	subs	r0, r0, r5
 8003e0e:	2802      	cmp	r0, #2
 8003e10:	d804      	bhi.n	8003e1c <RCCEx_PLL2_Config.part.0+0xd0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003e12:	6823      	ldr	r3, [r4, #0]
 8003e14:	011b      	lsls	r3, r3, #4
 8003e16:	d5f7      	bpl.n	8003e08 <RCCEx_PLL2_Config.part.0+0xbc>
    }

  }


  return status;
 8003e18:	2000      	movs	r0, #0
}
 8003e1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8003e1c:	2003      	movs	r0, #3
}
 8003e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003e20:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003e24:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003e26:	e7e6      	b.n	8003df6 <RCCEx_PLL2_Config.part.0+0xaa>
 8003e28:	58024400 	.word	0x58024400

08003e2c <RCCEx_PLL3_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 8003e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003e2e:	4c36      	ldr	r4, [pc, #216]	@ (8003f08 <RCCEx_PLL3_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 8003e30:	4606      	mov	r6, r0
 8003e32:	460f      	mov	r7, r1
    __HAL_RCC_PLL3_DISABLE();
 8003e34:	6823      	ldr	r3, [r4, #0]
 8003e36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e3a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e3c:	f7fe faf2 	bl	8002424 <HAL_GetTick>
 8003e40:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003e42:	e004      	b.n	8003e4e <RCCEx_PLL3_Config.part.0+0x22>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003e44:	f7fe faee 	bl	8002424 <HAL_GetTick>
 8003e48:	1b40      	subs	r0, r0, r5
 8003e4a:	2802      	cmp	r0, #2
 8003e4c:	d856      	bhi.n	8003efc <RCCEx_PLL3_Config.part.0+0xd0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003e4e:	6823      	ldr	r3, [r4, #0]
 8003e50:	009a      	lsls	r2, r3, #2
 8003e52:	d4f7      	bmi.n	8003e44 <RCCEx_PLL3_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003e54:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003e56:	6832      	ldr	r2, [r6, #0]
 8003e58:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 8003e5c:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8003e60:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003e62:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8003e66:	3b01      	subs	r3, #1
 8003e68:	3a01      	subs	r2, #1
 8003e6a:	025b      	lsls	r3, r3, #9
 8003e6c:	0412      	lsls	r2, r2, #16
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8003e74:	4313      	orrs	r3, r2
 8003e76:	6872      	ldr	r2, [r6, #4]
 8003e78:	3a01      	subs	r2, #1
 8003e7a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	6932      	ldr	r2, [r6, #16]
 8003e82:	3a01      	subs	r2, #1
 8003e84:	0612      	lsls	r2, r2, #24
 8003e86:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003e8e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003e90:	6972      	ldr	r2, [r6, #20]
 8003e92:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003e96:	4313      	orrs	r3, r2
 8003e98:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003e9a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003e9c:	69b2      	ldr	r2, [r6, #24]
 8003e9e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003ea6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003ea8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003eac:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003eae:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003eb0:	69f2      	ldr	r2, [r6, #28]
 8003eb2:	f36f 03cf 	bfc	r3, #3, #13
 8003eb6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003eba:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003ebc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003ebe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ec2:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003ec4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8003ec6:	b1df      	cbz	r7, 8003f00 <RCCEx_PLL3_Config.part.0+0xd4>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003ec8:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003eca:	bf0c      	ite	eq
 8003ecc:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003ed0:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 8003ed4:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003ed6:	4c0c      	ldr	r4, [pc, #48]	@ (8003f08 <RCCEx_PLL3_Config.part.0+0xdc>)
 8003ed8:	6823      	ldr	r3, [r4, #0]
 8003eda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ede:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ee0:	f7fe faa0 	bl	8002424 <HAL_GetTick>
 8003ee4:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003ee6:	e004      	b.n	8003ef2 <RCCEx_PLL3_Config.part.0+0xc6>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003ee8:	f7fe fa9c 	bl	8002424 <HAL_GetTick>
 8003eec:	1b40      	subs	r0, r0, r5
 8003eee:	2802      	cmp	r0, #2
 8003ef0:	d804      	bhi.n	8003efc <RCCEx_PLL3_Config.part.0+0xd0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003ef2:	6823      	ldr	r3, [r4, #0]
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	d5f7      	bpl.n	8003ee8 <RCCEx_PLL3_Config.part.0+0xbc>
    }

  }


  return status;
 8003ef8:	2000      	movs	r0, #0
}
 8003efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8003efc:	2003      	movs	r0, #3
}
 8003efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003f00:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003f04:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003f06:	e7e6      	b.n	8003ed6 <RCCEx_PLL3_Config.part.0+0xaa>
 8003f08:	58024400 	.word	0x58024400

08003f0c <HAL_RCCEx_PeriphCLKConfig>:
{
 8003f0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f10:	6803      	ldr	r3, [r0, #0]
{
 8003f12:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f14:	f013 6600 	ands.w	r6, r3, #134217728	@ 0x8000000
 8003f18:	d023      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8003f1a:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 8003f1c:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
 8003f20:	f000 8511 	beq.w	8004946 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
 8003f24:	f200 85e4 	bhi.w	8004af0 <HAL_RCCEx_PeriphCLKConfig+0xbe4>
 8003f28:	2a00      	cmp	r2, #0
 8003f2a:	f000 84cd 	beq.w	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
 8003f2e:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 8003f32:	f040 85e1 	bne.w	8004af8 <HAL_RCCEx_PeriphCLKConfig+0xbec>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003f36:	4aa2      	ldr	r2, [pc, #648]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8003f38:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003f3a:	f002 0203 	and.w	r2, r2, #3
 8003f3e:	2a03      	cmp	r2, #3
 8003f40:	f000 85da 	beq.w	8004af8 <HAL_RCCEx_PeriphCLKConfig+0xbec>
 8003f44:	2102      	movs	r1, #2
 8003f46:	3004      	adds	r0, #4
 8003f48:	f7ff ff00 	bl	8003d4c <RCCEx_PLL2_Config.part.0>
 8003f4c:	4606      	mov	r6, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003f4e:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003f50:	b93e      	cbnz	r6, 8003f62 <HAL_RCCEx_PeriphCLKConfig+0x56>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003f52:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003f54:	489a      	ldr	r0, [pc, #616]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f56:	2600      	movs	r6, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003f58:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 8003f5a:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	6502      	str	r2, [r0, #80]	@ 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003f62:	05dd      	lsls	r5, r3, #23
 8003f64:	d50a      	bpl.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Sai1ClockSelection)
 8003f66:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003f68:	2a04      	cmp	r2, #4
 8003f6a:	d806      	bhi.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003f6c:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003f70:	04f90375 	.word	0x04f90375
 8003f74:	037a050c 	.word	0x037a050c
 8003f78:	037a      	.short	0x037a
      status = ret;
 8003f7a:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 8003f7c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003f7e:	0598      	lsls	r0, r3, #22
 8003f80:	d522      	bpl.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    switch(PeriphClkInit->Sai23ClockSelection)
 8003f82:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8003f84:	2a80      	cmp	r2, #128	@ 0x80
 8003f86:	f000 84b8 	beq.w	80048fa <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8003f8a:	f200 85c4 	bhi.w	8004b16 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
 8003f8e:	2a00      	cmp	r2, #0
 8003f90:	f000 84c7 	beq.w	8004922 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8003f94:	2a40      	cmp	r2, #64	@ 0x40
 8003f96:	f040 85c5 	bne.w	8004b24 <HAL_RCCEx_PeriphCLKConfig+0xc18>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003f9a:	4a89      	ldr	r2, [pc, #548]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8003f9c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003f9e:	f002 0203 	and.w	r2, r2, #3
 8003fa2:	2a03      	cmp	r2, #3
 8003fa4:	f000 85be 	beq.w	8004b24 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8003fa8:	2100      	movs	r1, #0
 8003faa:	1d20      	adds	r0, r4, #4
 8003fac:	f7ff fece 	bl	8003d4c <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003fb0:	6823      	ldr	r3, [r4, #0]
 8003fb2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003fb4:	2d00      	cmp	r5, #0
 8003fb6:	f040 84b1 	bne.w	800491c <HAL_RCCEx_PeriphCLKConfig+0xa10>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003fba:	4981      	ldr	r1, [pc, #516]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8003fbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003fbe:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 8003fc0:	f422 72e0 	bic.w	r2, r2, #448	@ 0x1c0
 8003fc4:	4302      	orrs	r2, r0
 8003fc6:	650a      	str	r2, [r1, #80]	@ 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003fc8:	0559      	lsls	r1, r3, #21
 8003fca:	d526      	bpl.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x10e>
    switch(PeriphClkInit->Sai4AClockSelection)
 8003fcc:	f8d4 20a4 	ldr.w	r2, [r4, #164]	@ 0xa4
 8003fd0:	f5b2 0f80 	cmp.w	r2, #4194304	@ 0x400000
 8003fd4:	f000 8464 	beq.w	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x994>
 8003fd8:	f200 8591 	bhi.w	8004afe <HAL_RCCEx_PeriphCLKConfig+0xbf2>
 8003fdc:	2a00      	cmp	r2, #0
 8003fde:	f000 847a 	beq.w	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x9ca>
 8003fe2:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
 8003fe6:	f040 8592 	bne.w	8004b0e <HAL_RCCEx_PeriphCLKConfig+0xc02>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003fea:	4a75      	ldr	r2, [pc, #468]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8003fec:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003fee:	f002 0203 	and.w	r2, r2, #3
 8003ff2:	2a03      	cmp	r2, #3
 8003ff4:	f000 858b 	beq.w	8004b0e <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8003ff8:	2100      	movs	r1, #0
 8003ffa:	1d20      	adds	r0, r4, #4
 8003ffc:	f7ff fea6 	bl	8003d4c <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004000:	6823      	ldr	r3, [r4, #0]
 8004002:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004004:	2d00      	cmp	r5, #0
 8004006:	f040 845c 	bne.w	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800400a:	496d      	ldr	r1, [pc, #436]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800400c:	f8d4 00a4 	ldr.w	r0, [r4, #164]	@ 0xa4
 8004010:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8004012:	f422 0260 	bic.w	r2, r2, #14680064	@ 0xe00000
 8004016:	4302      	orrs	r2, r0
 8004018:	658a      	str	r2, [r1, #88]	@ 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800401a:	051a      	lsls	r2, r3, #20
 800401c:	d526      	bpl.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x160>
    switch(PeriphClkInit->Sai4BClockSelection)
 800401e:	f8d4 20a8 	ldr.w	r2, [r4, #168]	@ 0xa8
 8004022:	f1b2 7f00 	cmp.w	r2, #33554432	@ 0x2000000
 8004026:	f000 84be 	beq.w	80049a6 <HAL_RCCEx_PeriphCLKConfig+0xa9a>
 800402a:	f200 8581 	bhi.w	8004b30 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800402e:	2a00      	cmp	r2, #0
 8004030:	f000 847e 	beq.w	8004930 <HAL_RCCEx_PeriphCLKConfig+0xa24>
 8004034:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 8004038:	f040 8582 	bne.w	8004b40 <HAL_RCCEx_PeriphCLKConfig+0xc34>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800403c:	4a60      	ldr	r2, [pc, #384]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800403e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004040:	f002 0203 	and.w	r2, r2, #3
 8004044:	2a03      	cmp	r2, #3
 8004046:	f000 857b 	beq.w	8004b40 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800404a:	2100      	movs	r1, #0
 800404c:	1d20      	adds	r0, r4, #4
 800404e:	f7ff fe7d 	bl	8003d4c <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004052:	6823      	ldr	r3, [r4, #0]
 8004054:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004056:	2d00      	cmp	r5, #0
 8004058:	f040 8472 	bne.w	8004940 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800405c:	4958      	ldr	r1, [pc, #352]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800405e:	f8d4 00a8 	ldr.w	r0, [r4, #168]	@ 0xa8
 8004062:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8004064:	f022 62e0 	bic.w	r2, r2, #117440512	@ 0x7000000
 8004068:	4302      	orrs	r2, r0
 800406a:	658a      	str	r2, [r1, #88]	@ 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800406c:	019f      	lsls	r7, r3, #6
 800406e:	d518      	bpl.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x196>
    switch(PeriphClkInit->QspiClockSelection)
 8004070:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8004072:	2a20      	cmp	r2, #32
 8004074:	f000 83f1 	beq.w	800485a <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8004078:	f200 8566 	bhi.w	8004b48 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800407c:	b13a      	cbz	r2, 800408e <HAL_RCCEx_PeriphCLKConfig+0x182>
 800407e:	2a10      	cmp	r2, #16
 8004080:	f040 8565 	bne.w	8004b4e <HAL_RCCEx_PeriphCLKConfig+0xc42>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004084:	494e      	ldr	r1, [pc, #312]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8004086:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8004088:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800408c:	62ca      	str	r2, [r1, #44]	@ 0x2c
    if(ret == HAL_OK)
 800408e:	2d00      	cmp	r5, #0
 8004090:	f040 8342 	bne.w	8004718 <HAL_RCCEx_PeriphCLKConfig+0x80c>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004094:	494a      	ldr	r1, [pc, #296]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8004096:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8004098:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 800409a:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 800409e:	4302      	orrs	r2, r0
 80040a0:	64ca      	str	r2, [r1, #76]	@ 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80040a2:	04d8      	lsls	r0, r3, #19
 80040a4:	d524      	bpl.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    switch(PeriphClkInit->Spi123ClockSelection)
 80040a6:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80040a8:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 80040ac:	f000 848b 	beq.w	80049c6 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 80040b0:	f200 8512 	bhi.w	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 80040b4:	2a00      	cmp	r2, #0
 80040b6:	f000 8415 	beq.w	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>
 80040ba:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 80040be:	f040 8513 	bne.w	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0xbdc>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80040c2:	4a3f      	ldr	r2, [pc, #252]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80040c4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80040c6:	f002 0203 	and.w	r2, r2, #3
 80040ca:	2a03      	cmp	r2, #3
 80040cc:	f000 850c 	beq.w	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0xbdc>
 80040d0:	2100      	movs	r1, #0
 80040d2:	1d20      	adds	r0, r4, #4
 80040d4:	f7ff fe3a 	bl	8003d4c <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80040d8:	6823      	ldr	r3, [r4, #0]
 80040da:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80040dc:	2d00      	cmp	r5, #0
 80040de:	f040 8409 	bne.w	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80040e2:	4937      	ldr	r1, [pc, #220]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80040e4:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 80040e6:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 80040e8:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80040ec:	4302      	orrs	r2, r0
 80040ee:	650a      	str	r2, [r1, #80]	@ 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80040f0:	0499      	lsls	r1, r3, #18
 80040f2:	d522      	bpl.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x22e>
    switch(PeriphClkInit->Spi45ClockSelection)
 80040f4:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80040f6:	f5b2 3f00 	cmp.w	r2, #131072	@ 0x20000
 80040fa:	f000 8332 	beq.w	8004762 <HAL_RCCEx_PeriphCLKConfig+0x856>
 80040fe:	f200 84dd 	bhi.w	8004abc <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8004102:	b182      	cbz	r2, 8004126 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8004104:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8004108:	f040 84e2 	bne.w	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800410c:	4a2c      	ldr	r2, [pc, #176]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800410e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004110:	f002 0203 	and.w	r2, r2, #3
 8004114:	2a03      	cmp	r2, #3
 8004116:	f000 84db 	beq.w	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>
 800411a:	2101      	movs	r1, #1
 800411c:	1d20      	adds	r0, r4, #4
 800411e:	f7ff fe15 	bl	8003d4c <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004122:	6823      	ldr	r3, [r4, #0]
 8004124:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004126:	2d00      	cmp	r5, #0
 8004128:	f040 8311 	bne.w	800474e <HAL_RCCEx_PeriphCLKConfig+0x842>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800412c:	4924      	ldr	r1, [pc, #144]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800412e:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8004130:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 8004132:	f422 22e0 	bic.w	r2, r2, #458752	@ 0x70000
 8004136:	4302      	orrs	r2, r0
 8004138:	650a      	str	r2, [r1, #80]	@ 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800413a:	045a      	lsls	r2, r3, #17
 800413c:	d524      	bpl.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    switch(PeriphClkInit->Spi6ClockSelection)
 800413e:	f8d4 20ac 	ldr.w	r2, [r4, #172]	@ 0xac
 8004142:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
 8004146:	f000 8399 	beq.w	800487c <HAL_RCCEx_PeriphCLKConfig+0x970>
 800414a:	f200 848f 	bhi.w	8004a6c <HAL_RCCEx_PeriphCLKConfig+0xb60>
 800414e:	b182      	cbz	r2, 8004172 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8004150:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
 8004154:	f040 8494 	bne.w	8004a80 <HAL_RCCEx_PeriphCLKConfig+0xb74>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004158:	4a19      	ldr	r2, [pc, #100]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800415a:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800415c:	f002 0203 	and.w	r2, r2, #3
 8004160:	2a03      	cmp	r2, #3
 8004162:	f000 848d 	beq.w	8004a80 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004166:	2101      	movs	r1, #1
 8004168:	1d20      	adds	r0, r4, #4
 800416a:	f7ff fdef 	bl	8003d4c <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800416e:	6823      	ldr	r3, [r4, #0]
 8004170:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004172:	2d00      	cmp	r5, #0
 8004174:	f040 82e7 	bne.w	8004746 <HAL_RCCEx_PeriphCLKConfig+0x83a>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004178:	4911      	ldr	r1, [pc, #68]	@ (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800417a:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
 800417e:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8004180:	f022 42e0 	bic.w	r2, r2, #1879048192	@ 0x70000000
 8004184:	4302      	orrs	r2, r0
 8004186:	658a      	str	r2, [r1, #88]	@ 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004188:	041f      	lsls	r7, r3, #16
 800418a:	d50d      	bpl.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    switch(PeriphClkInit->FdcanClockSelection)
 800418c:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 800418e:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
 8004192:	f000 81e5 	beq.w	8004560 <HAL_RCCEx_PeriphCLKConfig+0x654>
 8004196:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
 800419a:	f000 84e1 	beq.w	8004b60 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 800419e:	2a00      	cmp	r2, #0
 80041a0:	f000 81e3 	beq.w	800456a <HAL_RCCEx_PeriphCLKConfig+0x65e>
      status = ret;
 80041a4:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 80041a6:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80041a8:	01d8      	lsls	r0, r3, #7
 80041aa:	d514      	bpl.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    switch(PeriphClkInit->FmcClockSelection)
 80041ac:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80041ae:	2a03      	cmp	r2, #3
 80041b0:	f200 84ef 	bhi.w	8004b92 <HAL_RCCEx_PeriphCLKConfig+0xc86>
 80041b4:	e8df f012 	tbh	[pc, r2, lsl #1]
 80041b8:	0006000b 	.word	0x0006000b
 80041bc:	000b0340 	.word	0x000b0340
 80041c0:	58024400 	.word	0x58024400
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041c4:	4935      	ldr	r1, [pc, #212]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80041c6:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80041c8:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80041cc:	62ca      	str	r2, [r1, #44]	@ 0x2c
    if(ret == HAL_OK)
 80041ce:	2d00      	cmp	r5, #0
 80041d0:	f000 8298 	beq.w	8004704 <HAL_RCCEx_PeriphCLKConfig+0x7f8>
      status = ret;
 80041d4:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041d6:	0259      	lsls	r1, r3, #9
 80041d8:	f100 81fe 	bmi.w	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80041dc:	07df      	lsls	r7, r3, #31
 80041de:	d52f      	bpl.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x334>
    switch(PeriphClkInit->Usart16ClockSelection)
 80041e0:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 80041e2:	2a28      	cmp	r2, #40	@ 0x28
 80041e4:	d82a      	bhi.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x330>
 80041e6:	e8df f012 	tbh	[pc, r2, lsl #1]
 80041ea:	01db      	.short	0x01db
 80041ec:	00290029 	.word	0x00290029
 80041f0:	00290029 	.word	0x00290029
 80041f4:	00290029 	.word	0x00290029
 80041f8:	01ce0029 	.word	0x01ce0029
 80041fc:	00290029 	.word	0x00290029
 8004200:	00290029 	.word	0x00290029
 8004204:	00290029 	.word	0x00290029
 8004208:	04220029 	.word	0x04220029
 800420c:	00290029 	.word	0x00290029
 8004210:	00290029 	.word	0x00290029
 8004214:	00290029 	.word	0x00290029
 8004218:	01db0029 	.word	0x01db0029
 800421c:	00290029 	.word	0x00290029
 8004220:	00290029 	.word	0x00290029
 8004224:	00290029 	.word	0x00290029
 8004228:	01db0029 	.word	0x01db0029
 800422c:	00290029 	.word	0x00290029
 8004230:	00290029 	.word	0x00290029
 8004234:	00290029 	.word	0x00290029
 8004238:	01db0029 	.word	0x01db0029
      status = ret;
 800423c:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 800423e:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004240:	0798      	lsls	r0, r3, #30
 8004242:	d51c      	bpl.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x372>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004244:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 8004246:	2a05      	cmp	r2, #5
 8004248:	f200 849f 	bhi.w	8004b8a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
 800424c:	e8df f012 	tbh	[pc, r2, lsl #1]
 8004250:	00060013 	.word	0x00060013
 8004254:	001303dd 	.word	0x001303dd
 8004258:	00130013 	.word	0x00130013
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800425c:	4a0f      	ldr	r2, [pc, #60]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800425e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004260:	f002 0203 	and.w	r2, r2, #3
 8004264:	2a03      	cmp	r2, #3
 8004266:	f000 8490 	beq.w	8004b8a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
 800426a:	2101      	movs	r1, #1
 800426c:	1d20      	adds	r0, r4, #4
 800426e:	f7ff fd6d 	bl	8003d4c <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004272:	6823      	ldr	r3, [r4, #0]
 8004274:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004276:	2d00      	cmp	r5, #0
 8004278:	f000 8252 	beq.w	8004720 <HAL_RCCEx_PeriphCLKConfig+0x814>
      status = ret;
 800427c:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800427e:	0759      	lsls	r1, r3, #29
 8004280:	d51f      	bpl.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004282:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8004286:	2a05      	cmp	r2, #5
 8004288:	f200 847b 	bhi.w	8004b82 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800428c:	e8df f012 	tbh	[pc, r2, lsl #1]
 8004290:	00080015 	.word	0x00080015
 8004294:	001503ab 	.word	0x001503ab
 8004298:	00150015 	.word	0x00150015
 800429c:	58024400 	.word	0x58024400
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80042a0:	4aa4      	ldr	r2, [pc, #656]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x628>)
 80042a2:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80042a4:	f002 0203 	and.w	r2, r2, #3
 80042a8:	2a03      	cmp	r2, #3
 80042aa:	f000 846a 	beq.w	8004b82 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80042ae:	2101      	movs	r1, #1
 80042b0:	1d20      	adds	r0, r4, #4
 80042b2:	f7ff fd4b 	bl	8003d4c <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80042b6:	6823      	ldr	r3, [r4, #0]
 80042b8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80042ba:	2d00      	cmp	r5, #0
 80042bc:	f000 8238 	beq.w	8004730 <HAL_RCCEx_PeriphCLKConfig+0x824>
      status = ret;
 80042c0:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80042c2:	069a      	lsls	r2, r3, #26
 80042c4:	d524      	bpl.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x404>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80042c6:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 80042ca:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
 80042ce:	f000 8259 	beq.w	8004784 <HAL_RCCEx_PeriphCLKConfig+0x878>
 80042d2:	f200 83d9 	bhi.w	8004a88 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 80042d6:	b182      	cbz	r2, 80042fa <HAL_RCCEx_PeriphCLKConfig+0x3ee>
 80042d8:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
 80042dc:	f040 83de 	bne.w	8004a9c <HAL_RCCEx_PeriphCLKConfig+0xb90>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80042e0:	4a94      	ldr	r2, [pc, #592]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x628>)
 80042e2:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80042e4:	f002 0203 	and.w	r2, r2, #3
 80042e8:	2a03      	cmp	r2, #3
 80042ea:	f000 83d7 	beq.w	8004a9c <HAL_RCCEx_PeriphCLKConfig+0xb90>
 80042ee:	2100      	movs	r1, #0
 80042f0:	1d20      	adds	r0, r4, #4
 80042f2:	f7ff fd2b 	bl	8003d4c <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80042f6:	6823      	ldr	r3, [r4, #0]
 80042f8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80042fa:	2d00      	cmp	r5, #0
 80042fc:	f040 8221 	bne.w	8004742 <HAL_RCCEx_PeriphCLKConfig+0x836>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004300:	498c      	ldr	r1, [pc, #560]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x628>)
 8004302:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 8004306:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8004308:	f022 42e0 	bic.w	r2, r2, #1879048192	@ 0x70000000
 800430c:	4302      	orrs	r2, r0
 800430e:	654a      	str	r2, [r1, #84]	@ 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004310:	065f      	lsls	r7, r3, #25
 8004312:	d524      	bpl.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x452>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004314:	f8d4 2098 	ldr.w	r2, [r4, #152]	@ 0x98
 8004318:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 800431c:	f000 8243 	beq.w	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x89a>
 8004320:	f200 83bf 	bhi.w	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0xb96>
 8004324:	b182      	cbz	r2, 8004348 <HAL_RCCEx_PeriphCLKConfig+0x43c>
 8004326:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800432a:	f040 83c4 	bne.w	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800432e:	4a81      	ldr	r2, [pc, #516]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x628>)
 8004330:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004332:	f002 0203 	and.w	r2, r2, #3
 8004336:	2a03      	cmp	r2, #3
 8004338:	f000 83bd 	beq.w	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800433c:	2100      	movs	r1, #0
 800433e:	1d20      	adds	r0, r4, #4
 8004340:	f7ff fd04 	bl	8003d4c <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004344:	6823      	ldr	r3, [r4, #0]
 8004346:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004348:	2d00      	cmp	r5, #0
 800434a:	f040 8202 	bne.w	8004752 <HAL_RCCEx_PeriphCLKConfig+0x846>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800434e:	4979      	ldr	r1, [pc, #484]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x628>)
 8004350:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 8004354:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8004356:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 800435a:	4302      	orrs	r2, r0
 800435c:	658a      	str	r2, [r1, #88]	@ 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800435e:	0618      	lsls	r0, r3, #24
 8004360:	d524      	bpl.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004362:	f8d4 209c 	ldr.w	r2, [r4, #156]	@ 0x9c
 8004366:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
 800436a:	f000 822d 	beq.w	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800436e:	f200 8370 	bhi.w	8004a52 <HAL_RCCEx_PeriphCLKConfig+0xb46>
 8004372:	b182      	cbz	r2, 8004396 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8004374:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8004378:	f040 8375 	bne.w	8004a66 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800437c:	4a6d      	ldr	r2, [pc, #436]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x628>)
 800437e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004380:	f002 0203 	and.w	r2, r2, #3
 8004384:	2a03      	cmp	r2, #3
 8004386:	f000 836e 	beq.w	8004a66 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
 800438a:	2100      	movs	r1, #0
 800438c:	1d20      	adds	r0, r4, #4
 800438e:	f7ff fcdd 	bl	8003d4c <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004392:	6823      	ldr	r3, [r4, #0]
 8004394:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004396:	2d00      	cmp	r5, #0
 8004398:	f040 81d7 	bne.w	800474a <HAL_RCCEx_PeriphCLKConfig+0x83e>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800439c:	4965      	ldr	r1, [pc, #404]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x628>)
 800439e:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
 80043a2:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 80043a4:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80043a8:	4302      	orrs	r2, r0
 80043aa:	658a      	str	r2, [r1, #88]	@ 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80043ac:	0719      	lsls	r1, r3, #28
 80043ae:	d50b      	bpl.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80043b0:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 80043b4:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 80043b8:	f000 8160 	beq.w	800467c <HAL_RCCEx_PeriphCLKConfig+0x770>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80043bc:	485d      	ldr	r0, [pc, #372]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x628>)
 80043be:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 80043c0:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80043c4:	430a      	orrs	r2, r1
 80043c6:	6542      	str	r2, [r0, #84]	@ 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80043c8:	06da      	lsls	r2, r3, #27
 80043ca:	d50b      	bpl.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80043cc:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 80043d0:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 80043d4:	f000 8165 	beq.w	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x796>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80043d8:	4856      	ldr	r0, [pc, #344]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x628>)
 80043da:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 80043dc:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80043e0:	430a      	orrs	r2, r1
 80043e2:	6582      	str	r2, [r0, #88]	@ 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043e4:	031f      	lsls	r7, r3, #12
 80043e6:	d522      	bpl.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x522>
    switch(PeriphClkInit->AdcClockSelection)
 80043e8:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 80043ec:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 80043f0:	f000 81fb 	beq.w	80047ea <HAL_RCCEx_PeriphCLKConfig+0x8de>
 80043f4:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 80043f8:	d00e      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80043fa:	2900      	cmp	r1, #0
 80043fc:	f040 80c0 	bne.w	8004580 <HAL_RCCEx_PeriphCLKConfig+0x674>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004400:	4a4c      	ldr	r2, [pc, #304]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x628>)
 8004402:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004404:	f002 0203 	and.w	r2, r2, #3
 8004408:	2a03      	cmp	r2, #3
 800440a:	f000 80b9 	beq.w	8004580 <HAL_RCCEx_PeriphCLKConfig+0x674>
 800440e:	1d20      	adds	r0, r4, #4
 8004410:	f7ff fc9c 	bl	8003d4c <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004414:	6823      	ldr	r3, [r4, #0]
 8004416:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004418:	2d00      	cmp	r5, #0
 800441a:	f040 819c 	bne.w	8004756 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800441e:	4945      	ldr	r1, [pc, #276]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x628>)
 8004420:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
 8004424:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8004426:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 800442a:	4302      	orrs	r2, r0
 800442c:	658a      	str	r2, [r1, #88]	@ 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800442e:	0358      	lsls	r0, r3, #13
 8004430:	d50f      	bpl.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x546>
    switch(PeriphClkInit->UsbClockSelection)
 8004432:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
 8004436:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
 800443a:	f000 81eb 	beq.w	8004814 <HAL_RCCEx_PeriphCLKConfig+0x908>
 800443e:	f5b2 1f40 	cmp.w	r2, #3145728	@ 0x300000
 8004442:	f000 80bd 	beq.w	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 8004446:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 800444a:	f000 80b4 	beq.w	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
      status = ret;
 800444e:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 8004450:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004452:	03d9      	lsls	r1, r3, #15
 8004454:	d51c      	bpl.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x584>
    switch(PeriphClkInit->SdmmcClockSelection)
 8004456:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 8004458:	2a00      	cmp	r2, #0
 800445a:	f000 8135 	beq.w	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 800445e:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8004462:	d17a      	bne.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x64e>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004464:	4a33      	ldr	r2, [pc, #204]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x628>)
 8004466:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004468:	f002 0203 	and.w	r2, r2, #3
 800446c:	2a03      	cmp	r2, #3
 800446e:	d074      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004470:	2102      	movs	r1, #2
 8004472:	1d20      	adds	r0, r4, #4
 8004474:	f7ff fc6a 	bl	8003d4c <RCCEx_PLL2_Config.part.0>
 8004478:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800447a:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800447c:	2d00      	cmp	r5, #0
 800447e:	f040 812b 	bne.w	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004482:	492c      	ldr	r1, [pc, #176]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x628>)
 8004484:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8004486:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8004488:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800448c:	4302      	orrs	r2, r0
 800448e:	64ca      	str	r2, [r1, #76]	@ 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004490:	009a      	lsls	r2, r3, #2
 8004492:	d50d      	bpl.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004494:	4a27      	ldr	r2, [pc, #156]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x628>)
 8004496:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004498:	f002 0203 	and.w	r2, r2, #3
 800449c:	2a03      	cmp	r2, #3
 800449e:	d05a      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x64a>
 80044a0:	2102      	movs	r1, #2
 80044a2:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80044a6:	f7ff fcc1 	bl	8003e2c <RCCEx_PLL3_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80044aa:	6823      	ldr	r3, [r4, #0]
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80044ac:	2800      	cmp	r0, #0
 80044ae:	d152      	bne.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x64a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80044b0:	039f      	lsls	r7, r3, #14
 80044b2:	d441      	bmi.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  if (status == HAL_OK)
 80044b4:	1e30      	subs	r0, r6, #0
 80044b6:	bf18      	it	ne
 80044b8:	2001      	movne	r0, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80044ba:	02de      	lsls	r6, r3, #11
 80044bc:	d506      	bpl.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80044be:	491d      	ldr	r1, [pc, #116]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x628>)
 80044c0:	6f25      	ldr	r5, [r4, #112]	@ 0x70
 80044c2:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 80044c4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80044c8:	432a      	orrs	r2, r5
 80044ca:	650a      	str	r2, [r1, #80]	@ 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80044cc:	00dd      	lsls	r5, r3, #3
 80044ce:	d507      	bpl.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80044d0:	4918      	ldr	r1, [pc, #96]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x628>)
 80044d2:	f8d4 50b4 	ldr.w	r5, [r4, #180]	@ 0xb4
 80044d6:	690a      	ldr	r2, [r1, #16]
 80044d8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80044dc:	432a      	orrs	r2, r5
 80044de:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80044e0:	0299      	lsls	r1, r3, #10
 80044e2:	d506      	bpl.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80044e4:	4913      	ldr	r1, [pc, #76]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x628>)
 80044e6:	6ea5      	ldr	r5, [r4, #104]	@ 0x68
 80044e8:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 80044ea:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 80044ee:	432a      	orrs	r2, r5
 80044f0:	650a      	str	r2, [r1, #80]	@ 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80044f2:	005a      	lsls	r2, r3, #1
 80044f4:	d509      	bpl.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x5fe>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80044f6:	4a0f      	ldr	r2, [pc, #60]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x628>)
 80044f8:	6911      	ldr	r1, [r2, #16]
 80044fa:	f421 4100 	bic.w	r1, r1, #32768	@ 0x8000
 80044fe:	6111      	str	r1, [r2, #16]
 8004500:	6911      	ldr	r1, [r2, #16]
 8004502:	f8d4 50b8 	ldr.w	r5, [r4, #184]	@ 0xb8
 8004506:	4329      	orrs	r1, r5
 8004508:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800450a:	2b00      	cmp	r3, #0
 800450c:	da06      	bge.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x610>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800450e:	4909      	ldr	r1, [pc, #36]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x628>)
 8004510:	6d25      	ldr	r5, [r4, #80]	@ 0x50
 8004512:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8004514:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004518:	432a      	orrs	r2, r5
 800451a:	64ca      	str	r2, [r1, #76]	@ 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800451c:	021b      	lsls	r3, r3, #8
 800451e:	d507      	bpl.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x624>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004520:	4a04      	ldr	r2, [pc, #16]	@ (8004534 <HAL_RCCEx_PeriphCLKConfig+0x628>)
 8004522:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 8004526:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8004528:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800452c:	430b      	orrs	r3, r1
 800452e:	6553      	str	r3, [r2, #84]	@ 0x54
}
 8004530:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004534:	58024400 	.word	0x58024400
    switch(PeriphClkInit->RngClockSelection)
 8004538:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800453a:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 800453e:	f000 80cd 	beq.w	80046dc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
 8004542:	f240 810a 	bls.w	800475a <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8004546:	f422 7180 	bic.w	r1, r2, #256	@ 0x100
 800454a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800454e:	f000 80ca 	beq.w	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x7da>
      status=HAL_ERROR;
 8004552:	2001      	movs	r0, #1
 8004554:	e7b1      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x5ae>
 8004556:	2601      	movs	r6, #1
 8004558:	e7aa      	b.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
      status = ret;
 800455a:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 800455c:	4635      	mov	r5, r6
 800455e:	e797      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x584>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004560:	49aa      	ldr	r1, [pc, #680]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x900>)
 8004562:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8004564:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004568:	62ca      	str	r2, [r1, #44]	@ 0x2c
    if(ret == HAL_OK)
 800456a:	2d00      	cmp	r5, #0
 800456c:	f040 80c8 	bne.w	8004700 <HAL_RCCEx_PeriphCLKConfig+0x7f4>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004570:	49a6      	ldr	r1, [pc, #664]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x900>)
 8004572:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8004574:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 8004576:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800457a:	4302      	orrs	r2, r0
 800457c:	650a      	str	r2, [r1, #80]	@ 0x50
 800457e:	e613      	b.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      status = ret;
 8004580:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 8004582:	4635      	mov	r5, r6
 8004584:	e753      	b.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x522>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004586:	4aa1      	ldr	r2, [pc, #644]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x900>)
 8004588:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800458a:	f002 0203 	and.w	r2, r2, #3
 800458e:	2a03      	cmp	r2, #3
 8004590:	f43f ae54 	beq.w	800423c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8004594:	2101      	movs	r1, #1
 8004596:	1d20      	adds	r0, r4, #4
 8004598:	f7ff fbd8 	bl	8003d4c <RCCEx_PLL2_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800459c:	6823      	ldr	r3, [r4, #0]
 800459e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80045a0:	2d00      	cmp	r5, #0
 80045a2:	f040 80bb 	bne.w	800471c <HAL_RCCEx_PeriphCLKConfig+0x810>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80045a6:	4999      	ldr	r1, [pc, #612]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x900>)
 80045a8:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 80045aa:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 80045ac:	f022 0238 	bic.w	r2, r2, #56	@ 0x38
 80045b0:	4302      	orrs	r2, r0
 80045b2:	654a      	str	r2, [r1, #84]	@ 0x54
 80045b4:	e644      	b.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x334>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045b6:	4995      	ldr	r1, [pc, #596]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x900>)
 80045b8:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80045ba:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80045be:	62ca      	str	r2, [r1, #44]	@ 0x2c
    if(ret == HAL_OK)
 80045c0:	2d00      	cmp	r5, #0
 80045c2:	f040 80a7 	bne.w	8004714 <HAL_RCCEx_PeriphCLKConfig+0x808>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045c6:	4991      	ldr	r1, [pc, #580]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x900>)
 80045c8:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 80045cc:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 80045ce:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 80045d2:	4302      	orrs	r2, r0
 80045d4:	654a      	str	r2, [r1, #84]	@ 0x54
 80045d6:	e73c      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x546>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045d8:	4f8d      	ldr	r7, [pc, #564]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x904>)
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045e0:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 80045e2:	f7fd ff1f 	bl	8002424 <HAL_GetTick>
 80045e6:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045e8:	e006      	b.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045ea:	f7fd ff1b 	bl	8002424 <HAL_GetTick>
 80045ee:	eba0 0008 	sub.w	r0, r0, r8
 80045f2:	2864      	cmp	r0, #100	@ 0x64
 80045f4:	f200 82af 	bhi.w	8004b56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	05da      	lsls	r2, r3, #23
 80045fc:	d5f5      	bpl.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x6de>
    if(ret == HAL_OK)
 80045fe:	2d00      	cmp	r5, #0
 8004600:	f040 82aa 	bne.w	8004b58 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004604:	4a81      	ldr	r2, [pc, #516]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x900>)
 8004606:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
 800460a:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 800460c:	4059      	eors	r1, r3
 800460e:	f411 7f40 	tst.w	r1, #768	@ 0x300
 8004612:	d00b      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x720>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004614:	6f11      	ldr	r1, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8004616:	6f10      	ldr	r0, [r2, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004618:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800461c:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
 8004620:	6710      	str	r0, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004622:	6f10      	ldr	r0, [r2, #112]	@ 0x70
 8004624:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
 8004628:	6710      	str	r0, [r2, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 800462a:	6711      	str	r1, [r2, #112]	@ 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800462c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004630:	f000 82b3 	beq.w	8004b9a <HAL_RCCEx_PeriphCLKConfig+0xc8e>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004634:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8004638:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 800463c:	f000 82c1 	beq.w	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
 8004640:	4972      	ldr	r1, [pc, #456]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x900>)
 8004642:	690a      	ldr	r2, [r1, #16]
 8004644:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 8004648:	610a      	str	r2, [r1, #16]
 800464a:	4a70      	ldr	r2, [pc, #448]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x900>)
 800464c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004650:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8004652:	430b      	orrs	r3, r1
 8004654:	6713      	str	r3, [r2, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004656:	6823      	ldr	r3, [r4, #0]
 8004658:	e5c0      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800465a:	496c      	ldr	r1, [pc, #432]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x900>)
 800465c:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 800465e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004662:	62ca      	str	r2, [r1, #44]	@ 0x2c
      ret = HAL_ERROR;
 8004664:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 8004666:	2d00      	cmp	r5, #0
 8004668:	f040 818b 	bne.w	8004982 <HAL_RCCEx_PeriphCLKConfig+0xa76>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800466c:	4967      	ldr	r1, [pc, #412]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x900>)
 800466e:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8004670:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 8004672:	f022 0207 	bic.w	r2, r2, #7
 8004676:	4302      	orrs	r2, r0
 8004678:	650a      	str	r2, [r1, #80]	@ 0x50
 800467a:	e480      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x72>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800467c:	4a63      	ldr	r2, [pc, #396]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x900>)
 800467e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004680:	f002 0203 	and.w	r2, r2, #3
 8004684:	2a03      	cmp	r2, #3
 8004686:	d00a      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x792>
 8004688:	2102      	movs	r1, #2
 800468a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800468e:	f7ff fbcd 	bl	8003e2c <RCCEx_PLL3_Config.part.0>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004692:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004696:	6823      	ldr	r3, [r4, #0]
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004698:	2800      	cmp	r0, #0
 800469a:	f43f ae8f 	beq.w	80043bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
          status = HAL_ERROR;
 800469e:	2601      	movs	r6, #1
 80046a0:	e68c      	b.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80046a2:	4a5a      	ldr	r2, [pc, #360]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x900>)
 80046a4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80046a6:	f002 0203 	and.w	r2, r2, #3
 80046aa:	2a03      	cmp	r2, #3
 80046ac:	d00a      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 80046ae:	2102      	movs	r1, #2
 80046b0:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80046b4:	f7ff fbba 	bl	8003e2c <RCCEx_PLL3_Config.part.0>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80046b8:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80046bc:	6823      	ldr	r3, [r4, #0]
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80046be:	2800      	cmp	r0, #0
 80046c0:	f43f ae8a 	beq.w	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        status = HAL_ERROR;
 80046c4:	2601      	movs	r6, #1
 80046c6:	e687      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046c8:	4950      	ldr	r1, [pc, #320]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x900>)
 80046ca:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80046cc:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80046d0:	62ca      	str	r2, [r1, #44]	@ 0x2c
    if(ret == HAL_OK)
 80046d2:	2d00      	cmp	r5, #0
 80046d4:	f43f aed5 	beq.w	8004482 <HAL_RCCEx_PeriphCLKConfig+0x576>
      status = ret;
 80046d8:	462e      	mov	r6, r5
 80046da:	e6d9      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x584>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046dc:	484b      	ldr	r0, [pc, #300]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x900>)
 80046de:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80046e0:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 80046e4:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if(ret == HAL_OK)
 80046e6:	2d00      	cmp	r5, #0
 80046e8:	f47f af33 	bne.w	8004552 <HAL_RCCEx_PeriphCLKConfig+0x646>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046ec:	4d47      	ldr	r5, [pc, #284]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x900>)
  if (status == HAL_OK)
 80046ee:	1e30      	subs	r0, r6, #0
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046f0:	6d69      	ldr	r1, [r5, #84]	@ 0x54
  if (status == HAL_OK)
 80046f2:	bf18      	it	ne
 80046f4:	2001      	movne	r0, #1
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046f6:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
 80046fa:	430a      	orrs	r2, r1
 80046fc:	656a      	str	r2, [r5, #84]	@ 0x54
 80046fe:	e6dc      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x5ae>
      status = ret;
 8004700:	462e      	mov	r6, r5
 8004702:	e551      	b.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004704:	4941      	ldr	r1, [pc, #260]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x900>)
 8004706:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8004708:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 800470a:	f022 0203 	bic.w	r2, r2, #3
 800470e:	4302      	orrs	r2, r0
 8004710:	64ca      	str	r2, [r1, #76]	@ 0x4c
 8004712:	e560      	b.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      status = ret;
 8004714:	462e      	mov	r6, r5
 8004716:	e69c      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x546>
      status = ret;
 8004718:	462e      	mov	r6, r5
 800471a:	e4c2      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x196>
      status = ret;
 800471c:	462e      	mov	r6, r5
 800471e:	e58f      	b.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x334>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004720:	493a      	ldr	r1, [pc, #232]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x900>)
 8004722:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8004724:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8004726:	f022 0207 	bic.w	r2, r2, #7
 800472a:	4302      	orrs	r2, r0
 800472c:	654a      	str	r2, [r1, #84]	@ 0x54
 800472e:	e5a6      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x372>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004730:	4936      	ldr	r1, [pc, #216]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x900>)
 8004732:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 8004736:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8004738:	f022 0207 	bic.w	r2, r2, #7
 800473c:	4302      	orrs	r2, r0
 800473e:	658a      	str	r2, [r1, #88]	@ 0x58
 8004740:	e5bf      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
      status = ret;
 8004742:	462e      	mov	r6, r5
 8004744:	e5e4      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x404>
      status = ret;
 8004746:	462e      	mov	r6, r5
 8004748:	e51e      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      status = ret;
 800474a:	462e      	mov	r6, r5
 800474c:	e62e      	b.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      status = ret;
 800474e:	462e      	mov	r6, r5
 8004750:	e4f3      	b.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x22e>
      status = ret;
 8004752:	462e      	mov	r6, r5
 8004754:	e603      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x452>
      status = ret;
 8004756:	462e      	mov	r6, r5
 8004758:	e669      	b.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x522>
    switch(PeriphClkInit->RngClockSelection)
 800475a:	2a00      	cmp	r2, #0
 800475c:	f47f aef9 	bne.w	8004552 <HAL_RCCEx_PeriphCLKConfig+0x646>
 8004760:	e7c1      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x7da>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004762:	4a2a      	ldr	r2, [pc, #168]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x900>)
 8004764:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004766:	f002 0203 	and.w	r2, r2, #3
 800476a:	2a03      	cmp	r2, #3
 800476c:	f000 81b0 	beq.w	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>
 8004770:	2101      	movs	r1, #1
 8004772:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8004776:	f7ff fb59 	bl	8003e2c <RCCEx_PLL3_Config.part.0>
 800477a:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800477c:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800477e:	2d00      	cmp	r5, #0
 8004780:	d1e5      	bne.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004782:	e4d3      	b.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x220>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004784:	4a21      	ldr	r2, [pc, #132]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x900>)
 8004786:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004788:	f002 0203 	and.w	r2, r2, #3
 800478c:	2a03      	cmp	r2, #3
 800478e:	f000 8185 	beq.w	8004a9c <HAL_RCCEx_PeriphCLKConfig+0xb90>
 8004792:	2102      	movs	r1, #2
 8004794:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8004798:	f7ff fb48 	bl	8003e2c <RCCEx_PLL3_Config.part.0>
 800479c:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800479e:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80047a0:	2d00      	cmp	r5, #0
 80047a2:	d1ce      	bne.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x836>
 80047a4:	e5ac      	b.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80047a6:	4a19      	ldr	r2, [pc, #100]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x900>)
 80047a8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80047aa:	f002 0203 	and.w	r2, r2, #3
 80047ae:	2a03      	cmp	r2, #3
 80047b0:	f000 8181 	beq.w	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 80047b4:	2102      	movs	r1, #2
 80047b6:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80047ba:	f7ff fb37 	bl	8003e2c <RCCEx_PLL3_Config.part.0>
 80047be:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80047c0:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80047c2:	2d00      	cmp	r5, #0
 80047c4:	d1c5      	bne.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80047c6:	e5c2      	b.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x442>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80047c8:	4a10      	ldr	r2, [pc, #64]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x900>)
 80047ca:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80047cc:	f002 0203 	and.w	r2, r2, #3
 80047d0:	2a03      	cmp	r2, #3
 80047d2:	f000 8148 	beq.w	8004a66 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
 80047d6:	2102      	movs	r1, #2
 80047d8:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80047dc:	f7ff fb26 	bl	8003e2c <RCCEx_PLL3_Config.part.0>
 80047e0:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80047e2:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80047e4:	2d00      	cmp	r5, #0
 80047e6:	d1b0      	bne.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x83e>
 80047e8:	e5d8      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x490>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80047ea:	4a08      	ldr	r2, [pc, #32]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x900>)
 80047ec:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80047ee:	f002 0203 	and.w	r2, r2, #3
 80047f2:	2a03      	cmp	r2, #3
 80047f4:	f43f aec4 	beq.w	8004580 <HAL_RCCEx_PeriphCLKConfig+0x674>
 80047f8:	2102      	movs	r1, #2
 80047fa:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80047fe:	f7ff fb15 	bl	8003e2c <RCCEx_PLL3_Config.part.0>
 8004802:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004804:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8004806:	2d00      	cmp	r5, #0
 8004808:	d1a5      	bne.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x84a>
 800480a:	e608      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x512>
 800480c:	58024400 	.word	0x58024400
 8004810:	58024800 	.word	0x58024800
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004814:	4ac5      	ldr	r2, [pc, #788]	@ (8004b2c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004816:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004818:	f002 0203 	and.w	r2, r2, #3
 800481c:	2a03      	cmp	r2, #3
 800481e:	f43f ae16 	beq.w	800444e <HAL_RCCEx_PeriphCLKConfig+0x542>
 8004822:	2101      	movs	r1, #1
 8004824:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8004828:	f7ff fb00 	bl	8003e2c <RCCEx_PLL3_Config.part.0>
 800482c:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800482e:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8004830:	2d00      	cmp	r5, #0
 8004832:	f47f af6f 	bne.w	8004714 <HAL_RCCEx_PeriphCLKConfig+0x808>
 8004836:	e6c6      	b.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x6ba>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004838:	4abc      	ldr	r2, [pc, #752]	@ (8004b2c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800483a:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800483c:	f002 0203 	and.w	r2, r2, #3
 8004840:	2a03      	cmp	r2, #3
 8004842:	f000 81a6 	beq.w	8004b92 <HAL_RCCEx_PeriphCLKConfig+0xc86>
 8004846:	2102      	movs	r1, #2
 8004848:	1d20      	adds	r0, r4, #4
 800484a:	f7ff fa7f 	bl	8003d4c <RCCEx_PLL2_Config.part.0>
 800484e:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004850:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8004852:	2d00      	cmp	r5, #0
 8004854:	f47f acbe 	bne.w	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8004858:	e754      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x7f8>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800485a:	4ab4      	ldr	r2, [pc, #720]	@ (8004b2c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800485c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800485e:	f002 0203 	and.w	r2, r2, #3
 8004862:	2a03      	cmp	r2, #3
 8004864:	f000 8173 	beq.w	8004b4e <HAL_RCCEx_PeriphCLKConfig+0xc42>
 8004868:	2102      	movs	r1, #2
 800486a:	1d20      	adds	r0, r4, #4
 800486c:	f7ff fa6e 	bl	8003d4c <RCCEx_PLL2_Config.part.0>
 8004870:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004872:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8004874:	2d00      	cmp	r5, #0
 8004876:	f47f af4f 	bne.w	8004718 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 800487a:	e40b      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x188>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800487c:	4aab      	ldr	r2, [pc, #684]	@ (8004b2c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800487e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004880:	f002 0203 	and.w	r2, r2, #3
 8004884:	2a03      	cmp	r2, #3
 8004886:	f000 80fb 	beq.w	8004a80 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800488a:	2101      	movs	r1, #1
 800488c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8004890:	f7ff facc 	bl	8003e2c <RCCEx_PLL3_Config.part.0>
 8004894:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004896:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8004898:	2d00      	cmp	r5, #0
 800489a:	f47f af54 	bne.w	8004746 <HAL_RCCEx_PeriphCLKConfig+0x83a>
 800489e:	e46b      	b.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80048a0:	4aa2      	ldr	r2, [pc, #648]	@ (8004b2c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80048a2:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80048a4:	f002 0203 	and.w	r2, r2, #3
 80048a8:	2a03      	cmp	r2, #3
 80048aa:	f000 8130 	beq.w	8004b0e <HAL_RCCEx_PeriphCLKConfig+0xc02>
 80048ae:	2100      	movs	r1, #0
 80048b0:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80048b4:	f7ff faba 	bl	8003e2c <RCCEx_PLL3_Config.part.0>
 80048b8:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80048ba:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80048bc:	2d00      	cmp	r5, #0
 80048be:	f43f aba4 	beq.w	800400a <HAL_RCCEx_PeriphCLKConfig+0xfe>
      status = ret;
 80048c2:	462e      	mov	r6, r5
 80048c4:	f7ff bba9 	b.w	800401a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048c8:	4898      	ldr	r0, [pc, #608]	@ (8004b2c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80048ca:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80048cc:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 80048d0:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if(ret == HAL_OK)
 80048d2:	f7ff bb3f 	b.w	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x48>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048d6:	4995      	ldr	r1, [pc, #596]	@ (8004b2c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80048d8:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80048da:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80048de:	62ca      	str	r2, [r1, #44]	@ 0x2c
      break;
 80048e0:	f7ff bb90 	b.w	8004004 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048e4:	4991      	ldr	r1, [pc, #580]	@ (8004b2c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80048e6:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80048e8:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80048ec:	62ca      	str	r2, [r1, #44]	@ 0x2c
    if(ret == HAL_OK)
 80048ee:	2d00      	cmp	r5, #0
 80048f0:	f43f abf7 	beq.w	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
      status = ret;
 80048f4:	462e      	mov	r6, r5
 80048f6:	f7ff bbfb 	b.w	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80048fa:	4a8c      	ldr	r2, [pc, #560]	@ (8004b2c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80048fc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80048fe:	f002 0203 	and.w	r2, r2, #3
 8004902:	2a03      	cmp	r2, #3
 8004904:	f000 810e 	beq.w	8004b24 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8004908:	2100      	movs	r1, #0
 800490a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800490e:	f7ff fa8d 	bl	8003e2c <RCCEx_PLL3_Config.part.0>
 8004912:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004914:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8004916:	2d00      	cmp	r5, #0
 8004918:	f43f ab4f 	beq.w	8003fba <HAL_RCCEx_PeriphCLKConfig+0xae>
      status = ret;
 800491c:	462e      	mov	r6, r5
 800491e:	f7ff bb53 	b.w	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004922:	4982      	ldr	r1, [pc, #520]	@ (8004b2c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004924:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8004926:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800492a:	62ca      	str	r2, [r1, #44]	@ 0x2c
      break;
 800492c:	f7ff bb42 	b.w	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xa8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004930:	497e      	ldr	r1, [pc, #504]	@ (8004b2c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004932:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8004934:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004938:	62ca      	str	r2, [r1, #44]	@ 0x2c
    if(ret == HAL_OK)
 800493a:	2d00      	cmp	r5, #0
 800493c:	f43f ab8e 	beq.w	800405c <HAL_RCCEx_PeriphCLKConfig+0x150>
      status = ret;
 8004940:	462e      	mov	r6, r5
 8004942:	f7ff bb93 	b.w	800406c <HAL_RCCEx_PeriphCLKConfig+0x160>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004946:	4a79      	ldr	r2, [pc, #484]	@ (8004b2c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004948:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800494a:	f002 0203 	and.w	r2, r2, #3
 800494e:	2a03      	cmp	r2, #3
 8004950:	f000 80d2 	beq.w	8004af8 <HAL_RCCEx_PeriphCLKConfig+0xbec>
 8004954:	2102      	movs	r1, #2
 8004956:	3024      	adds	r0, #36	@ 0x24
 8004958:	f7ff fa68 	bl	8003e2c <RCCEx_PLL3_Config.part.0>
 800495c:	4606      	mov	r6, r0
      break;
 800495e:	f7ff baf6 	b.w	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x42>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004962:	4a72      	ldr	r2, [pc, #456]	@ (8004b2c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004964:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004966:	f002 0203 	and.w	r2, r2, #3
 800496a:	2a03      	cmp	r2, #3
 800496c:	f43f ab05 	beq.w	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004970:	2100      	movs	r1, #0
 8004972:	1d20      	adds	r0, r4, #4
 8004974:	f7ff f9ea 	bl	8003d4c <RCCEx_PLL2_Config.part.0>
 8004978:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800497a:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800497c:	2d00      	cmp	r5, #0
 800497e:	f43f ae75 	beq.w	800466c <HAL_RCCEx_PeriphCLKConfig+0x760>
      status = ret;
 8004982:	462e      	mov	r6, r5
 8004984:	f7ff bafb 	b.w	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x72>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004988:	4a68      	ldr	r2, [pc, #416]	@ (8004b2c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800498a:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800498c:	f002 0203 	and.w	r2, r2, #3
 8004990:	2a03      	cmp	r2, #3
 8004992:	f43f aaf2 	beq.w	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004996:	2100      	movs	r1, #0
 8004998:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800499c:	f7ff fa46 	bl	8003e2c <RCCEx_PLL3_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80049a0:	6823      	ldr	r3, [r4, #0]
 80049a2:	4605      	mov	r5, r0
      break;
 80049a4:	e65f      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x75a>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80049a6:	4a61      	ldr	r2, [pc, #388]	@ (8004b2c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80049a8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80049aa:	f002 0203 	and.w	r2, r2, #3
 80049ae:	2a03      	cmp	r2, #3
 80049b0:	f000 80c6 	beq.w	8004b40 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80049b4:	2100      	movs	r1, #0
 80049b6:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80049ba:	f7ff fa37 	bl	8003e2c <RCCEx_PLL3_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80049be:	6823      	ldr	r3, [r4, #0]
 80049c0:	4605      	mov	r5, r0
      break;
 80049c2:	f7ff bb48 	b.w	8004056 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80049c6:	4a59      	ldr	r2, [pc, #356]	@ (8004b2c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80049c8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80049ca:	f002 0203 	and.w	r2, r2, #3
 80049ce:	2a03      	cmp	r2, #3
 80049d0:	f000 808a 	beq.w	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0xbdc>
 80049d4:	2100      	movs	r1, #0
 80049d6:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80049da:	f7ff fa27 	bl	8003e2c <RCCEx_PLL3_Config.part.0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80049de:	6823      	ldr	r3, [r4, #0]
 80049e0:	4605      	mov	r5, r0
      break;
 80049e2:	f7ff bb7b 	b.w	80040dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80049e6:	4a51      	ldr	r2, [pc, #324]	@ (8004b2c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80049e8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80049ea:	f002 0203 	and.w	r2, r2, #3
 80049ee:	2a03      	cmp	r2, #3
 80049f0:	f000 80c7 	beq.w	8004b82 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80049f4:	2101      	movs	r1, #1
 80049f6:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80049fa:	f7ff fa17 	bl	8003e2c <RCCEx_PLL3_Config.part.0>
 80049fe:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a00:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8004a02:	2d00      	cmp	r5, #0
 8004a04:	f47f ac5c 	bne.w	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 8004a08:	e692      	b.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x824>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004a0a:	4a48      	ldr	r2, [pc, #288]	@ (8004b2c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004a0c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004a0e:	f002 0203 	and.w	r2, r2, #3
 8004a12:	2a03      	cmp	r2, #3
 8004a14:	f000 80b9 	beq.w	8004b8a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
 8004a18:	2101      	movs	r1, #1
 8004a1a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8004a1e:	f7ff fa05 	bl	8003e2c <RCCEx_PLL3_Config.part.0>
 8004a22:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a24:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8004a26:	2d00      	cmp	r5, #0
 8004a28:	f47f ac28 	bne.w	800427c <HAL_RCCEx_PeriphCLKConfig+0x370>
 8004a2c:	e678      	b.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x814>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004a2e:	4a3f      	ldr	r2, [pc, #252]	@ (8004b2c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004a30:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004a32:	f002 0203 	and.w	r2, r2, #3
 8004a36:	2a03      	cmp	r2, #3
 8004a38:	f43f ac00 	beq.w	800423c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8004a3c:	2101      	movs	r1, #1
 8004a3e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8004a42:	f7ff f9f3 	bl	8003e2c <RCCEx_PLL3_Config.part.0>
 8004a46:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004a48:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8004a4a:	2d00      	cmp	r5, #0
 8004a4c:	f47f ae66 	bne.w	800471c <HAL_RCCEx_PeriphCLKConfig+0x810>
 8004a50:	e5a9      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x69a>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004a52:	f422 5100 	bic.w	r1, r2, #8192	@ 0x2000
 8004a56:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 8004a5a:	f43f ac9c 	beq.w	8004396 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8004a5e:	f5b2 4fc0 	cmp.w	r2, #24576	@ 0x6000
 8004a62:	f43f ac98 	beq.w	8004396 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      status = ret;
 8004a66:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 8004a68:	4635      	mov	r5, r6
 8004a6a:	e49f      	b.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>
    switch(PeriphClkInit->Spi6ClockSelection)
 8004a6c:	f022 5180 	bic.w	r1, r2, #268435456	@ 0x10000000
 8004a70:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
 8004a74:	f43f ab7d 	beq.w	8004172 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8004a78:	f1b2 5f40 	cmp.w	r2, #805306368	@ 0x30000000
 8004a7c:	f43f ab79 	beq.w	8004172 <HAL_RCCEx_PeriphCLKConfig+0x266>
      status = ret;
 8004a80:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 8004a82:	4635      	mov	r5, r6
 8004a84:	f7ff bb80 	b.w	8004188 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004a88:	f022 5180 	bic.w	r1, r2, #268435456	@ 0x10000000
 8004a8c:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
 8004a90:	f43f ac33 	beq.w	80042fa <HAL_RCCEx_PeriphCLKConfig+0x3ee>
 8004a94:	f1b2 5f40 	cmp.w	r2, #805306368	@ 0x30000000
 8004a98:	f43f ac2f 	beq.w	80042fa <HAL_RCCEx_PeriphCLKConfig+0x3ee>
      status = ret;
 8004a9c:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 8004a9e:	4635      	mov	r5, r6
 8004aa0:	e436      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x404>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004aa2:	f422 6180 	bic.w	r1, r2, #1024	@ 0x400
 8004aa6:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8004aaa:	f43f ac4d 	beq.w	8004348 <HAL_RCCEx_PeriphCLKConfig+0x43c>
 8004aae:	f5b2 6f40 	cmp.w	r2, #3072	@ 0xc00
 8004ab2:	f43f ac49 	beq.w	8004348 <HAL_RCCEx_PeriphCLKConfig+0x43c>
      status = ret;
 8004ab6:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 8004ab8:	4635      	mov	r5, r6
 8004aba:	e450      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x452>
    switch(PeriphClkInit->Spi45ClockSelection)
 8004abc:	f422 3180 	bic.w	r1, r2, #65536	@ 0x10000
 8004ac0:	f5b1 2f80 	cmp.w	r1, #262144	@ 0x40000
 8004ac4:	f43f ab2f 	beq.w	8004126 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8004ac8:	f5b2 3f40 	cmp.w	r2, #196608	@ 0x30000
 8004acc:	f43f ab2b 	beq.w	8004126 <HAL_RCCEx_PeriphCLKConfig+0x21a>
      status = ret;
 8004ad0:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 8004ad2:	4635      	mov	r5, r6
 8004ad4:	f7ff bb31 	b.w	800413a <HAL_RCCEx_PeriphCLKConfig+0x22e>
    switch(PeriphClkInit->Spi123ClockSelection)
 8004ad8:	f5b2 5f40 	cmp.w	r2, #12288	@ 0x3000
 8004adc:	f43f aafe 	beq.w	80040dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 8004ae0:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
 8004ae4:	f43f aafa 	beq.w	80040dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      status = ret;
 8004ae8:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 8004aea:	4635      	mov	r5, r6
 8004aec:	f7ff bb00 	b.w	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8004af0:	f5b2 1f40 	cmp.w	r2, #3145728	@ 0x300000
 8004af4:	f43f aa2e 	beq.w	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x48>
      ret = HAL_ERROR;
 8004af8:	2601      	movs	r6, #1
 8004afa:	f7ff ba32 	b.w	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->Sai4AClockSelection)
 8004afe:	f5b2 0fc0 	cmp.w	r2, #6291456	@ 0x600000
 8004b02:	f43f aa7f 	beq.w	8004004 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8004b06:	f5b2 0f00 	cmp.w	r2, #8388608	@ 0x800000
 8004b0a:	f43f aa7b 	beq.w	8004004 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      status = ret;
 8004b0e:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 8004b10:	4635      	mov	r5, r6
 8004b12:	f7ff ba82 	b.w	800401a <HAL_RCCEx_PeriphCLKConfig+0x10e>
    switch(PeriphClkInit->Sai23ClockSelection)
 8004b16:	2ac0      	cmp	r2, #192	@ 0xc0
 8004b18:	f43f aa4c 	beq.w	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xa8>
 8004b1c:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8004b20:	f43f aa48 	beq.w	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xa8>
      status = ret;
 8004b24:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 8004b26:	4635      	mov	r5, r6
 8004b28:	f7ff ba4e 	b.w	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
 8004b2c:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Sai4BClockSelection)
 8004b30:	f1b2 7f40 	cmp.w	r2, #50331648	@ 0x3000000
 8004b34:	f43f aa8f 	beq.w	8004056 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8004b38:	f1b2 6f80 	cmp.w	r2, #67108864	@ 0x4000000
 8004b3c:	f43f aa8b 	beq.w	8004056 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      status = ret;
 8004b40:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 8004b42:	4635      	mov	r5, r6
 8004b44:	f7ff ba92 	b.w	800406c <HAL_RCCEx_PeriphCLKConfig+0x160>
    switch(PeriphClkInit->QspiClockSelection)
 8004b48:	2a30      	cmp	r2, #48	@ 0x30
 8004b4a:	f43f aaa0 	beq.w	800408e <HAL_RCCEx_PeriphCLKConfig+0x182>
      status = ret;
 8004b4e:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 8004b50:	4635      	mov	r5, r6
 8004b52:	f7ff baa6 	b.w	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x196>
        ret = HAL_TIMEOUT;
 8004b56:	2503      	movs	r5, #3
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004b58:	6823      	ldr	r3, [r4, #0]
      status = ret;
 8004b5a:	462e      	mov	r6, r5
 8004b5c:	f7ff bb3e 	b.w	80041dc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004b60:	4a1f      	ldr	r2, [pc, #124]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0xcd4>)
 8004b62:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004b64:	f002 0203 	and.w	r2, r2, #3
 8004b68:	2a03      	cmp	r2, #3
 8004b6a:	f43f ab1b 	beq.w	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004b6e:	2101      	movs	r1, #1
 8004b70:	1d20      	adds	r0, r4, #4
 8004b72:	f7ff f8eb 	bl	8003d4c <RCCEx_PLL2_Config.part.0>
 8004b76:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004b78:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8004b7a:	2d00      	cmp	r5, #0
 8004b7c:	f47f adc0 	bne.w	8004700 <HAL_RCCEx_PeriphCLKConfig+0x7f4>
 8004b80:	e4f6      	b.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x664>
      status = ret;
 8004b82:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 8004b84:	4635      	mov	r5, r6
 8004b86:	f7ff bb9c 	b.w	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
      status = ret;
 8004b8a:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 8004b8c:	4635      	mov	r5, r6
 8004b8e:	f7ff bb76 	b.w	800427e <HAL_RCCEx_PeriphCLKConfig+0x372>
      status = ret;
 8004b92:	2601      	movs	r6, #1
      ret = HAL_ERROR;
 8004b94:	4635      	mov	r5, r6
 8004b96:	f7ff bb1e 	b.w	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
        tickstart = HAL_GetTick();
 8004b9a:	f7fd fc43 	bl	8002424 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b9e:	f8df 8040 	ldr.w	r8, [pc, #64]	@ 8004be0 <HAL_RCCEx_PeriphCLKConfig+0xcd4>
        tickstart = HAL_GetTick();
 8004ba2:	4607      	mov	r7, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ba4:	f241 3988 	movw	r9, #5000	@ 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ba8:	e004      	b.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004baa:	f7fd fc3b 	bl	8002424 <HAL_GetTick>
 8004bae:	1bc0      	subs	r0, r0, r7
 8004bb0:	4548      	cmp	r0, r9
 8004bb2:	d810      	bhi.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0xcca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004bb4:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8004bb8:	079b      	lsls	r3, r3, #30
 8004bba:	d5f6      	bpl.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0xc9e>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bbc:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
 8004bc0:	e538      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004bc2:	4807      	ldr	r0, [pc, #28]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0xcd4>)
 8004bc4:	4a07      	ldr	r2, [pc, #28]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8004bc6:	6901      	ldr	r1, [r0, #16]
 8004bc8:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8004bcc:	f421 517c 	bic.w	r1, r1, #16128	@ 0x3f00
 8004bd0:	430a      	orrs	r2, r1
 8004bd2:	6102      	str	r2, [r0, #16]
 8004bd4:	e539      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x73e>
        status = ret;
 8004bd6:	2603      	movs	r6, #3
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004bd8:	6823      	ldr	r3, [r4, #0]
 8004bda:	4635      	mov	r5, r6
 8004bdc:	f7ff bafe 	b.w	80041dc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004be0:	58024400 	.word	0x58024400
 8004be4:	00ffffcf 	.word	0x00ffffcf

08004be8 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8004be8:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004bea:	f7fe ffdf 	bl	8003bac <HAL_RCC_GetHCLKFreq>
 8004bee:	4b05      	ldr	r3, [pc, #20]	@ (8004c04 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8004bf0:	4a05      	ldr	r2, [pc, #20]	@ (8004c08 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8004bf2:	6a1b      	ldr	r3, [r3, #32]
 8004bf4:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004bf8:	5cd3      	ldrb	r3, [r2, r3]
 8004bfa:	f003 031f 	and.w	r3, r3, #31
}
 8004bfe:	40d8      	lsrs	r0, r3
 8004c00:	bd08      	pop	{r3, pc}
 8004c02:	bf00      	nop
 8004c04:	58024400 	.word	0x58024400
 8004c08:	080108d8 	.word	0x080108d8

08004c0c <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004c0c:	4a47      	ldr	r2, [pc, #284]	@ (8004d2c <HAL_RCCEx_GetPLL2ClockFreq+0x120>)
{
 8004c0e:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004c10:	6a94      	ldr	r4, [r2, #40]	@ 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004c12:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004c14:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll2m != 0U)
 8004c16:	f415 3f7c 	tst.w	r5, #258048	@ 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004c1a:	f3c5 3305 	ubfx	r3, r5, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004c1e:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
  if (pll2m != 0U)
 8004c20:	d05b      	beq.n	8004cda <HAL_RCCEx_GetPLL2ClockFreq+0xce>
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004c22:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004c26:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004c2a:	f004 0403 	and.w	r4, r4, #3
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004c2e:	ee07 3a90 	vmov	s15, r3
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004c32:	fb06 f101 	mul.w	r1, r6, r1
    switch (pllsource)
 8004c36:	2c01      	cmp	r4, #1
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004c38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c3c:	ee06 1a90 	vmov	s13, r1
 8004c40:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 8004c44:	d003      	beq.n	8004c4e <HAL_RCCEx_GetPLL2ClockFreq+0x42>
 8004c46:	2c02      	cmp	r4, #2
 8004c48:	d06a      	beq.n	8004d20 <HAL_RCCEx_GetPLL2ClockFreq+0x114>
 8004c4a:	2c00      	cmp	r4, #0
 8004c4c:	d04a      	beq.n	8004ce4 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004c4e:	eddf 7a38 	vldr	s15, [pc, #224]	@ 8004d30 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 8004c52:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8004c56:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8004c58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c5c:	ee07 3a90 	vmov	s15, r3
 8004c60:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8004c64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c6c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8004c70:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004c74:	4a2d      	ldr	r2, [pc, #180]	@ (8004d2c <HAL_RCCEx_GetPLL2ClockFreq+0x120>)
 8004c76:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8004c7a:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8004c7c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004c80:	ee07 3a10 	vmov	s14, r3
 8004c84:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8004c88:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004c8a:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004c8e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004c92:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8004c96:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004c9a:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8004c9c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8004ca0:	ee07 3a10 	vmov	s14, r3
 8004ca4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004ca8:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004cac:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004cb0:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8004cb4:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004cb8:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8004cba:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8004cbe:	ee06 3a90 	vmov	s13, r3
 8004cc2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8004cc6:	ee76 6a86 	vadd.f32	s13, s13, s12
 8004cca:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004cce:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8004cd2:	ee17 3a90 	vmov	r3, s15
 8004cd6:	6083      	str	r3, [r0, #8]
}
 8004cd8:	4770      	bx	lr
 8004cda:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004cdc:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004ce0:	6083      	str	r3, [r0, #8]
}
 8004ce2:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ce4:	6813      	ldr	r3, [r2, #0]
 8004ce6:	069b      	lsls	r3, r3, #26
 8004ce8:	d51d      	bpl.n	8004d26 <HAL_RCCEx_GetPLL2ClockFreq+0x11a>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004cea:	6814      	ldr	r4, [r2, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004cec:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8004cf0:	6b93      	ldr	r3, [r2, #56]	@ 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004cf2:	4910      	ldr	r1, [pc, #64]	@ (8004d34 <HAL_RCCEx_GetPLL2ClockFreq+0x128>)
 8004cf4:	f3c4 02c1 	ubfx	r2, r4, #3, #2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004cf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004cfc:	40d1      	lsrs	r1, r2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004cfe:	ee07 3a90 	vmov	s15, r3
 8004d02:	ee06 1a10 	vmov	s12, r1
 8004d06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d0a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8004d0e:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8004d12:	eec6 7a07 	vdiv.f32	s15, s12, s14
 8004d16:	ee36 7aa5 	vadd.f32	s14, s13, s11
 8004d1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d1e:	e7a9      	b.n	8004c74 <HAL_RCCEx_GetPLL2ClockFreq+0x68>
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004d20:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8004d38 <HAL_RCCEx_GetPLL2ClockFreq+0x12c>
 8004d24:	e795      	b.n	8004c52 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004d26:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8004d3c <HAL_RCCEx_GetPLL2ClockFreq+0x130>
 8004d2a:	e792      	b.n	8004c52 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 8004d2c:	58024400 	.word	0x58024400
 8004d30:	4a742400 	.word	0x4a742400
 8004d34:	03d09000 	.word	0x03d09000
 8004d38:	4bbebc20 	.word	0x4bbebc20
 8004d3c:	4c742400 	.word	0x4c742400

08004d40 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d40:	4a47      	ldr	r2, [pc, #284]	@ (8004e60 <HAL_RCCEx_GetPLL3ClockFreq+0x120>)
{
 8004d42:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d44:	6a94      	ldr	r4, [r2, #40]	@ 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004d46:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004d48:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll3m != 0U)
 8004d4a:	f015 7f7c 	tst.w	r5, #66060288	@ 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004d4e:	f3c5 5305 	ubfx	r3, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004d52:	6c51      	ldr	r1, [r2, #68]	@ 0x44
  if (pll3m != 0U)
 8004d54:	d05b      	beq.n	8004e0e <HAL_RCCEx_GetPLL3ClockFreq+0xce>
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004d56:	f3c1 01cc 	ubfx	r1, r1, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004d5a:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d5e:	f004 0403 	and.w	r4, r4, #3
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004d62:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004d66:	fb06 f101 	mul.w	r1, r6, r1
    switch (pllsource)
 8004d6a:	2c01      	cmp	r4, #1
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004d6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d70:	ee06 1a90 	vmov	s13, r1
 8004d74:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 8004d78:	d003      	beq.n	8004d82 <HAL_RCCEx_GetPLL3ClockFreq+0x42>
 8004d7a:	2c02      	cmp	r4, #2
 8004d7c:	d06a      	beq.n	8004e54 <HAL_RCCEx_GetPLL3ClockFreq+0x114>
 8004d7e:	2c00      	cmp	r4, #0
 8004d80:	d04a      	beq.n	8004e18 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004d82:	eddf 7a38 	vldr	s15, [pc, #224]	@ 8004e64 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 8004d86:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8004d8a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8004d8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d90:	ee07 3a90 	vmov	s15, r3
 8004d94:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8004d98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004da0:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8004da4:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004da8:	4a2d      	ldr	r2, [pc, #180]	@ (8004e60 <HAL_RCCEx_GetPLL3ClockFreq+0x120>)
 8004daa:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8004dae:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8004db0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004db4:	ee07 3a10 	vmov	s14, r3
 8004db8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8004dbc:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004dbe:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004dc2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004dc6:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8004dca:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004dce:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8004dd0:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8004dd4:	ee07 3a10 	vmov	s14, r3
 8004dd8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004ddc:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004de0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004de4:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8004de8:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004dec:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8004dee:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8004df2:	ee06 3a90 	vmov	s13, r3
 8004df6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8004dfa:	ee76 6a86 	vadd.f32	s13, s13, s12
 8004dfe:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004e02:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8004e06:	ee17 3a90 	vmov	r3, s15
 8004e0a:	6083      	str	r3, [r0, #8]
}
 8004e0c:	4770      	bx	lr
 8004e0e:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004e10:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004e14:	6083      	str	r3, [r0, #8]
}
 8004e16:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e18:	6813      	ldr	r3, [r2, #0]
 8004e1a:	069b      	lsls	r3, r3, #26
 8004e1c:	d51d      	bpl.n	8004e5a <HAL_RCCEx_GetPLL3ClockFreq+0x11a>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004e1e:	6814      	ldr	r4, [r2, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004e20:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8004e24:	6c13      	ldr	r3, [r2, #64]	@ 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004e26:	4910      	ldr	r1, [pc, #64]	@ (8004e68 <HAL_RCCEx_GetPLL3ClockFreq+0x128>)
 8004e28:	f3c4 02c1 	ubfx	r2, r4, #3, #2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004e2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004e30:	40d1      	lsrs	r1, r2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004e32:	ee07 3a90 	vmov	s15, r3
 8004e36:	ee06 1a10 	vmov	s12, r1
 8004e3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e3e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8004e42:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8004e46:	eec6 7a07 	vdiv.f32	s15, s12, s14
 8004e4a:	ee36 7aa5 	vadd.f32	s14, s13, s11
 8004e4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e52:	e7a9      	b.n	8004da8 <HAL_RCCEx_GetPLL3ClockFreq+0x68>
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004e54:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8004e6c <HAL_RCCEx_GetPLL3ClockFreq+0x12c>
 8004e58:	e795      	b.n	8004d86 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004e5a:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8004e70 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
 8004e5e:	e792      	b.n	8004d86 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 8004e60:	58024400 	.word	0x58024400
 8004e64:	4a742400 	.word	0x4a742400
 8004e68:	03d09000 	.word	0x03d09000
 8004e6c:	4bbebc20 	.word	0x4bbebc20
 8004e70:	4c742400 	.word	0x4c742400

08004e74 <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 8004e74:	6803      	ldr	r3, [r0, #0]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8004e76:	492c      	ldr	r1, [pc, #176]	@ (8004f28 <SPI_CloseTransfer+0xb4>)
  uint32_t itflag = hspi->Instance->SR;
 8004e78:	695a      	ldr	r2, [r3, #20]
{
 8004e7a:	b410      	push	{r4}
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8004e7c:	699c      	ldr	r4, [r3, #24]
 8004e7e:	f044 0408 	orr.w	r4, r4, #8
 8004e82:	619c      	str	r4, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8004e84:	699c      	ldr	r4, [r3, #24]
 8004e86:	f044 0410 	orr.w	r4, r4, #16
 8004e8a:	619c      	str	r4, [r3, #24]
  __HAL_SPI_DISABLE(hspi);
 8004e8c:	681c      	ldr	r4, [r3, #0]
 8004e8e:	f024 0401 	bic.w	r4, r4, #1
 8004e92:	601c      	str	r4, [r3, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8004e94:	691c      	ldr	r4, [r3, #16]
 8004e96:	4021      	ands	r1, r4
 8004e98:	6119      	str	r1, [r3, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8004e9a:	6899      	ldr	r1, [r3, #8]
 8004e9c:	f421 4140 	bic.w	r1, r1, #49152	@ 0xc000
 8004ea0:	6099      	str	r1, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004ea2:	f890 1081 	ldrb.w	r1, [r0, #129]	@ 0x81
 8004ea6:	2904      	cmp	r1, #4
 8004ea8:	d001      	beq.n	8004eae <SPI_CloseTransfer+0x3a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8004eaa:	0691      	lsls	r1, r2, #26
 8004eac:	d430      	bmi.n	8004f10 <SPI_CloseTransfer+0x9c>
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004eae:	f890 1081 	ldrb.w	r1, [r0, #129]	@ 0x81
 8004eb2:	2903      	cmp	r1, #3
 8004eb4:	d001      	beq.n	8004eba <SPI_CloseTransfer+0x46>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8004eb6:	0654      	lsls	r4, r2, #25
 8004eb8:	d41f      	bmi.n	8004efa <SPI_CloseTransfer+0x86>
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8004eba:	0591      	lsls	r1, r2, #22
 8004ebc:	d509      	bpl.n	8004ed2 <SPI_CloseTransfer+0x5e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004ebe:	f8d0 1084 	ldr.w	r1, [r0, #132]	@ 0x84
 8004ec2:	f041 0101 	orr.w	r1, r1, #1
 8004ec6:	f8c0 1084 	str.w	r1, [r0, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004eca:	6999      	ldr	r1, [r3, #24]
 8004ecc:	f441 7100 	orr.w	r1, r1, #512	@ 0x200
 8004ed0:	6199      	str	r1, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8004ed2:	05d2      	lsls	r2, r2, #23
 8004ed4:	d509      	bpl.n	8004eea <SPI_CloseTransfer+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004ed6:	f8d0 2084 	ldr.w	r2, [r0, #132]	@ 0x84
 8004eda:	f042 0208 	orr.w	r2, r2, #8
 8004ede:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004ee2:	699a      	ldr	r2, [r3, #24]
 8004ee4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ee8:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8004eea:	2300      	movs	r3, #0
  hspi->RxXferCount = (uint16_t)0UL;
}
 8004eec:	f85d 4b04 	ldr.w	r4, [sp], #4
  hspi->TxXferCount = (uint16_t)0UL;
 8004ef0:	f8a0 3062 	strh.w	r3, [r0, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8004ef4:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
}
 8004ef8:	4770      	bx	lr
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004efa:	f8d0 1084 	ldr.w	r1, [r0, #132]	@ 0x84
 8004efe:	f041 0104 	orr.w	r1, r1, #4
 8004f02:	f8c0 1084 	str.w	r1, [r0, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f06:	6999      	ldr	r1, [r3, #24]
 8004f08:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 8004f0c:	6199      	str	r1, [r3, #24]
 8004f0e:	e7d4      	b.n	8004eba <SPI_CloseTransfer+0x46>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8004f10:	f8d0 1084 	ldr.w	r1, [r0, #132]	@ 0x84
 8004f14:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8004f18:	f8c0 1084 	str.w	r1, [r0, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8004f1c:	6999      	ldr	r1, [r3, #24]
 8004f1e:	f041 0120 	orr.w	r1, r1, #32
 8004f22:	6199      	str	r1, [r3, #24]
 8004f24:	e7c3      	b.n	8004eae <SPI_CloseTransfer+0x3a>
 8004f26:	bf00      	nop
 8004f28:	fffffc90 	.word	0xfffffc90

08004f2c <HAL_SPI_Init>:
  if (hspi == NULL)
 8004f2c:	2800      	cmp	r0, #0
 8004f2e:	f000 80a6 	beq.w	800507e <HAL_SPI_Init+0x152>
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004f32:	6802      	ldr	r2, [r0, #0]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f34:	2100      	movs	r1, #0
{
 8004f36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004f38:	4b53      	ldr	r3, [pc, #332]	@ (8005088 <HAL_SPI_Init+0x15c>)
 8004f3a:	4604      	mov	r4, r0
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8004f3c:	68c5      	ldr	r5, [r0, #12]
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004f3e:	429a      	cmp	r2, r3
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f40:	6281      	str	r1, [r0, #40]	@ 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004f42:	d015      	beq.n	8004f70 <HAL_SPI_Init+0x44>
 8004f44:	f5a3 4378 	sub.w	r3, r3, #63488	@ 0xf800
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d011      	beq.n	8004f70 <HAL_SPI_Init+0x44>
 8004f4c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004f50:	429a      	cmp	r2, r3
 8004f52:	f000 808c 	beq.w	800506e <HAL_SPI_Init+0x142>
 8004f56:	2d0f      	cmp	r5, #15
 8004f58:	d808      	bhi.n	8004f6c <HAL_SPI_Init+0x40>
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004f5a:	6bc6      	ldr	r6, [r0, #60]	@ 0x3c

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8004f5c:	f105 0308 	add.w	r3, r5, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004f60:	0971      	lsrs	r1, r6, #5
  data_size = (data_size + 7UL) / 8UL;
 8004f62:	08db      	lsrs	r3, r3, #3

  return data_size * fifo_threashold;
 8004f64:	fb01 3303 	mla	r3, r1, r3, r3
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004f68:	2b08      	cmp	r3, #8
 8004f6a:	d909      	bls.n	8004f80 <HAL_SPI_Init+0x54>
    return HAL_ERROR;
 8004f6c:	2001      	movs	r0, #1
}
 8004f6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004f70:	4b45      	ldr	r3, [pc, #276]	@ (8005088 <HAL_SPI_Init+0x15c>)
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004f72:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d057      	beq.n	8005028 <HAL_SPI_Init+0xfc>
 8004f78:	f5a3 4378 	sub.w	r3, r3, #63488	@ 0xf800
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d053      	beq.n	8005028 <HAL_SPI_Init+0xfc>
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f80:	f894 3081 	ldrb.w	r3, [r4, #129]	@ 0x81
 8004f84:	f003 01ff 	and.w	r1, r3, #255	@ 0xff
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d066      	beq.n	800505a <HAL_SPI_Init+0x12e>
 8004f8c:	2000      	movs	r0, #0
  hspi->State = HAL_SPI_STATE_BUSY;
 8004f8e:	2302      	movs	r3, #2
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004f90:	6861      	ldr	r1, [r4, #4]
 8004f92:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
  hspi->State = HAL_SPI_STATE_BUSY;
 8004f94:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
  __HAL_SPI_DISABLE(hspi);
 8004f98:	6813      	ldr	r3, [r2, #0]
 8004f9a:	f023 0301 	bic.w	r3, r3, #1
 8004f9e:	6013      	str	r3, [r2, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004fa0:	69a3      	ldr	r3, [r4, #24]
 8004fa2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004fa6:	d049      	beq.n	800503c <HAL_SPI_Init+0x110>
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8004fa8:	430b      	orrs	r3, r1
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004faa:	4330      	orrs	r0, r6
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8004fac:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 8004fae:	433b      	orrs	r3, r7
 8004fb0:	4333      	orrs	r3, r6
 8004fb2:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8004fb4:	4333      	orrs	r3, r6
 8004fb6:	6926      	ldr	r6, [r4, #16]
 8004fb8:	4333      	orrs	r3, r6
 8004fba:	6966      	ldr	r6, [r4, #20]
 8004fbc:	4333      	orrs	r3, r6
 8004fbe:	6a26      	ldr	r6, [r4, #32]
 8004fc0:	4333      	orrs	r3, r6
 8004fc2:	6ce6      	ldr	r6, [r4, #76]	@ 0x4c
 8004fc4:	4333      	orrs	r3, r6
 8004fc6:	68a6      	ldr	r6, [r4, #8]
 8004fc8:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004fca:	69e6      	ldr	r6, [r4, #28]
 8004fcc:	4330      	orrs	r0, r6
 8004fce:	4328      	orrs	r0, r5
 8004fd0:	6090      	str	r0, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8004fd2:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8004fd4:	4303      	orrs	r3, r0
 8004fd6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004fd8:	4303      	orrs	r3, r0
 8004fda:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8004fdc:	b9b9      	cbnz	r1, 800500e <HAL_SPI_Init+0xe2>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8004fde:	6893      	ldr	r3, [r2, #8]
 8004fe0:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 8004fe4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004fe8:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8004fea:	6893      	ldr	r3, [r2, #8]
 8004fec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004ff0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004ff4:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ff6:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8004ff8:	f023 0301 	bic.w	r3, r3, #1
 8004ffc:	6513      	str	r3, [r2, #80]	@ 0x50
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ffe:	2300      	movs	r3, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8005000:	2201      	movs	r2, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005002:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  return HAL_OK;
 8005006:	4618      	mov	r0, r3
  hspi->State     = HAL_SPI_STATE_READY;
 8005008:	f884 2081 	strb.w	r2, [r4, #129]	@ 0x81
}
 800500c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800500e:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8005010:	f023 0301 	bic.w	r3, r3, #1
 8005014:	6513      	str	r3, [r2, #80]	@ 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005016:	024b      	lsls	r3, r1, #9
 8005018:	d5f1      	bpl.n	8004ffe <HAL_SPI_Init+0xd2>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800501a:	68d3      	ldr	r3, [r2, #12]
 800501c:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800501e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005022:	430b      	orrs	r3, r1
 8005024:	60d3      	str	r3, [r2, #12]
 8005026:	e7ea      	b.n	8004ffe <HAL_SPI_Init+0xd2>
  data_size = (data_size + 7UL) / 8UL;
 8005028:	f105 0308 	add.w	r3, r5, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800502c:	0971      	lsrs	r1, r6, #5
  data_size = (data_size + 7UL) / 8UL;
 800502e:	08db      	lsrs	r3, r3, #3
  return data_size * fifo_threashold;
 8005030:	fb01 3303 	mla	r3, r1, r3, r3
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005034:	2b10      	cmp	r3, #16
 8005036:	d9a3      	bls.n	8004f80 <HAL_SPI_Init+0x54>
    return HAL_ERROR;
 8005038:	2001      	movs	r0, #1
 800503a:	e798      	b.n	8004f6e <HAL_SPI_Init+0x42>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800503c:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
 8005040:	d01f      	beq.n	8005082 <HAL_SPI_Init+0x156>
 8005042:	2900      	cmp	r1, #0
 8005044:	d1b0      	bne.n	8004fa8 <HAL_SPI_Init+0x7c>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005046:	f1b7 5f80 	cmp.w	r7, #268435456	@ 0x10000000
 800504a:	d1ad      	bne.n	8004fa8 <HAL_SPI_Init+0x7c>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800504c:	f8d2 c000 	ldr.w	ip, [r2]
 8005050:	f44c 5c80 	orr.w	ip, ip, #4096	@ 0x1000
 8005054:	f8c2 c000 	str.w	ip, [r2]
 8005058:	e7a6      	b.n	8004fa8 <HAL_SPI_Init+0x7c>
    HAL_SPI_MspInit(hspi);
 800505a:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800505c:	f884 1080 	strb.w	r1, [r4, #128]	@ 0x80
    HAL_SPI_MspInit(hspi);
 8005060:	f001 fd5a 	bl	8006b18 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8005064:	6822      	ldr	r2, [r4, #0]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005066:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8005068:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 800506a:	68e5      	ldr	r5, [r4, #12]
 800506c:	e78f      	b.n	8004f8e <HAL_SPI_Init+0x62>
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800506e:	6bc6      	ldr	r6, [r0, #60]	@ 0x3c
  data_size = (data_size + 7UL) / 8UL;
 8005070:	f105 0308 	add.w	r3, r5, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005074:	0971      	lsrs	r1, r6, #5
  data_size = (data_size + 7UL) / 8UL;
 8005076:	08db      	lsrs	r3, r3, #3
  return data_size * fifo_threashold;
 8005078:	fb01 3303 	mla	r3, r1, r3, r3
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800507c:	e7da      	b.n	8005034 <HAL_SPI_Init+0x108>
    return HAL_ERROR;
 800507e:	2001      	movs	r0, #1
}
 8005080:	4770      	bx	lr
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005082:	2f00      	cmp	r7, #0
 8005084:	d0e2      	beq.n	800504c <HAL_SPI_Init+0x120>
 8005086:	e78f      	b.n	8004fa8 <HAL_SPI_Init+0x7c>
 8005088:	40013000 	.word	0x40013000

0800508c <HAL_SPI_Transmit>:
{
 800508c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005090:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8005092:	f890 3080 	ldrb.w	r3, [r0, #128]	@ 0x80
 8005096:	2b01      	cmp	r3, #1
 8005098:	f000 80bd 	beq.w	8005216 <HAL_SPI_Transmit+0x18a>
 800509c:	2301      	movs	r3, #1
 800509e:	4604      	mov	r4, r0
 80050a0:	468a      	mov	sl, r1
 80050a2:	4690      	mov	r8, r2
 80050a4:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80050a8:	f8d0 9000 	ldr.w	r9, [r0]
  tickstart = HAL_GetTick();
 80050ac:	f7fd f9ba 	bl	8002424 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80050b0:	f894 3081 	ldrb.w	r3, [r4, #129]	@ 0x81
  tickstart = HAL_GetTick();
 80050b4:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	b2df      	uxtb	r7, r3
 80050ba:	f040 80a9 	bne.w	8005210 <HAL_SPI_Transmit+0x184>
  if ((pData == NULL) || (Size == 0UL))
 80050be:	f1ba 0f00 	cmp.w	sl, #0
 80050c2:	f000 80c9 	beq.w	8005258 <HAL_SPI_Transmit+0x1cc>
 80050c6:	fab8 f388 	clz	r3, r8
 80050ca:	095b      	lsrs	r3, r3, #5
 80050cc:	f1b8 0f00 	cmp.w	r8, #0
 80050d0:	f000 80c2 	beq.w	8005258 <HAL_SPI_Transmit+0x1cc>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80050d4:	2203      	movs	r2, #3
  hspi->pRxBuffPtr  = NULL;
 80050d6:	6663      	str	r3, [r4, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80050d8:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80050dc:	f884 2081 	strb.w	r2, [r4, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050e0:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  hspi->TxXferCount = Size;
 80050e4:	f8a4 8062 	strh.w	r8, [r4, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t) 0UL;
 80050e8:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
    SPI_1LINE_TX(hspi);
 80050ec:	6821      	ldr	r1, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80050ee:	f8c4 a05c 	str.w	sl, [r4, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80050f2:	f8a4 8060 	strh.w	r8, [r4, #96]	@ 0x60
  hspi->RxISR       = NULL;
 80050f6:	e9c4 331c 	strd	r3, r3, [r4, #112]	@ 0x70
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050fa:	68a3      	ldr	r3, [r4, #8]
 80050fc:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8005100:	d103      	bne.n	800510a <HAL_SPI_Transmit+0x7e>
    SPI_1LINE_TX(hspi);
 8005102:	680b      	ldr	r3, [r1, #0]
 8005104:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005108:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800510a:	684b      	ldr	r3, [r1, #4]
 800510c:	f36f 030f 	bfc	r3, #0, #16
 8005110:	ea43 0308 	orr.w	r3, r3, r8
 8005114:	604b      	str	r3, [r1, #4]
  __HAL_SPI_ENABLE(hspi);
 8005116:	680b      	ldr	r3, [r1, #0]
 8005118:	f043 0301 	orr.w	r3, r3, #1
 800511c:	600b      	str	r3, [r1, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800511e:	6863      	ldr	r3, [r4, #4]
 8005120:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005124:	d103      	bne.n	800512e <HAL_SPI_Transmit+0xa2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005126:	680b      	ldr	r3, [r1, #0]
 8005128:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800512c:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800512e:	68e3      	ldr	r3, [r4, #12]
 8005130:	2b0f      	cmp	r3, #15
 8005132:	d838      	bhi.n	80051a6 <HAL_SPI_Transmit+0x11a>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005134:	2b07      	cmp	r3, #7
    while (hspi->TxXferCount > 0UL)
 8005136:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 800513a:	b29b      	uxth	r3, r3
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800513c:	d96f      	bls.n	800521e <HAL_SPI_Transmit+0x192>
    while (hspi->TxXferCount > 0UL)
 800513e:	b9db      	cbnz	r3, 8005178 <HAL_SPI_Transmit+0xec>
 8005140:	e052      	b.n	80051e8 <HAL_SPI_Transmit+0x15c>
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005142:	f8b4 2062 	ldrh.w	r2, [r4, #98]	@ 0x62
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005146:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005148:	b292      	uxth	r2, r2
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800514a:	4618      	mov	r0, r3
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800514c:	2a01      	cmp	r2, #1
 800514e:	f240 809c 	bls.w	800528a <HAL_SPI_Transmit+0x1fe>
 8005152:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8005154:	2a00      	cmp	r2, #0
 8005156:	f000 8098 	beq.w	800528a <HAL_SPI_Transmit+0x1fe>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800515a:	f853 2b04 	ldr.w	r2, [r3], #4
 800515e:	620a      	str	r2, [r1, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005160:	65e3      	str	r3, [r4, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005162:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 8005166:	3b02      	subs	r3, #2
 8005168:	b29b      	uxth	r3, r3
 800516a:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
    while (hspi->TxXferCount > 0UL)
 800516e:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 8005172:	b29b      	uxth	r3, r3
 8005174:	2b00      	cmp	r3, #0
 8005176:	d037      	beq.n	80051e8 <HAL_SPI_Transmit+0x15c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005178:	694b      	ldr	r3, [r1, #20]
 800517a:	f013 0802 	ands.w	r8, r3, #2
 800517e:	d1e0      	bne.n	8005142 <HAL_SPI_Transmit+0xb6>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005180:	f7fd f950 	bl	8002424 <HAL_GetTick>
 8005184:	1b80      	subs	r0, r0, r6
 8005186:	42a8      	cmp	r0, r5
 8005188:	d302      	bcc.n	8005190 <HAL_SPI_Transmit+0x104>
 800518a:	1c68      	adds	r0, r5, #1
 800518c:	f040 80a7 	bne.w	80052de <HAL_SPI_Transmit+0x252>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005190:	6821      	ldr	r1, [r4, #0]
 8005192:	e7ec      	b.n	800516e <HAL_SPI_Transmit+0xe2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005194:	f7fd f946 	bl	8002424 <HAL_GetTick>
 8005198:	1b80      	subs	r0, r0, r6
 800519a:	42a8      	cmp	r0, r5
 800519c:	d302      	bcc.n	80051a4 <HAL_SPI_Transmit+0x118>
 800519e:	1c6b      	adds	r3, r5, #1
 80051a0:	f040 809d 	bne.w	80052de <HAL_SPI_Transmit+0x252>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80051a4:	6821      	ldr	r1, [r4, #0]
    while (hspi->TxXferCount > 0UL)
 80051a6:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	b1e3      	cbz	r3, 80051e8 <HAL_SPI_Transmit+0x15c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80051ae:	694b      	ldr	r3, [r1, #20]
 80051b0:	f013 0802 	ands.w	r8, r3, #2
 80051b4:	d0ee      	beq.n	8005194 <HAL_SPI_Transmit+0x108>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80051b6:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80051b8:	f852 3b04 	ldr.w	r3, [r2], #4
 80051bc:	620b      	str	r3, [r1, #32]
        hspi->TxXferCount--;
 80051be:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80051c2:	65e2      	str	r2, [r4, #92]	@ 0x5c
        hspi->TxXferCount--;
 80051c4:	3b01      	subs	r3, #1
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
    while (hspi->TxXferCount > 0UL)
 80051cc:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d1eb      	bne.n	80051ae <HAL_SPI_Transmit+0x122>
 80051d6:	e007      	b.n	80051e8 <HAL_SPI_Transmit+0x15c>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051d8:	f7fd f924 	bl	8002424 <HAL_GetTick>
 80051dc:	1b80      	subs	r0, r0, r6
 80051de:	4285      	cmp	r5, r0
 80051e0:	d801      	bhi.n	80051e6 <HAL_SPI_Transmit+0x15a>
 80051e2:	1c6a      	adds	r2, r5, #1
 80051e4:	d174      	bne.n	80052d0 <HAL_SPI_Transmit+0x244>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80051e6:	6821      	ldr	r1, [r4, #0]
 80051e8:	694b      	ldr	r3, [r1, #20]
 80051ea:	071b      	lsls	r3, r3, #28
 80051ec:	d5f4      	bpl.n	80051d8 <HAL_SPI_Transmit+0x14c>
  SPI_CloseTransfer(hspi);
 80051ee:	4620      	mov	r0, r4
 80051f0:	f7ff fe40 	bl	8004e74 <SPI_CloseTransfer>
  hspi->State = HAL_SPI_STATE_READY;
 80051f4:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 80051f6:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 80051f8:	f884 2081 	strb.w	r2, [r4, #129]	@ 0x81
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80051fc:	f8d4 7084 	ldr.w	r7, [r4, #132]	@ 0x84
  __HAL_UNLOCK(hspi);
 8005200:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005204:	1aff      	subs	r7, r7, r3
 8005206:	bf18      	it	ne
 8005208:	2701      	movne	r7, #1
}
 800520a:	4638      	mov	r0, r7
 800520c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_UNLOCK(hspi);
 8005210:	2300      	movs	r3, #0
 8005212:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
  __HAL_LOCK(hspi);
 8005216:	2702      	movs	r7, #2
}
 8005218:	4638      	mov	r0, r7
 800521a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    while (hspi->TxXferCount > 0UL)
 800521e:	2b00      	cmp	r3, #0
 8005220:	d0e2      	beq.n	80051e8 <HAL_SPI_Transmit+0x15c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005222:	694b      	ldr	r3, [r1, #20]
 8005224:	f013 0802 	ands.w	r8, r3, #2
 8005228:	d049      	beq.n	80052be <HAL_SPI_Transmit+0x232>
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800522a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800522e:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8005230:	b29b      	uxth	r3, r3
 8005232:	2b03      	cmp	r3, #3
 8005234:	d916      	bls.n	8005264 <HAL_SPI_Transmit+0x1d8>
 8005236:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005238:	2b40      	cmp	r3, #64	@ 0x40
 800523a:	d913      	bls.n	8005264 <HAL_SPI_Transmit+0x1d8>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800523c:	f852 3b04 	ldr.w	r3, [r2], #4
 8005240:	620b      	str	r3, [r1, #32]
          hspi->TxXferCount -= (uint16_t)4UL;
 8005242:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005246:	65e2      	str	r2, [r4, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8005248:	3b04      	subs	r3, #4
 800524a:	b29b      	uxth	r3, r3
 800524c:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
    while (hspi->TxXferCount > 0UL)
 8005250:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 8005254:	b29b      	uxth	r3, r3
 8005256:	e7e2      	b.n	800521e <HAL_SPI_Transmit+0x192>
    __HAL_UNLOCK(hspi);
 8005258:	2300      	movs	r3, #0
}
 800525a:	4638      	mov	r0, r7
    __HAL_UNLOCK(hspi);
 800525c:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
}
 8005260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005264:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 8005268:	b29b      	uxth	r3, r3
 800526a:	2b01      	cmp	r3, #1
 800526c:	d919      	bls.n	80052a2 <HAL_SPI_Transmit+0x216>
 800526e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005270:	b1bb      	cbz	r3, 80052a2 <HAL_SPI_Transmit+0x216>
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8005272:	f832 3b02 	ldrh.w	r3, [r2], #2
 8005276:	f8a9 3020 	strh.w	r3, [r9, #32]
          hspi->TxXferCount -= (uint16_t)2UL;
 800527a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800527e:	65e2      	str	r2, [r4, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005280:	3b02      	subs	r3, #2
 8005282:	b29b      	uxth	r3, r3
 8005284:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
 8005288:	e7e2      	b.n	8005250 <HAL_SPI_Transmit+0x1c4>
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800528a:	f830 3b02 	ldrh.w	r3, [r0], #2
 800528e:	f8a9 3020 	strh.w	r3, [r9, #32]
          hspi->TxXferCount--;
 8005292:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005296:	65e0      	str	r0, [r4, #92]	@ 0x5c
          hspi->TxXferCount--;
 8005298:	3b01      	subs	r3, #1
 800529a:	b29b      	uxth	r3, r3
 800529c:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
 80052a0:	e765      	b.n	800516e <HAL_SPI_Transmit+0xe2>
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80052a2:	7813      	ldrb	r3, [r2, #0]
 80052a4:	f881 3020 	strb.w	r3, [r1, #32]
          hspi->TxXferCount--;
 80052a8:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80052ac:	6821      	ldr	r1, [r4, #0]
          hspi->TxXferCount--;
 80052ae:	3b01      	subs	r3, #1
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80052b6:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80052b8:	3301      	adds	r3, #1
 80052ba:	65e3      	str	r3, [r4, #92]	@ 0x5c
          hspi->TxXferCount--;
 80052bc:	e7c8      	b.n	8005250 <HAL_SPI_Transmit+0x1c4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052be:	f7fd f8b1 	bl	8002424 <HAL_GetTick>
 80052c2:	1b80      	subs	r0, r0, r6
 80052c4:	42a8      	cmp	r0, r5
 80052c6:	d301      	bcc.n	80052cc <HAL_SPI_Transmit+0x240>
 80052c8:	1c69      	adds	r1, r5, #1
 80052ca:	d108      	bne.n	80052de <HAL_SPI_Transmit+0x252>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80052cc:	6821      	ldr	r1, [r4, #0]
 80052ce:	e7bf      	b.n	8005250 <HAL_SPI_Transmit+0x1c4>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052d0:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 80052d4:	f043 0320 	orr.w	r3, r3, #32
 80052d8:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
 80052dc:	e787      	b.n	80051ee <HAL_SPI_Transmit+0x162>
          SPI_CloseTransfer(hspi);
 80052de:	4620      	mov	r0, r4
 80052e0:	f7ff fdc8 	bl	8004e74 <SPI_CloseTransfer>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80052e4:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80052e8:	2201      	movs	r2, #1
          __HAL_UNLOCK(hspi);
 80052ea:	f884 8080 	strb.w	r8, [r4, #128]	@ 0x80
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80052ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052f2:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80052f6:	f884 2081 	strb.w	r2, [r4, #129]	@ 0x81
          return HAL_ERROR;
 80052fa:	e786      	b.n	800520a <HAL_SPI_Transmit+0x17e>

080052fc <HAL_SPI_TransmitReceive>:
{
 80052fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005300:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8005302:	f890 3080 	ldrb.w	r3, [r0, #128]	@ 0x80
{
 8005306:	9e08      	ldr	r6, [sp, #32]
  __HAL_LOCK(hspi);
 8005308:	2b01      	cmp	r3, #1
 800530a:	f000 808c 	beq.w	8005426 <HAL_SPI_TransmitReceive+0x12a>
 800530e:	2301      	movs	r3, #1
 8005310:	4604      	mov	r4, r0
 8005312:	468a      	mov	sl, r1
 8005314:	4690      	mov	r8, r2
 8005316:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800531a:	f8d0 9000 	ldr.w	r9, [r0]
  tickstart = HAL_GetTick();
 800531e:	f7fd f881 	bl	8002424 <HAL_GetTick>
  tmp_state           = hspi->State;
 8005322:	f894 3081 	ldrb.w	r3, [r4, #129]	@ 0x81
  tickstart = HAL_GetTick();
 8005326:	4607      	mov	r7, r0
  tmp_mode            = hspi->Init.Mode;
 8005328:	6861      	ldr	r1, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800532a:	2b01      	cmp	r3, #1
  tmp_state           = hspi->State;
 800532c:	b2da      	uxtb	r2, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800532e:	d007      	beq.n	8005340 <HAL_SPI_TransmitReceive+0x44>
 8005330:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
 8005334:	d174      	bne.n	8005420 <HAL_SPI_TransmitReceive+0x124>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005336:	68a3      	ldr	r3, [r4, #8]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d171      	bne.n	8005420 <HAL_SPI_TransmitReceive+0x124>
 800533c:	2a04      	cmp	r2, #4
 800533e:	d16f      	bne.n	8005420 <HAL_SPI_TransmitReceive+0x124>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8005340:	f1b8 0f00 	cmp.w	r8, #0
 8005344:	bf18      	it	ne
 8005346:	f1ba 0f00 	cmpne.w	sl, #0
 800534a:	d06f      	beq.n	800542c <HAL_SPI_TransmitReceive+0x130>
 800534c:	2d00      	cmp	r5, #0
 800534e:	d06d      	beq.n	800542c <HAL_SPI_TransmitReceive+0x130>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005350:	f894 3081 	ldrb.w	r3, [r4, #129]	@ 0x81
 8005354:	2b04      	cmp	r3, #4
 8005356:	d002      	beq.n	800535e <HAL_SPI_TransmitReceive+0x62>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005358:	2305      	movs	r3, #5
 800535a:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800535e:	6822      	ldr	r2, [r4, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005360:	2300      	movs	r3, #0
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005362:	f8c4 8064 	str.w	r8, [r4, #100]	@ 0x64
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005366:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800536a:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  hspi->RxXferCount = Size;
 800536e:	f8a4 506a 	strh.w	r5, [r4, #106]	@ 0x6a
  hspi->TxXferCount = Size;
 8005372:	f8a4 5062 	strh.w	r5, [r4, #98]	@ 0x62
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005376:	f8c4 a05c 	str.w	sl, [r4, #92]	@ 0x5c
  hspi->RxXferSize  = Size;
 800537a:	f8a4 5068 	strh.w	r5, [r4, #104]	@ 0x68
  hspi->TxXferSize  = Size;
 800537e:	f8a4 5060 	strh.w	r5, [r4, #96]	@ 0x60
  hspi->RxISR       = NULL;
 8005382:	e9c4 331c 	strd	r3, r3, [r4, #112]	@ 0x70
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005386:	6853      	ldr	r3, [r2, #4]
 8005388:	f36f 030f 	bfc	r3, #0, #16
 800538c:	ea43 0305 	orr.w	r3, r3, r5
 8005390:	6053      	str	r3, [r2, #4]
  __HAL_SPI_ENABLE(hspi);
 8005392:	6813      	ldr	r3, [r2, #0]
 8005394:	f043 0301 	orr.w	r3, r3, #1
 8005398:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800539a:	d103      	bne.n	80053a4 <HAL_SPI_TransmitReceive+0xa8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800539c:	6813      	ldr	r3, [r2, #0]
 800539e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80053a2:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80053a4:	68e3      	ldr	r3, [r4, #12]
 80053a6:	2b0f      	cmp	r3, #15
 80053a8:	d961      	bls.n	800546e <HAL_SPI_TransmitReceive+0x172>
  initial_RxXferCount = Size;
 80053aa:	46a8      	mov	r8, r5
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 80053ac:	f248 0908 	movw	r9, #32776	@ 0x8008
 80053b0:	e030      	b.n	8005414 <HAL_SPI_TransmitReceive+0x118>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80053b2:	6953      	ldr	r3, [r2, #20]
 80053b4:	0799      	lsls	r1, r3, #30
 80053b6:	d50e      	bpl.n	80053d6 <HAL_SPI_TransmitReceive+0xda>
 80053b8:	b16d      	cbz	r5, 80053d6 <HAL_SPI_TransmitReceive+0xda>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80053ba:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80053bc:	f853 1b04 	ldr.w	r1, [r3], #4
 80053c0:	6211      	str	r1, [r2, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80053c2:	65e3      	str	r3, [r4, #92]	@ 0x5c
        hspi->TxXferCount --;
 80053c4:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 80053c8:	3b01      	subs	r3, #1
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80053d0:	f8b4 5062 	ldrh.w	r5, [r4, #98]	@ 0x62
 80053d4:	b2ad      	uxth	r5, r5
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 80053d6:	6953      	ldr	r3, [r2, #20]
 80053d8:	ea13 0f09 	tst.w	r3, r9
 80053dc:	d011      	beq.n	8005402 <HAL_SPI_TransmitReceive+0x106>
 80053de:	f1b8 0f00 	cmp.w	r8, #0
 80053e2:	d00e      	beq.n	8005402 <HAL_SPI_TransmitReceive+0x106>
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80053e4:	6b11      	ldr	r1, [r2, #48]	@ 0x30
        hspi->RxXferCount --;
 80053e6:	f8b4 306a 	ldrh.w	r3, [r4, #106]	@ 0x6a
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80053ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
        hspi->RxXferCount --;
 80053ec:	3b01      	subs	r3, #1
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80053ee:	f842 1b04 	str.w	r1, [r2], #4
        hspi->RxXferCount --;
 80053f2:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80053f4:	6662      	str	r2, [r4, #100]	@ 0x64
        hspi->RxXferCount --;
 80053f6:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 80053fa:	f8b4 806a 	ldrh.w	r8, [r4, #106]	@ 0x6a
 80053fe:	fa1f f888 	uxth.w	r8, r8
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005402:	f7fd f80f 	bl	8002424 <HAL_GetTick>
 8005406:	1bc0      	subs	r0, r0, r7
 8005408:	42b0      	cmp	r0, r6
 800540a:	d302      	bcc.n	8005412 <HAL_SPI_TransmitReceive+0x116>
 800540c:	1c73      	adds	r3, r6, #1
 800540e:	f040 8104 	bne.w	800561a <HAL_SPI_TransmitReceive+0x31e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8005412:	6822      	ldr	r2, [r4, #0]
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005414:	ea45 0308 	orr.w	r3, r5, r8
 8005418:	b29b      	uxth	r3, r3
 800541a:	2b00      	cmp	r3, #0
 800541c:	d1c9      	bne.n	80053b2 <HAL_SPI_TransmitReceive+0xb6>
 800541e:	e013      	b.n	8005448 <HAL_SPI_TransmitReceive+0x14c>
    __HAL_UNLOCK(hspi);
 8005420:	2300      	movs	r3, #0
 8005422:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
  __HAL_LOCK(hspi);
 8005426:	2002      	movs	r0, #2
}
 8005428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_UNLOCK(hspi);
 800542c:	2300      	movs	r3, #0
 800542e:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
    return errorcode;
 8005432:	2001      	movs	r0, #1
 8005434:	e7f8      	b.n	8005428 <HAL_SPI_TransmitReceive+0x12c>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005436:	f7fc fff5 	bl	8002424 <HAL_GetTick>
 800543a:	1bc0      	subs	r0, r0, r7
 800543c:	4286      	cmp	r6, r0
 800543e:	d802      	bhi.n	8005446 <HAL_SPI_TransmitReceive+0x14a>
 8005440:	1c72      	adds	r2, r6, #1
 8005442:	f040 80e3 	bne.w	800560c <HAL_SPI_TransmitReceive+0x310>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005446:	6822      	ldr	r2, [r4, #0]
 8005448:	6953      	ldr	r3, [r2, #20]
 800544a:	071b      	lsls	r3, r3, #28
 800544c:	d5f3      	bpl.n	8005436 <HAL_SPI_TransmitReceive+0x13a>
  SPI_CloseTransfer(hspi);
 800544e:	4620      	mov	r0, r4
 8005450:	f7ff fd10 	bl	8004e74 <SPI_CloseTransfer>
  hspi->State = HAL_SPI_STATE_READY;
 8005454:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8005456:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8005458:	f884 2081 	strb.w	r2, [r4, #129]	@ 0x81
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800545c:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
  __HAL_UNLOCK(hspi);
 8005460:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005464:	1ac0      	subs	r0, r0, r3
 8005466:	bf18      	it	ne
 8005468:	2001      	movne	r0, #1
}
 800546a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800546e:	2b07      	cmp	r3, #7
  initial_RxXferCount = Size;
 8005470:	46a8      	mov	r8, r5
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005472:	d974      	bls.n	800555e <HAL_SPI_TransmitReceive+0x262>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005474:	ea45 0308 	orr.w	r3, r5, r8
 8005478:	b29b      	uxth	r3, r3
 800547a:	2b00      	cmp	r3, #0
 800547c:	d0e4      	beq.n	8005448 <HAL_SPI_TransmitReceive+0x14c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800547e:	6953      	ldr	r3, [r2, #20]
 8005480:	0798      	lsls	r0, r3, #30
 8005482:	d515      	bpl.n	80054b0 <HAL_SPI_TransmitReceive+0x1b4>
 8005484:	b1a5      	cbz	r5, 80054b0 <HAL_SPI_TransmitReceive+0x1b4>
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005486:	2d01      	cmp	r5, #1
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005488:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800548a:	d003      	beq.n	8005494 <HAL_SPI_TransmitReceive+0x198>
 800548c:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800548e:	2900      	cmp	r1, #0
 8005490:	f040 80d3 	bne.w	800563a <HAL_SPI_TransmitReceive+0x33e>
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8005494:	f833 1b02 	ldrh.w	r1, [r3], #2
 8005498:	f8a9 1020 	strh.w	r1, [r9, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800549c:	65e3      	str	r3, [r4, #92]	@ 0x5c
          hspi->TxXferCount--;
 800549e:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 80054a2:	3b01      	subs	r3, #1
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
          initial_TxXferCount = hspi->TxXferCount;
 80054aa:	f8b4 5062 	ldrh.w	r5, [r4, #98]	@ 0x62
 80054ae:	b2ad      	uxth	r5, r5
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 80054b0:	6953      	ldr	r3, [r2, #20]
 80054b2:	f413 4f60 	tst.w	r3, #57344	@ 0xe000
 80054b6:	d015      	beq.n	80054e4 <HAL_SPI_TransmitReceive+0x1e8>
 80054b8:	f1b8 0f00 	cmp.w	r8, #0
 80054bc:	d012      	beq.n	80054e4 <HAL_SPI_TransmitReceive+0x1e8>
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 80054be:	6951      	ldr	r1, [r2, #20]
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80054c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 80054c2:	0409      	lsls	r1, r1, #16
 80054c4:	f140 8092 	bpl.w	80055ec <HAL_SPI_TransmitReceive+0x2f0>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80054c8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80054ca:	f843 2b04 	str.w	r2, [r3], #4
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80054ce:	6663      	str	r3, [r4, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 80054d0:	f8b4 306a 	ldrh.w	r3, [r4, #106]	@ 0x6a
 80054d4:	3b02      	subs	r3, #2
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80054dc:	f8b4 806a 	ldrh.w	r8, [r4, #106]	@ 0x6a
 80054e0:	fa1f f888 	uxth.w	r8, r8
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054e4:	f7fc ff9e 	bl	8002424 <HAL_GetTick>
 80054e8:	1bc0      	subs	r0, r0, r7
 80054ea:	42b0      	cmp	r0, r6
 80054ec:	d302      	bcc.n	80054f4 <HAL_SPI_TransmitReceive+0x1f8>
 80054ee:	1c72      	adds	r2, r6, #1
 80054f0:	f040 8093 	bne.w	800561a <HAL_SPI_TransmitReceive+0x31e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 80054f4:	6822      	ldr	r2, [r4, #0]
 80054f6:	e7bd      	b.n	8005474 <HAL_SPI_TransmitReceive+0x178>
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80054f8:	2d01      	cmp	r5, #1
 80054fa:	d14f      	bne.n	800559c <HAL_SPI_TransmitReceive+0x2a0>
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	f882 3020 	strb.w	r3, [r2, #32]
          hspi->TxXferCount--;
 8005502:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8005506:	6822      	ldr	r2, [r4, #0]
          hspi->TxXferCount--;
 8005508:	3b01      	subs	r3, #1
 800550a:	b29b      	uxth	r3, r3
 800550c:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8005510:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
          initial_TxXferCount = hspi->TxXferCount;
 8005512:	f8b4 5062 	ldrh.w	r5, [r4, #98]	@ 0x62
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8005516:	3301      	adds	r3, #1
          initial_TxXferCount = hspi->TxXferCount;
 8005518:	b2ad      	uxth	r5, r5
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800551a:	65e3      	str	r3, [r4, #92]	@ 0x5c
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800551c:	6953      	ldr	r3, [r2, #20]
 800551e:	f413 4f60 	tst.w	r3, #57344	@ 0xe000
 8005522:	d014      	beq.n	800554e <HAL_SPI_TransmitReceive+0x252>
 8005524:	f1b8 0f00 	cmp.w	r8, #0
 8005528:	d011      	beq.n	800554e <HAL_SPI_TransmitReceive+0x252>
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800552a:	6951      	ldr	r1, [r2, #20]
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800552c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800552e:	0408      	lsls	r0, r1, #16
 8005530:	d546      	bpl.n	80055c0 <HAL_SPI_TransmitReceive+0x2c4>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005532:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005534:	f843 2b04 	str.w	r2, [r3], #4
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8005538:	6663      	str	r3, [r4, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800553a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	@ 0x6a
 800553e:	3b04      	subs	r3, #4
 8005540:	b29b      	uxth	r3, r3
 8005542:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005546:	f8b4 806a 	ldrh.w	r8, [r4, #106]	@ 0x6a
 800554a:	fa1f f888 	uxth.w	r8, r8
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800554e:	f7fc ff69 	bl	8002424 <HAL_GetTick>
 8005552:	1bc0      	subs	r0, r0, r7
 8005554:	42b0      	cmp	r0, r6
 8005556:	d301      	bcc.n	800555c <HAL_SPI_TransmitReceive+0x260>
 8005558:	1c71      	adds	r1, r6, #1
 800555a:	d15e      	bne.n	800561a <HAL_SPI_TransmitReceive+0x31e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800555c:	6822      	ldr	r2, [r4, #0]
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800555e:	ea45 0308 	orr.w	r3, r5, r8
 8005562:	b29b      	uxth	r3, r3
 8005564:	2b00      	cmp	r3, #0
 8005566:	f43f af6f 	beq.w	8005448 <HAL_SPI_TransmitReceive+0x14c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800556a:	6953      	ldr	r3, [r2, #20]
 800556c:	079b      	lsls	r3, r3, #30
 800556e:	d5d5      	bpl.n	800551c <HAL_SPI_TransmitReceive+0x220>
 8005570:	2d00      	cmp	r5, #0
 8005572:	d0d3      	beq.n	800551c <HAL_SPI_TransmitReceive+0x220>
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8005574:	2d03      	cmp	r5, #3
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005576:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8005578:	d9be      	bls.n	80054f8 <HAL_SPI_TransmitReceive+0x1fc>
 800557a:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800557c:	2940      	cmp	r1, #64	@ 0x40
 800557e:	d90e      	bls.n	800559e <HAL_SPI_TransmitReceive+0x2a2>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005580:	f853 1b04 	ldr.w	r1, [r3], #4
 8005584:	6211      	str	r1, [r2, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005586:	65e3      	str	r3, [r4, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8005588:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 800558c:	3b04      	subs	r3, #4
 800558e:	b29b      	uxth	r3, r3
 8005590:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8005594:	f8b4 5062 	ldrh.w	r5, [r4, #98]	@ 0x62
 8005598:	b2ad      	uxth	r5, r5
 800559a:	e7bf      	b.n	800551c <HAL_SPI_TransmitReceive+0x220>
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800559c:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800559e:	2900      	cmp	r1, #0
 80055a0:	d0ac      	beq.n	80054fc <HAL_SPI_TransmitReceive+0x200>
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80055a2:	f833 1b02 	ldrh.w	r1, [r3], #2
 80055a6:	f8a9 1020 	strh.w	r1, [r9, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80055aa:	65e3      	str	r3, [r4, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80055ac:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 80055b0:	3b02      	subs	r3, #2
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
          initial_TxXferCount = hspi->TxXferCount;
 80055b8:	f8b4 5062 	ldrh.w	r5, [r4, #98]	@ 0x62
 80055bc:	b2ad      	uxth	r5, r5
 80055be:	e7ad      	b.n	800551c <HAL_SPI_TransmitReceive+0x220>
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 80055c0:	6951      	ldr	r1, [r2, #20]
 80055c2:	f401 41c0 	and.w	r1, r1, #24576	@ 0x6000
 80055c6:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 80055ca:	d944      	bls.n	8005656 <HAL_SPI_TransmitReceive+0x35a>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80055cc:	f8b9 2030 	ldrh.w	r2, [r9, #48]	@ 0x30
 80055d0:	f823 2b02 	strh.w	r2, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80055d4:	6663      	str	r3, [r4, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 80055d6:	f8b4 306a 	ldrh.w	r3, [r4, #106]	@ 0x6a
 80055da:	3b02      	subs	r3, #2
 80055dc:	b29b      	uxth	r3, r3
 80055de:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80055e2:	f8b4 806a 	ldrh.w	r8, [r4, #106]	@ 0x6a
 80055e6:	fa1f f888 	uxth.w	r8, r8
 80055ea:	e7b0      	b.n	800554e <HAL_SPI_TransmitReceive+0x252>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80055ec:	f8b9 2030 	ldrh.w	r2, [r9, #48]	@ 0x30
 80055f0:	f823 2b02 	strh.w	r2, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80055f4:	6663      	str	r3, [r4, #100]	@ 0x64
          hspi->RxXferCount--;
 80055f6:	f8b4 306a 	ldrh.w	r3, [r4, #106]	@ 0x6a
 80055fa:	3b01      	subs	r3, #1
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005602:	f8b4 806a 	ldrh.w	r8, [r4, #106]	@ 0x6a
 8005606:	fa1f f888 	uxth.w	r8, r8
 800560a:	e76b      	b.n	80054e4 <HAL_SPI_TransmitReceive+0x1e8>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800560c:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8005610:	f043 0320 	orr.w	r3, r3, #32
 8005614:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
 8005618:	e719      	b.n	800544e <HAL_SPI_TransmitReceive+0x152>
        SPI_CloseTransfer(hspi);
 800561a:	4620      	mov	r0, r4
 800561c:	f7ff fc2a 	bl	8004e74 <SPI_CloseTransfer>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005620:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
        __HAL_UNLOCK(hspi);
 8005624:	2100      	movs	r1, #0
        hspi->State = HAL_SPI_STATE_READY;
 8005626:	2201      	movs	r2, #1
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005628:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
        __HAL_UNLOCK(hspi);
 800562c:	f884 1080 	strb.w	r1, [r4, #128]	@ 0x80
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005630:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8005634:	f884 2081 	strb.w	r2, [r4, #129]	@ 0x81
        return HAL_ERROR;
 8005638:	e6fb      	b.n	8005432 <HAL_SPI_TransmitReceive+0x136>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800563a:	f853 1b04 	ldr.w	r1, [r3], #4
 800563e:	6211      	str	r1, [r2, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005640:	65e3      	str	r3, [r4, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005642:	f8b4 3062 	ldrh.w	r3, [r4, #98]	@ 0x62
 8005646:	3b02      	subs	r3, #2
 8005648:	b29b      	uxth	r3, r3
 800564a:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800564e:	f8b4 5062 	ldrh.w	r5, [r4, #98]	@ 0x62
 8005652:	b2ad      	uxth	r5, r5
 8005654:	e72c      	b.n	80054b0 <HAL_SPI_TransmitReceive+0x1b4>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005656:	f892 2030 	ldrb.w	r2, [r2, #48]	@ 0x30
 800565a:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 800565c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	@ 0x6a
 8005660:	3b01      	subs	r3, #1
 8005662:	b29b      	uxth	r3, r3
 8005664:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005668:	6e63      	ldr	r3, [r4, #100]	@ 0x64
          initial_RxXferCount = hspi->RxXferCount;
 800566a:	f8b4 806a 	ldrh.w	r8, [r4, #106]	@ 0x6a
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800566e:	3301      	adds	r3, #1
          initial_RxXferCount = hspi->RxXferCount;
 8005670:	fa1f f888 	uxth.w	r8, r8
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005674:	6663      	str	r3, [r4, #100]	@ 0x64
          initial_RxXferCount = hspi->RxXferCount;
 8005676:	e76a      	b.n	800554e <HAL_SPI_TransmitReceive+0x252>

08005678 <HAL_SPI_Receive>:
{
 8005678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800567c:	461d      	mov	r5, r3
 800567e:	b082      	sub	sp, #8
 8005680:	4604      	mov	r4, r0
 8005682:	4690      	mov	r8, r2
 8005684:	468a      	mov	sl, r1
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005686:	e9d0 9300 	ldrd	r9, r3, [r0]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800568a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800568e:	f000 8087 	beq.w	80057a0 <HAL_SPI_Receive+0x128>
  __HAL_LOCK(hspi);
 8005692:	f894 3080 	ldrb.w	r3, [r4, #128]	@ 0x80
 8005696:	2b01      	cmp	r3, #1
 8005698:	d07d      	beq.n	8005796 <HAL_SPI_Receive+0x11e>
 800569a:	2301      	movs	r3, #1
 800569c:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
  tickstart = HAL_GetTick();
 80056a0:	f7fc fec0 	bl	8002424 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80056a4:	f894 3081 	ldrb.w	r3, [r4, #129]	@ 0x81
  tickstart = HAL_GetTick();
 80056a8:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	b2df      	uxtb	r7, r3
 80056ae:	d16f      	bne.n	8005790 <HAL_SPI_Receive+0x118>
  if ((pData == NULL) || (Size == 0UL))
 80056b0:	f1ba 0f00 	cmp.w	sl, #0
 80056b4:	f000 80da 	beq.w	800586c <HAL_SPI_Receive+0x1f4>
 80056b8:	fab8 f388 	clz	r3, r8
 80056bc:	095b      	lsrs	r3, r3, #5
 80056be:	f1b8 0f00 	cmp.w	r8, #0
 80056c2:	f000 80d3 	beq.w	800586c <HAL_SPI_Receive+0x1f4>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80056c6:	2204      	movs	r2, #4
  hspi->pTxBuffPtr  = NULL;
 80056c8:	65e3      	str	r3, [r4, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 80056ca:	f8a4 3060 	strh.w	r3, [r4, #96]	@ 0x60
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80056ce:	f884 2081 	strb.w	r2, [r4, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056d2:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  hspi->RxXferCount = Size;
 80056d6:	f8a4 806a 	strh.w	r8, [r4, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80056da:	f8a4 3062 	strh.w	r3, [r4, #98]	@ 0x62
    SPI_1LINE_RX(hspi);
 80056de:	6821      	ldr	r1, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80056e0:	f8c4 a064 	str.w	sl, [r4, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 80056e4:	f8a4 8068 	strh.w	r8, [r4, #104]	@ 0x68
  hspi->RxISR       = NULL;
 80056e8:	e9c4 331c 	strd	r3, r3, [r4, #112]	@ 0x70
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056ec:	68a3      	ldr	r3, [r4, #8]
 80056ee:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80056f2:	d103      	bne.n	80056fc <HAL_SPI_Receive+0x84>
    SPI_1LINE_RX(hspi);
 80056f4:	680b      	ldr	r3, [r1, #0]
 80056f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80056fa:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80056fc:	684b      	ldr	r3, [r1, #4]
 80056fe:	f36f 030f 	bfc	r3, #0, #16
 8005702:	ea43 0308 	orr.w	r3, r3, r8
 8005706:	604b      	str	r3, [r1, #4]
  __HAL_SPI_ENABLE(hspi);
 8005708:	680b      	ldr	r3, [r1, #0]
 800570a:	f043 0301 	orr.w	r3, r3, #1
 800570e:	600b      	str	r3, [r1, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005710:	6863      	ldr	r3, [r4, #4]
 8005712:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005716:	d103      	bne.n	8005720 <HAL_SPI_Receive+0xa8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005718:	680b      	ldr	r3, [r1, #0]
 800571a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800571e:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005720:	68e3      	ldr	r3, [r4, #12]
 8005722:	2b0f      	cmp	r3, #15
 8005724:	d84a      	bhi.n	80057bc <HAL_SPI_Receive+0x144>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005726:	2b07      	cmp	r3, #7
    while (hspi->RxXferCount > 0UL)
 8005728:	f8b4 306a 	ldrh.w	r3, [r4, #106]	@ 0x6a
 800572c:	b29b      	uxth	r3, r3
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800572e:	f200 80a4 	bhi.w	800587a <HAL_SPI_Receive+0x202>
    while (hspi->RxXferCount > 0UL)
 8005732:	b983      	cbnz	r3, 8005756 <HAL_SPI_Receive+0xde>
 8005734:	e07b      	b.n	800582e <HAL_SPI_Receive+0x1b6>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005736:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8005738:	f842 3b04 	str.w	r3, [r2], #4
          hspi->RxXferCount -= (uint16_t)4UL;
 800573c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	@ 0x6a
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8005740:	6662      	str	r2, [r4, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8005742:	3b04      	subs	r3, #4
 8005744:	b29b      	uxth	r3, r3
 8005746:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
    while (hspi->RxXferCount > 0UL)
 800574a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	@ 0x6a
 800574e:	b29b      	uxth	r3, r3
 8005750:	2b00      	cmp	r3, #0
 8005752:	d06c      	beq.n	800582e <HAL_SPI_Receive+0x1b6>
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8005754:	6821      	ldr	r1, [r4, #0]
 8005756:	694b      	ldr	r3, [r1, #20]
 8005758:	f413 4860 	ands.w	r8, r3, #57344	@ 0xe000
 800575c:	d05f      	beq.n	800581e <HAL_SPI_Receive+0x1a6>
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800575e:	694a      	ldr	r2, [r1, #20]
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005760:	6e63      	ldr	r3, [r4, #100]	@ 0x64
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8005762:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005766:	461a      	mov	r2, r3
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8005768:	d1e5      	bne.n	8005736 <HAL_SPI_Receive+0xbe>
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800576a:	694a      	ldr	r2, [r1, #20]
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800576c:	4618      	mov	r0, r3
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800576e:	f402 42c0 	and.w	r2, r2, #24576	@ 0x6000
 8005772:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8005776:	d96c      	bls.n	8005852 <HAL_SPI_Receive+0x1da>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005778:	f8b9 3030 	ldrh.w	r3, [r9, #48]	@ 0x30
 800577c:	f820 3b02 	strh.w	r3, [r0], #2
          hspi->RxXferCount -= (uint16_t)2UL;
 8005780:	f8b4 306a 	ldrh.w	r3, [r4, #106]	@ 0x6a
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005784:	6660      	str	r0, [r4, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8005786:	3b02      	subs	r3, #2
 8005788:	b29b      	uxth	r3, r3
 800578a:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
 800578e:	e7dc      	b.n	800574a <HAL_SPI_Receive+0xd2>
    __HAL_UNLOCK(hspi);
 8005790:	2300      	movs	r3, #0
 8005792:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
  __HAL_LOCK(hspi);
 8005796:	2702      	movs	r7, #2
}
 8005798:	4638      	mov	r0, r7
 800579a:	b002      	add	sp, #8
 800579c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80057a0:	6883      	ldr	r3, [r0, #8]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	f47f af75 	bne.w	8005692 <HAL_SPI_Receive+0x1a>
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80057a8:	9500      	str	r5, [sp, #0]
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80057aa:	2504      	movs	r5, #4
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80057ac:	4613      	mov	r3, r2
 80057ae:	460a      	mov	r2, r1
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80057b0:	f880 5081 	strb.w	r5, [r0, #129]	@ 0x81
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80057b4:	f7ff fda2 	bl	80052fc <HAL_SPI_TransmitReceive>
 80057b8:	4607      	mov	r7, r0
 80057ba:	e7ed      	b.n	8005798 <HAL_SPI_Receive+0x120>
    while (hspi->RxXferCount > 0UL)
 80057bc:	f8b4 306a 	ldrh.w	r3, [r4, #106]	@ 0x6a
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	b3a3      	cbz	r3, 800582e <HAL_SPI_Receive+0x1b6>
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 80057c4:	f248 0908 	movw	r9, #32776	@ 0x8008
 80057c8:	e00f      	b.n	80057ea <HAL_SPI_Receive+0x172>
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80057ca:	6b09      	ldr	r1, [r1, #48]	@ 0x30
        hspi->RxXferCount--;
 80057cc:	f8b4 206a 	ldrh.w	r2, [r4, #106]	@ 0x6a
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80057d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
        hspi->RxXferCount--;
 80057d2:	3a01      	subs	r2, #1
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80057d4:	f843 1b04 	str.w	r1, [r3], #4
        hspi->RxXferCount--;
 80057d8:	b292      	uxth	r2, r2
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80057da:	6663      	str	r3, [r4, #100]	@ 0x64
        hspi->RxXferCount--;
 80057dc:	f8a4 206a 	strh.w	r2, [r4, #106]	@ 0x6a
    while (hspi->RxXferCount > 0UL)
 80057e0:	f8b4 306a 	ldrh.w	r3, [r4, #106]	@ 0x6a
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	b313      	cbz	r3, 800582e <HAL_SPI_Receive+0x1b6>
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 80057e8:	6821      	ldr	r1, [r4, #0]
 80057ea:	694b      	ldr	r3, [r1, #20]
 80057ec:	ea13 0809 	ands.w	r8, r3, r9
 80057f0:	d1eb      	bne.n	80057ca <HAL_SPI_Receive+0x152>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057f2:	f7fc fe17 	bl	8002424 <HAL_GetTick>
 80057f6:	1b80      	subs	r0, r0, r6
 80057f8:	42a8      	cmp	r0, r5
 80057fa:	d3f1      	bcc.n	80057e0 <HAL_SPI_Receive+0x168>
 80057fc:	1c69      	adds	r1, r5, #1
 80057fe:	d0ef      	beq.n	80057e0 <HAL_SPI_Receive+0x168>
          SPI_CloseTransfer(hspi);
 8005800:	4620      	mov	r0, r4
 8005802:	f7ff fb37 	bl	8004e74 <SPI_CloseTransfer>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005806:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800580a:	2201      	movs	r2, #1
          __HAL_UNLOCK(hspi);
 800580c:	f884 8080 	strb.w	r8, [r4, #128]	@ 0x80
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005810:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005814:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005818:	f884 2081 	strb.w	r2, [r4, #129]	@ 0x81
          return HAL_ERROR;
 800581c:	e7bc      	b.n	8005798 <HAL_SPI_Receive+0x120>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800581e:	f7fc fe01 	bl	8002424 <HAL_GetTick>
 8005822:	1b80      	subs	r0, r0, r6
 8005824:	42a8      	cmp	r0, r5
 8005826:	d390      	bcc.n	800574a <HAL_SPI_Receive+0xd2>
 8005828:	1c6b      	adds	r3, r5, #1
 800582a:	d08e      	beq.n	800574a <HAL_SPI_Receive+0xd2>
 800582c:	e7e8      	b.n	8005800 <HAL_SPI_Receive+0x188>
  SPI_CloseTransfer(hspi);
 800582e:	4620      	mov	r0, r4
 8005830:	f7ff fb20 	bl	8004e74 <SPI_CloseTransfer>
  hspi->State = HAL_SPI_STATE_READY;
 8005834:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8005836:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8005838:	f884 2081 	strb.w	r2, [r4, #129]	@ 0x81
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800583c:	f8d4 7084 	ldr.w	r7, [r4, #132]	@ 0x84
  __HAL_UNLOCK(hspi);
 8005840:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005844:	1aff      	subs	r7, r7, r3
 8005846:	bf18      	it	ne
 8005848:	2701      	movne	r7, #1
}
 800584a:	4638      	mov	r0, r7
 800584c:	b002      	add	sp, #8
 800584e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005852:	f891 2030 	ldrb.w	r2, [r1, #48]	@ 0x30
 8005856:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 8005858:	f8b4 306a 	ldrh.w	r3, [r4, #106]	@ 0x6a
 800585c:	3b01      	subs	r3, #1
 800585e:	b29b      	uxth	r3, r3
 8005860:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005864:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005866:	3301      	adds	r3, #1
 8005868:	6663      	str	r3, [r4, #100]	@ 0x64
          hspi->RxXferCount--;
 800586a:	e76e      	b.n	800574a <HAL_SPI_Receive+0xd2>
    __HAL_UNLOCK(hspi);
 800586c:	2300      	movs	r3, #0
}
 800586e:	4638      	mov	r0, r7
    __HAL_UNLOCK(hspi);
 8005870:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
}
 8005874:	b002      	add	sp, #8
 8005876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    while (hspi->RxXferCount > 0UL)
 800587a:	b983      	cbnz	r3, 800589e <HAL_SPI_Receive+0x226>
 800587c:	e7d7      	b.n	800582e <HAL_SPI_Receive+0x1b6>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800587e:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8005880:	f843 2b04 	str.w	r2, [r3], #4
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8005884:	6663      	str	r3, [r4, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8005886:	f8b4 306a 	ldrh.w	r3, [r4, #106]	@ 0x6a
 800588a:	3b02      	subs	r3, #2
 800588c:	b29b      	uxth	r3, r3
 800588e:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
    while (hspi->RxXferCount > 0UL)
 8005892:	f8b4 306a 	ldrh.w	r3, [r4, #106]	@ 0x6a
 8005896:	b29b      	uxth	r3, r3
 8005898:	2b00      	cmp	r3, #0
 800589a:	d0c8      	beq.n	800582e <HAL_SPI_Receive+0x1b6>
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800589c:	6821      	ldr	r1, [r4, #0]
 800589e:	694b      	ldr	r3, [r1, #20]
 80058a0:	f413 4860 	ands.w	r8, r3, #57344	@ 0xe000
 80058a4:	d011      	beq.n	80058ca <HAL_SPI_Receive+0x252>
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 80058a6:	694a      	ldr	r2, [r1, #20]
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80058a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 80058aa:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80058ae:	461a      	mov	r2, r3
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 80058b0:	d1e5      	bne.n	800587e <HAL_SPI_Receive+0x206>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80058b2:	f8b9 3030 	ldrh.w	r3, [r9, #48]	@ 0x30
 80058b6:	f822 3b02 	strh.w	r3, [r2], #2
          hspi->RxXferCount--;
 80058ba:	f8b4 306a 	ldrh.w	r3, [r4, #106]	@ 0x6a
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80058be:	6662      	str	r2, [r4, #100]	@ 0x64
          hspi->RxXferCount--;
 80058c0:	3b01      	subs	r3, #1
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
 80058c8:	e7e3      	b.n	8005892 <HAL_SPI_Receive+0x21a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058ca:	f7fc fdab 	bl	8002424 <HAL_GetTick>
 80058ce:	1b80      	subs	r0, r0, r6
 80058d0:	42a8      	cmp	r0, r5
 80058d2:	d3de      	bcc.n	8005892 <HAL_SPI_Receive+0x21a>
 80058d4:	1c6a      	adds	r2, r5, #1
 80058d6:	d0dc      	beq.n	8005892 <HAL_SPI_Receive+0x21a>
 80058d8:	e792      	b.n	8005800 <HAL_SPI_Receive+0x188>
 80058da:	bf00      	nop

080058dc <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058dc:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80058de:	4a1b      	ldr	r2, [pc, #108]	@ (800594c <TIM_OC1_SetConfig+0x70>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058e0:	f023 0301 	bic.w	r3, r3, #1
{
 80058e4:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058e6:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80058e8:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80058ea:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80058ec:	6985      	ldr	r5, [r0, #24]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80058ee:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80058f2:	402a      	ands	r2, r5
  tmpccmrx |= OC_Config->OCMode;
 80058f4:	680d      	ldr	r5, [r1, #0]
 80058f6:	432a      	orrs	r2, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80058f8:	688d      	ldr	r5, [r1, #8]
 80058fa:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80058fc:	4d14      	ldr	r5, [pc, #80]	@ (8005950 <TIM_OC1_SetConfig+0x74>)
 80058fe:	42a8      	cmp	r0, r5
 8005900:	d00e      	beq.n	8005920 <TIM_OC1_SetConfig+0x44>
 8005902:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005906:	42a8      	cmp	r0, r5
 8005908:	d00a      	beq.n	8005920 <TIM_OC1_SetConfig+0x44>
 800590a:	4e12      	ldr	r6, [pc, #72]	@ (8005954 <TIM_OC1_SetConfig+0x78>)
 800590c:	f505 4580 	add.w	r5, r5, #16384	@ 0x4000
 8005910:	42a8      	cmp	r0, r5
 8005912:	bf18      	it	ne
 8005914:	42b0      	cmpne	r0, r6
 8005916:	d003      	beq.n	8005920 <TIM_OC1_SetConfig+0x44>
 8005918:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800591c:	42a8      	cmp	r0, r5
 800591e:	d10d      	bne.n	800593c <TIM_OC1_SetConfig+0x60>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005920:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8005922:	f023 0308 	bic.w	r3, r3, #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005926:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    tmpccer |= OC_Config->OCNPolarity;
 800592a:	432b      	orrs	r3, r5
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800592c:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpccer &= ~TIM_CCER_CC1NE;
 8005930:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8005934:	ea46 0c05 	orr.w	ip, r6, r5
 8005938:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800593c:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800593e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005940:	6182      	str	r2, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8005942:	6341      	str	r1, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005944:	6203      	str	r3, [r0, #32]
}
 8005946:	bc70      	pop	{r4, r5, r6}
 8005948:	4770      	bx	lr
 800594a:	bf00      	nop
 800594c:	fffeff8c 	.word	0xfffeff8c
 8005950:	40010000 	.word	0x40010000
 8005954:	40014000 	.word	0x40014000

08005958 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005958:	6a03      	ldr	r3, [r0, #32]
 800595a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
{
 800595e:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005960:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005962:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005964:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005966:	69c2      	ldr	r2, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005968:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  tmpccmrx |= OC_Config->OCMode;
 800596c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800596e:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8005972:	432a      	orrs	r2, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005974:	688d      	ldr	r5, [r1, #8]
 8005976:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800597a:	4d14      	ldr	r5, [pc, #80]	@ (80059cc <TIM_OC3_SetConfig+0x74>)
 800597c:	42a8      	cmp	r0, r5
 800597e:	d00f      	beq.n	80059a0 <TIM_OC3_SetConfig+0x48>
 8005980:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005984:	42a8      	cmp	r0, r5
 8005986:	d00b      	beq.n	80059a0 <TIM_OC3_SetConfig+0x48>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005988:	4e11      	ldr	r6, [pc, #68]	@ (80059d0 <TIM_OC3_SetConfig+0x78>)
 800598a:	f505 4580 	add.w	r5, r5, #16384	@ 0x4000
 800598e:	42a8      	cmp	r0, r5
 8005990:	bf18      	it	ne
 8005992:	42b0      	cmpne	r0, r6
 8005994:	d00b      	beq.n	80059ae <TIM_OC3_SetConfig+0x56>
 8005996:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800599a:	42a8      	cmp	r0, r5
 800599c:	d10f      	bne.n	80059be <TIM_OC3_SetConfig+0x66>
 800599e:	e006      	b.n	80059ae <TIM_OC3_SetConfig+0x56>
    tmpccer &= ~TIM_CCER_CC3NP;
 80059a0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059a4:	68cd      	ldr	r5, [r1, #12]
 80059a6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80059aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80059ae:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80059b2:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
 80059b6:	ea46 0c05 	orr.w	ip, r6, r5
 80059ba:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80059be:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80059c0:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80059c2:	61c2      	str	r2, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80059c4:	63c1      	str	r1, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059c6:	6203      	str	r3, [r0, #32]
}
 80059c8:	bc70      	pop	{r4, r5, r6}
 80059ca:	4770      	bx	lr
 80059cc:	40010000 	.word	0x40010000
 80059d0:	40014000 	.word	0x40014000

080059d4 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80059d4:	2800      	cmp	r0, #0
 80059d6:	f000 8091 	beq.w	8005afc <HAL_TIM_PWM_Init+0x128>
{
 80059da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80059dc:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80059e0:	4604      	mov	r4, r0
 80059e2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	f000 8083 	beq.w	8005af2 <HAL_TIM_PWM_Init+0x11e>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059ec:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80059ee:	2302      	movs	r3, #2
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059f0:	4943      	ldr	r1, [pc, #268]	@ (8005b00 <HAL_TIM_PWM_Init+0x12c>)
 80059f2:	4844      	ldr	r0, [pc, #272]	@ (8005b04 <HAL_TIM_PWM_Init+0x130>)
 80059f4:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80059f8:	eba2 0101 	sub.w	r1, r2, r1
  htim->State = HAL_TIM_STATE_BUSY;
 80059fc:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a00:	eba2 0e00 	sub.w	lr, r2, r0
  tmpcr1 = TIMx->CR1;
 8005a04:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a06:	fab1 f181 	clz	r1, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a0a:	69a7      	ldr	r7, [r4, #24]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a0c:	fabe fe8e 	clz	lr, lr
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a10:	68e6      	ldr	r6, [r4, #12]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a12:	ea4f 1151 	mov.w	r1, r1, lsr #5
  TIMx->PSC = Structure->Prescaler;
 8005a16:	6865      	ldr	r5, [r4, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a18:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8005a1c:	d020      	beq.n	8005a60 <HAL_TIM_PWM_Init+0x8c>
 8005a1e:	b9f9      	cbnz	r1, 8005a60 <HAL_TIM_PWM_Init+0x8c>
 8005a20:	f8df c0f0 	ldr.w	ip, [pc, #240]	@ 8005b14 <HAL_TIM_PWM_Init+0x140>
 8005a24:	4562      	cmp	r2, ip
 8005a26:	d04b      	beq.n	8005ac0 <HAL_TIM_PWM_Init+0xec>
 8005a28:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8005a2c:	4562      	cmp	r2, ip
 8005a2e:	d047      	beq.n	8005ac0 <HAL_TIM_PWM_Init+0xec>
 8005a30:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8005a34:	4562      	cmp	r2, ip
 8005a36:	d013      	beq.n	8005a60 <HAL_TIM_PWM_Init+0x8c>
 8005a38:	f1be 0f00 	cmp.w	lr, #0
 8005a3c:	d110      	bne.n	8005a60 <HAL_TIM_PWM_Init+0x8c>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a3e:	4832      	ldr	r0, [pc, #200]	@ (8005b08 <HAL_TIM_PWM_Init+0x134>)
 8005a40:	4932      	ldr	r1, [pc, #200]	@ (8005b0c <HAL_TIM_PWM_Init+0x138>)
 8005a42:	428a      	cmp	r2, r1
 8005a44:	bf18      	it	ne
 8005a46:	4282      	cmpne	r2, r0
 8005a48:	d03e      	beq.n	8005ac8 <HAL_TIM_PWM_Init+0xf4>
 8005a4a:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005a4e:	428a      	cmp	r2, r1
 8005a50:	d03a      	beq.n	8005ac8 <HAL_TIM_PWM_Init+0xf4>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a56:	433b      	orrs	r3, r7
  TIMx->CR1 = tmpcr1;
 8005a58:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a5a:	62d6      	str	r6, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005a5c:	6295      	str	r5, [r2, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a5e:	e013      	b.n	8005a88 <HAL_TIM_PWM_Init+0xb4>
    tmpcr1 |= Structure->CounterMode;
 8005a60:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8005a66:	4303      	orrs	r3, r0
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a68:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a6e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a70:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a74:	433b      	orrs	r3, r7
  TIMx->CR1 = tmpcr1;
 8005a76:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a78:	62d6      	str	r6, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005a7a:	6295      	str	r5, [r2, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a7c:	b911      	cbnz	r1, 8005a84 <HAL_TIM_PWM_Init+0xb0>
 8005a7e:	f1be 0f00 	cmp.w	lr, #0
 8005a82:	d02b      	beq.n	8005adc <HAL_TIM_PWM_Init+0x108>
    TIMx->RCR = Structure->RepetitionCounter;
 8005a84:	6963      	ldr	r3, [r4, #20]
 8005a86:	6313      	str	r3, [r2, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 8005a88:	2301      	movs	r3, #1
  return HAL_OK;
 8005a8a:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 8005a8c:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a8e:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a92:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8005a96:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8005a9a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8005a9e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8005aa2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005aa6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aaa:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8005aae:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8005ab2:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8005ab6:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8005aba:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8005abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ac0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8005ac4:	68a1      	ldr	r1, [r4, #8]
 8005ac6:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ac8:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005aca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ace:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ad0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ad4:	433b      	orrs	r3, r7
  TIMx->CR1 = tmpcr1;
 8005ad6:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ad8:	62d6      	str	r6, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005ada:	6295      	str	r5, [r2, #40]	@ 0x28
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005adc:	490c      	ldr	r1, [pc, #48]	@ (8005b10 <HAL_TIM_PWM_Init+0x13c>)
 8005ade:	4b0a      	ldr	r3, [pc, #40]	@ (8005b08 <HAL_TIM_PWM_Init+0x134>)
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	bf18      	it	ne
 8005ae4:	428a      	cmpne	r2, r1
 8005ae6:	d0cd      	beq.n	8005a84 <HAL_TIM_PWM_Init+0xb0>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ae8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d0c9      	beq.n	8005a84 <HAL_TIM_PWM_Init+0xb0>
 8005af0:	e7ca      	b.n	8005a88 <HAL_TIM_PWM_Init+0xb4>
    htim->Lock = HAL_UNLOCKED;
 8005af2:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8005af6:	f001 f987 	bl	8006e08 <HAL_TIM_PWM_MspInit>
 8005afa:	e777      	b.n	80059ec <HAL_TIM_PWM_Init+0x18>
    return HAL_ERROR;
 8005afc:	2001      	movs	r0, #1
}
 8005afe:	4770      	bx	lr
 8005b00:	40010000 	.word	0x40010000
 8005b04:	40010400 	.word	0x40010400
 8005b08:	40014000 	.word	0x40014000
 8005b0c:	40014400 	.word	0x40014400
 8005b10:	40014800 	.word	0x40014800
 8005b14:	40000400 	.word	0x40000400

08005b18 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8005b18:	4770      	bx	lr
 8005b1a:	bf00      	nop

08005b1c <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop

08005b20 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8005b20:	4770      	bx	lr
 8005b22:	bf00      	nop

08005b24 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop

08005b28 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b28:	6803      	ldr	r3, [r0, #0]
 8005b2a:	691a      	ldr	r2, [r3, #16]
 8005b2c:	0791      	lsls	r1, r2, #30
{
 8005b2e:	b510      	push	{r4, lr}
 8005b30:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b32:	d502      	bpl.n	8005b3a <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b34:	68da      	ldr	r2, [r3, #12]
 8005b36:	0792      	lsls	r2, r2, #30
 8005b38:	d468      	bmi.n	8005c0c <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b3a:	691a      	ldr	r2, [r3, #16]
 8005b3c:	0752      	lsls	r2, r2, #29
 8005b3e:	d502      	bpl.n	8005b46 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b40:	68da      	ldr	r2, [r3, #12]
 8005b42:	0750      	lsls	r0, r2, #29
 8005b44:	d44f      	bmi.n	8005be6 <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b46:	691a      	ldr	r2, [r3, #16]
 8005b48:	0711      	lsls	r1, r2, #28
 8005b4a:	d502      	bpl.n	8005b52 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b4c:	68da      	ldr	r2, [r3, #12]
 8005b4e:	0712      	lsls	r2, r2, #28
 8005b50:	d437      	bmi.n	8005bc2 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b52:	691a      	ldr	r2, [r3, #16]
 8005b54:	06d0      	lsls	r0, r2, #27
 8005b56:	d502      	bpl.n	8005b5e <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b58:	68da      	ldr	r2, [r3, #12]
 8005b5a:	06d1      	lsls	r1, r2, #27
 8005b5c:	d41e      	bmi.n	8005b9c <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b5e:	691a      	ldr	r2, [r3, #16]
 8005b60:	07d2      	lsls	r2, r2, #31
 8005b62:	d502      	bpl.n	8005b6a <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b64:	68da      	ldr	r2, [r3, #12]
 8005b66:	07d0      	lsls	r0, r2, #31
 8005b68:	d469      	bmi.n	8005c3e <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b6a:	691a      	ldr	r2, [r3, #16]
 8005b6c:	0611      	lsls	r1, r2, #24
 8005b6e:	d502      	bpl.n	8005b76 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b70:	68da      	ldr	r2, [r3, #12]
 8005b72:	0612      	lsls	r2, r2, #24
 8005b74:	d46b      	bmi.n	8005c4e <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005b76:	691a      	ldr	r2, [r3, #16]
 8005b78:	05d0      	lsls	r0, r2, #23
 8005b7a:	d502      	bpl.n	8005b82 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b7c:	68da      	ldr	r2, [r3, #12]
 8005b7e:	0611      	lsls	r1, r2, #24
 8005b80:	d46d      	bmi.n	8005c5e <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b82:	691a      	ldr	r2, [r3, #16]
 8005b84:	0652      	lsls	r2, r2, #25
 8005b86:	d502      	bpl.n	8005b8e <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b88:	68da      	ldr	r2, [r3, #12]
 8005b8a:	0650      	lsls	r0, r2, #25
 8005b8c:	d46f      	bmi.n	8005c6e <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b8e:	691a      	ldr	r2, [r3, #16]
 8005b90:	0691      	lsls	r1, r2, #26
 8005b92:	d502      	bpl.n	8005b9a <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b94:	68da      	ldr	r2, [r3, #12]
 8005b96:	0692      	lsls	r2, r2, #26
 8005b98:	d449      	bmi.n	8005c2e <HAL_TIM_IRQHandler+0x106>
}
 8005b9a:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b9c:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ba0:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 8005ba2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ba4:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ba6:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ba8:	69db      	ldr	r3, [r3, #28]
 8005baa:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8005bae:	d16f      	bne.n	8005c90 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bb0:	f7ff ffb2 	bl	8005b18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bb4:	4620      	mov	r0, r4
 8005bb6:	f7ff ffb3 	bl	8005b20 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bba:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005bbc:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bbe:	7722      	strb	r2, [r4, #28]
 8005bc0:	e7cd      	b.n	8005b5e <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005bc2:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bc6:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8005bc8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005bca:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bcc:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005bce:	69db      	ldr	r3, [r3, #28]
 8005bd0:	079b      	lsls	r3, r3, #30
 8005bd2:	d15a      	bne.n	8005c8a <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bd4:	f7ff ffa0 	bl	8005b18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bd8:	4620      	mov	r0, r4
 8005bda:	f7ff ffa1 	bl	8005b20 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bde:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005be0:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005be2:	7722      	strb	r2, [r4, #28]
 8005be4:	e7b5      	b.n	8005b52 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005be6:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bea:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8005bec:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005bee:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bf0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005bf2:	699b      	ldr	r3, [r3, #24]
 8005bf4:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8005bf8:	d144      	bne.n	8005c84 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bfa:	f7ff ff8d 	bl	8005b18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bfe:	4620      	mov	r0, r4
 8005c00:	f7ff ff8e 	bl	8005b20 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c04:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c06:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c08:	7722      	strb	r2, [r4, #28]
 8005c0a:	e79c      	b.n	8005b46 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c0c:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c10:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c12:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c14:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c16:	699b      	ldr	r3, [r3, #24]
 8005c18:	0799      	lsls	r1, r3, #30
 8005c1a:	d130      	bne.n	8005c7e <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c1c:	f7ff ff7c 	bl	8005b18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c20:	4620      	mov	r0, r4
 8005c22:	f7ff ff7d 	bl	8005b20 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c26:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c28:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c2a:	7722      	strb	r2, [r4, #28]
 8005c2c:	e785      	b.n	8005b3a <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c2e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8005c32:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c34:	611a      	str	r2, [r3, #16]
}
 8005c36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8005c3a:	f000 baa3 	b.w	8006184 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c3e:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c42:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c44:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c46:	f7fb f8b1 	bl	8000dac <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c4a:	6823      	ldr	r3, [r4, #0]
 8005c4c:	e78d      	b.n	8005b6a <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c4e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
      HAL_TIMEx_BreakCallback(htim);
 8005c52:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c54:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005c56:	f000 fa97 	bl	8006188 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005c5a:	6823      	ldr	r3, [r4, #0]
 8005c5c:	e78b      	b.n	8005b76 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005c5e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
      HAL_TIMEx_Break2Callback(htim);
 8005c62:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005c64:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8005c66:	f000 fa91 	bl	800618c <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c6a:	6823      	ldr	r3, [r4, #0]
 8005c6c:	e789      	b.n	8005b82 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c6e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
      HAL_TIM_TriggerCallback(htim);
 8005c72:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c74:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005c76:	f7ff ff55 	bl	8005b24 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c7a:	6823      	ldr	r3, [r4, #0]
 8005c7c:	e787      	b.n	8005b8e <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 8005c7e:	f7ff ff4d 	bl	8005b1c <HAL_TIM_IC_CaptureCallback>
 8005c82:	e7d0      	b.n	8005c26 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 8005c84:	f7ff ff4a 	bl	8005b1c <HAL_TIM_IC_CaptureCallback>
 8005c88:	e7bc      	b.n	8005c04 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 8005c8a:	f7ff ff47 	bl	8005b1c <HAL_TIM_IC_CaptureCallback>
 8005c8e:	e7a6      	b.n	8005bde <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 8005c90:	f7ff ff44 	bl	8005b1c <HAL_TIM_IC_CaptureCallback>
 8005c94:	e791      	b.n	8005bba <HAL_TIM_IRQHandler+0x92>
 8005c96:	bf00      	nop

08005c98 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c98:	6a03      	ldr	r3, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c9a:	4a1d      	ldr	r2, [pc, #116]	@ (8005d10 <TIM_OC2_SetConfig+0x78>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c9c:	f023 0310 	bic.w	r3, r3, #16
{
 8005ca0:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ca2:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8005ca4:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8005ca6:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8005ca8:	6985      	ldr	r5, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8005caa:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005cae:	402a      	ands	r2, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cb0:	680d      	ldr	r5, [r1, #0]
 8005cb2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005cb6:	688d      	ldr	r5, [r1, #8]
 8005cb8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005cbc:	4d15      	ldr	r5, [pc, #84]	@ (8005d14 <TIM_OC2_SetConfig+0x7c>)
 8005cbe:	42a8      	cmp	r0, r5
 8005cc0:	d00f      	beq.n	8005ce2 <TIM_OC2_SetConfig+0x4a>
 8005cc2:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005cc6:	42a8      	cmp	r0, r5
 8005cc8:	d00b      	beq.n	8005ce2 <TIM_OC2_SetConfig+0x4a>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cca:	4e13      	ldr	r6, [pc, #76]	@ (8005d18 <TIM_OC2_SetConfig+0x80>)
 8005ccc:	f505 4580 	add.w	r5, r5, #16384	@ 0x4000
 8005cd0:	42a8      	cmp	r0, r5
 8005cd2:	bf18      	it	ne
 8005cd4:	42b0      	cmpne	r0, r6
 8005cd6:	d00b      	beq.n	8005cf0 <TIM_OC2_SetConfig+0x58>
 8005cd8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005cdc:	42a8      	cmp	r0, r5
 8005cde:	d10f      	bne.n	8005d00 <TIM_OC2_SetConfig+0x68>
 8005ce0:	e006      	b.n	8005cf0 <TIM_OC2_SetConfig+0x58>
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ce2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ce6:	68cd      	ldr	r5, [r1, #12]
 8005ce8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8005cec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005cf0:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005cf4:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
 8005cf8:	ea46 0c05 	orr.w	ip, r6, r5
 8005cfc:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8005d00:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005d02:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005d04:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8005d06:	6381      	str	r1, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8005d08:	6203      	str	r3, [r0, #32]
}
 8005d0a:	bc70      	pop	{r4, r5, r6}
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop
 8005d10:	feff8cff 	.word	0xfeff8cff
 8005d14:	40010000 	.word	0x40010000
 8005d18:	40014000 	.word	0x40014000

08005d1c <HAL_TIM_PWM_ConfigChannel>:
{
 8005d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8005d1e:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	f000 8119 	beq.w	8005f5a <HAL_TIM_PWM_ConfigChannel+0x23e>
 8005d28:	2301      	movs	r3, #1
 8005d2a:	4604      	mov	r4, r0
 8005d2c:	460d      	mov	r5, r1
 8005d2e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8005d32:	2a14      	cmp	r2, #20
 8005d34:	d851      	bhi.n	8005dda <HAL_TIM_PWM_ConfigChannel+0xbe>
 8005d36:	e8df f012 	tbh	[pc, r2, lsl #1]
 8005d3a:	0095      	.short	0x0095
 8005d3c:	00500050 	.word	0x00500050
 8005d40:	00a90050 	.word	0x00a90050
 8005d44:	00500050 	.word	0x00500050
 8005d48:	00be0050 	.word	0x00be0050
 8005d4c:	00500050 	.word	0x00500050
 8005d50:	00150050 	.word	0x00150050
 8005d54:	00500050 	.word	0x00500050
 8005d58:	00d20050 	.word	0x00d20050
 8005d5c:	00500050 	.word	0x00500050
 8005d60:	00550050 	.word	0x00550050
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d64:	6803      	ldr	r3, [r0, #0]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d66:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d68:	6a1a      	ldr	r2, [r3, #32]
 8005d6a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005d6e:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8005d70:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005d72:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8005d74:	69d9      	ldr	r1, [r3, #28]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d76:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d7a:	f421 41e6 	bic.w	r1, r1, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d7e:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d82:	68ae      	ldr	r6, [r5, #8]
 8005d84:	ea42 3206 	orr.w	r2, r2, r6, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d88:	4e75      	ldr	r6, [pc, #468]	@ (8005f60 <HAL_TIM_PWM_ConfigChannel+0x244>)
 8005d8a:	42b3      	cmp	r3, r6
 8005d8c:	d00e      	beq.n	8005dac <HAL_TIM_PWM_ConfigChannel+0x90>
 8005d8e:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8005d92:	42b3      	cmp	r3, r6
 8005d94:	d00a      	beq.n	8005dac <HAL_TIM_PWM_ConfigChannel+0x90>
 8005d96:	4f73      	ldr	r7, [pc, #460]	@ (8005f64 <HAL_TIM_PWM_ConfigChannel+0x248>)
 8005d98:	f506 4680 	add.w	r6, r6, #16384	@ 0x4000
 8005d9c:	42b3      	cmp	r3, r6
 8005d9e:	bf18      	it	ne
 8005da0:	42bb      	cmpne	r3, r7
 8005da2:	d003      	beq.n	8005dac <HAL_TIM_PWM_ConfigChannel+0x90>
 8005da4:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8005da8:	42b3      	cmp	r3, r6
 8005daa:	d104      	bne.n	8005db6 <HAL_TIM_PWM_ConfigChannel+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005dac:	f420 4080 	bic.w	r0, r0, #16384	@ 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005db0:	696e      	ldr	r6, [r5, #20]
 8005db2:	ea40 1086 	orr.w	r0, r0, r6, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005db6:	6058      	str	r0, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005db8:	6868      	ldr	r0, [r5, #4]
  TIMx->CCMR2 = tmpccmrx;
 8005dba:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005dbc:	6929      	ldr	r1, [r5, #16]
  TIMx->CCR4 = OC_Config->Pulse;
 8005dbe:	6418      	str	r0, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dc0:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005dc2:	69da      	ldr	r2, [r3, #28]
 8005dc4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005dc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005dca:	69da      	ldr	r2, [r3, #28]
 8005dcc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005dd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005dd2:	69da      	ldr	r2, [r3, #28]
 8005dd4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005dd8:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8005dda:	2300      	movs	r3, #0
  return HAL_OK;
 8005ddc:	4618      	mov	r0, r3
  __HAL_UNLOCK(htim);
 8005dde:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8005de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005de4:	6803      	ldr	r3, [r0, #0]
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005de6:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005de8:	6a1a      	ldr	r2, [r3, #32]
 8005dea:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8005dee:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8005df0:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005df2:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8005df4:	6d59      	ldr	r1, [r3, #84]	@ 0x54

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005df6:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005dfa:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005dfe:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005e02:	68ae      	ldr	r6, [r5, #8]
 8005e04:	ea42 5206 	orr.w	r2, r2, r6, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e08:	4e55      	ldr	r6, [pc, #340]	@ (8005f60 <HAL_TIM_PWM_ConfigChannel+0x244>)
 8005e0a:	42b3      	cmp	r3, r6
 8005e0c:	d00e      	beq.n	8005e2c <HAL_TIM_PWM_ConfigChannel+0x110>
 8005e0e:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8005e12:	42b3      	cmp	r3, r6
 8005e14:	d00a      	beq.n	8005e2c <HAL_TIM_PWM_ConfigChannel+0x110>
 8005e16:	4f53      	ldr	r7, [pc, #332]	@ (8005f64 <HAL_TIM_PWM_ConfigChannel+0x248>)
 8005e18:	f506 4680 	add.w	r6, r6, #16384	@ 0x4000
 8005e1c:	42b3      	cmp	r3, r6
 8005e1e:	bf18      	it	ne
 8005e20:	42bb      	cmpne	r3, r7
 8005e22:	d003      	beq.n	8005e2c <HAL_TIM_PWM_ConfigChannel+0x110>
 8005e24:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8005e28:	42b3      	cmp	r3, r6
 8005e2a:	d104      	bne.n	8005e36 <HAL_TIM_PWM_ConfigChannel+0x11a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005e2c:	f420 3000 	bic.w	r0, r0, #131072	@ 0x20000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005e30:	696e      	ldr	r6, [r5, #20]
 8005e32:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e36:	6058      	str	r0, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005e38:	6868      	ldr	r0, [r5, #4]
  TIMx->CCMR3 = tmpccmrx;
 8005e3a:	6559      	str	r1, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005e3c:	6929      	ldr	r1, [r5, #16]
  TIMx->CCR6 = OC_Config->Pulse;
 8005e3e:	65d8      	str	r0, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e40:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005e42:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005e44:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e48:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005e4a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005e4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e50:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005e52:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005e54:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005e58:	655a      	str	r2, [r3, #84]	@ 0x54
  __HAL_UNLOCK(htim);
 8005e5a:	2300      	movs	r3, #0
  return HAL_OK;
 8005e5c:	4618      	mov	r0, r3
  __HAL_UNLOCK(htim);
 8005e5e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  return HAL_OK;
 8005e62:	e7be      	b.n	8005de2 <HAL_TIM_PWM_ConfigChannel+0xc6>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e64:	6800      	ldr	r0, [r0, #0]
 8005e66:	f7ff fd39 	bl	80058dc <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e6a:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e6c:	6983      	ldr	r3, [r0, #24]
 8005e6e:	f043 0308 	orr.w	r3, r3, #8
 8005e72:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e74:	6983      	ldr	r3, [r0, #24]
 8005e76:	f023 0304 	bic.w	r3, r3, #4
 8005e7a:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e7c:	6983      	ldr	r3, [r0, #24]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	6183      	str	r3, [r0, #24]
  __HAL_UNLOCK(htim);
 8005e82:	2300      	movs	r3, #0
  return HAL_OK;
 8005e84:	4618      	mov	r0, r3
  __HAL_UNLOCK(htim);
 8005e86:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  return HAL_OK;
 8005e8a:	e7aa      	b.n	8005de2 <HAL_TIM_PWM_ConfigChannel+0xc6>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e8c:	6800      	ldr	r0, [r0, #0]
 8005e8e:	f7ff ff03 	bl	8005c98 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e92:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e94:	6983      	ldr	r3, [r0, #24]
 8005e96:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005e9a:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e9c:	6983      	ldr	r3, [r0, #24]
 8005e9e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005ea2:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ea4:	6983      	ldr	r3, [r0, #24]
 8005ea6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005eaa:	6183      	str	r3, [r0, #24]
  __HAL_UNLOCK(htim);
 8005eac:	2300      	movs	r3, #0
  return HAL_OK;
 8005eae:	4618      	mov	r0, r3
  __HAL_UNLOCK(htim);
 8005eb0:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  return HAL_OK;
 8005eb4:	e795      	b.n	8005de2 <HAL_TIM_PWM_ConfigChannel+0xc6>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005eb6:	6800      	ldr	r0, [r0, #0]
 8005eb8:	f7ff fd4e 	bl	8005958 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ebc:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ebe:	69c3      	ldr	r3, [r0, #28]
 8005ec0:	f043 0308 	orr.w	r3, r3, #8
 8005ec4:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ec6:	69c3      	ldr	r3, [r0, #28]
 8005ec8:	f023 0304 	bic.w	r3, r3, #4
 8005ecc:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ece:	69c3      	ldr	r3, [r0, #28]
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	61c3      	str	r3, [r0, #28]
  __HAL_UNLOCK(htim);
 8005ed4:	2300      	movs	r3, #0
  return HAL_OK;
 8005ed6:	4618      	mov	r0, r3
  __HAL_UNLOCK(htim);
 8005ed8:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  return HAL_OK;
 8005edc:	e781      	b.n	8005de2 <HAL_TIM_PWM_ConfigChannel+0xc6>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005ede:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8005ee0:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005ee2:	6a1a      	ldr	r2, [r3, #32]
 8005ee4:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005ee8:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8005eea:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005eec:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8005eee:	6d59      	ldr	r1, [r3, #84]	@ 0x54
  tmpccer &= ~TIM_CCER_CC5P;
 8005ef0:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005ef4:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpccmrx |= OC_Config->OCMode;
 8005ef8:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005efa:	68ae      	ldr	r6, [r5, #8]
 8005efc:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f00:	4e17      	ldr	r6, [pc, #92]	@ (8005f60 <HAL_TIM_PWM_ConfigChannel+0x244>)
 8005f02:	42b3      	cmp	r3, r6
 8005f04:	d00e      	beq.n	8005f24 <HAL_TIM_PWM_ConfigChannel+0x208>
 8005f06:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8005f0a:	42b3      	cmp	r3, r6
 8005f0c:	d00a      	beq.n	8005f24 <HAL_TIM_PWM_ConfigChannel+0x208>
 8005f0e:	4f15      	ldr	r7, [pc, #84]	@ (8005f64 <HAL_TIM_PWM_ConfigChannel+0x248>)
 8005f10:	f506 4680 	add.w	r6, r6, #16384	@ 0x4000
 8005f14:	42b3      	cmp	r3, r6
 8005f16:	bf18      	it	ne
 8005f18:	42bb      	cmpne	r3, r7
 8005f1a:	d003      	beq.n	8005f24 <HAL_TIM_PWM_ConfigChannel+0x208>
 8005f1c:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8005f20:	42b3      	cmp	r3, r6
 8005f22:	d104      	bne.n	8005f2e <HAL_TIM_PWM_ConfigChannel+0x212>
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005f24:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005f28:	696e      	ldr	r6, [r5, #20]
 8005f2a:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CR2 = tmpcr2;
 8005f2e:	6058      	str	r0, [r3, #4]
  TIMx->CCR5 = OC_Config->Pulse;
 8005f30:	6868      	ldr	r0, [r5, #4]
  TIMx->CCMR3 = tmpccmrx;
 8005f32:	6559      	str	r1, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005f34:	6929      	ldr	r1, [r5, #16]
  TIMx->CCR5 = OC_Config->Pulse;
 8005f36:	6598      	str	r0, [r3, #88]	@ 0x58
  TIMx->CCER = tmpccer;
 8005f38:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005f3a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005f3c:	f042 0208 	orr.w	r2, r2, #8
 8005f40:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005f42:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005f44:	f022 0204 	bic.w	r2, r2, #4
 8005f48:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005f4a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005f4c:	430a      	orrs	r2, r1
 8005f4e:	655a      	str	r2, [r3, #84]	@ 0x54
  __HAL_UNLOCK(htim);
 8005f50:	2300      	movs	r3, #0
  return HAL_OK;
 8005f52:	4618      	mov	r0, r3
  __HAL_UNLOCK(htim);
 8005f54:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  return HAL_OK;
 8005f58:	e743      	b.n	8005de2 <HAL_TIM_PWM_ConfigChannel+0xc6>
  __HAL_LOCK(htim);
 8005f5a:	2002      	movs	r0, #2
}
 8005f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	40010000 	.word	0x40010000
 8005f64:	40014000 	.word	0x40014000

08005f68 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 8005f68:	2900      	cmp	r1, #0
 8005f6a:	d149      	bne.n	8006000 <HAL_TIMEx_PWMN_Start+0x98>
 8005f6c:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d151      	bne.n	8006018 <HAL_TIMEx_PWMN_Start+0xb0>
 8005f74:	2302      	movs	r3, #2
 8005f76:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8005f7a:	6803      	ldr	r3, [r0, #0]
 8005f7c:	f001 011f 	and.w	r1, r1, #31
 8005f80:	4a2e      	ldr	r2, [pc, #184]	@ (800603c <HAL_TIMEx_PWMN_Start+0xd4>)
 8005f82:	2004      	movs	r0, #4
 8005f84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f88:	bf18      	it	ne
 8005f8a:	4293      	cmpne	r3, r2
 8005f8c:	fa00 f101 	lsl.w	r1, r0, r1
 8005f90:	482b      	ldr	r0, [pc, #172]	@ (8006040 <HAL_TIMEx_PWMN_Start+0xd8>)
 8005f92:	bf0c      	ite	eq
 8005f94:	2201      	moveq	r2, #1
 8005f96:	2200      	movne	r2, #0
 8005f98:	b430      	push	{r4, r5}
 8005f9a:	6a1c      	ldr	r4, [r3, #32]
 8005f9c:	4d29      	ldr	r5, [pc, #164]	@ (8006044 <HAL_TIMEx_PWMN_Start+0xdc>)
 8005f9e:	ea24 0401 	bic.w	r4, r4, r1
 8005fa2:	42ab      	cmp	r3, r5
 8005fa4:	bf08      	it	eq
 8005fa6:	f042 0201 	orreq.w	r2, r2, #1
 8005faa:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8005fae:	621c      	str	r4, [r3, #32]
 8005fb0:	6a1c      	ldr	r4, [r3, #32]
 8005fb2:	42ab      	cmp	r3, r5
 8005fb4:	bf08      	it	eq
 8005fb6:	f042 0201 	orreq.w	r2, r2, #1
 8005fba:	4321      	orrs	r1, r4
 8005fbc:	4283      	cmp	r3, r0
 8005fbe:	bf08      	it	eq
 8005fc0:	f042 0201 	orreq.w	r2, r2, #1
 8005fc4:	f500 4078 	add.w	r0, r0, #63488	@ 0xf800
 8005fc8:	6219      	str	r1, [r3, #32]
 8005fca:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8005fcc:	4283      	cmp	r3, r0
 8005fce:	bf08      	it	eq
 8005fd0:	f042 0201 	orreq.w	r2, r2, #1
 8005fd4:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8005fd8:	6459      	str	r1, [r3, #68]	@ 0x44
 8005fda:	b912      	cbnz	r2, 8005fe2 <HAL_TIMEx_PWMN_Start+0x7a>
 8005fdc:	4a1a      	ldr	r2, [pc, #104]	@ (8006048 <HAL_TIMEx_PWMN_Start+0xe0>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d107      	bne.n	8005ff2 <HAL_TIMEx_PWMN_Start+0x8a>
 8005fe2:	6899      	ldr	r1, [r3, #8]
 8005fe4:	4a19      	ldr	r2, [pc, #100]	@ (800604c <HAL_TIMEx_PWMN_Start+0xe4>)
 8005fe6:	400a      	ands	r2, r1
 8005fe8:	2a06      	cmp	r2, #6
 8005fea:	d006      	beq.n	8005ffa <HAL_TIMEx_PWMN_Start+0x92>
 8005fec:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8005ff0:	d003      	beq.n	8005ffa <HAL_TIMEx_PWMN_Start+0x92>
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	f042 0201 	orr.w	r2, r2, #1
 8005ff8:	601a      	str	r2, [r3, #0]
 8005ffa:	2000      	movs	r0, #0
 8005ffc:	bc30      	pop	{r4, r5}
 8005ffe:	4770      	bx	lr
 8006000:	2904      	cmp	r1, #4
 8006002:	d00b      	beq.n	800601c <HAL_TIMEx_PWMN_Start+0xb4>
 8006004:	2908      	cmp	r1, #8
 8006006:	d011      	beq.n	800602c <HAL_TIMEx_PWMN_Start+0xc4>
 8006008:	f890 3047 	ldrb.w	r3, [r0, #71]	@ 0x47
 800600c:	2b01      	cmp	r3, #1
 800600e:	d103      	bne.n	8006018 <HAL_TIMEx_PWMN_Start+0xb0>
 8006010:	2302      	movs	r3, #2
 8006012:	f880 3047 	strb.w	r3, [r0, #71]	@ 0x47
 8006016:	e7b0      	b.n	8005f7a <HAL_TIMEx_PWMN_Start+0x12>
 8006018:	2001      	movs	r0, #1
 800601a:	4770      	bx	lr
 800601c:	f890 3045 	ldrb.w	r3, [r0, #69]	@ 0x45
 8006020:	2b01      	cmp	r3, #1
 8006022:	d1f9      	bne.n	8006018 <HAL_TIMEx_PWMN_Start+0xb0>
 8006024:	2302      	movs	r3, #2
 8006026:	f880 3045 	strb.w	r3, [r0, #69]	@ 0x45
 800602a:	e7a6      	b.n	8005f7a <HAL_TIMEx_PWMN_Start+0x12>
 800602c:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 8006030:	2b01      	cmp	r3, #1
 8006032:	d1f1      	bne.n	8006018 <HAL_TIMEx_PWMN_Start+0xb0>
 8006034:	2302      	movs	r3, #2
 8006036:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
 800603a:	e79e      	b.n	8005f7a <HAL_TIMEx_PWMN_Start+0x12>
 800603c:	40010000 	.word	0x40010000
 8006040:	40000c00 	.word	0x40000c00
 8006044:	40000400 	.word	0x40000400
 8006048:	40001800 	.word	0x40001800
 800604c:	00010007 	.word	0x00010007

08006050 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006050:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8006054:	2b01      	cmp	r3, #1
 8006056:	d045      	beq.n	80060e4 <HAL_TIMEx_MasterConfigSynchronization+0x94>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006058:	6803      	ldr	r3, [r0, #0]
 800605a:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800605c:	2002      	movs	r0, #2
{
 800605e:	b430      	push	{r4, r5}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006060:	4d21      	ldr	r5, [pc, #132]	@ (80060e8 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
  htim->State = HAL_TIM_STATE_BUSY;
 8006062:	f882 003d 	strb.w	r0, [r2, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006066:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 8006068:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800606a:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800606c:	d023      	beq.n	80060b6 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 800606e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006072:	42ab      	cmp	r3, r5
 8006074:	d01f      	beq.n	80060b6 <HAL_TIMEx_MasterConfigSynchronization+0x66>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006076:	4d1d      	ldr	r5, [pc, #116]	@ (80060ec <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8006078:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800607c:	42ab      	cmp	r3, r5
 800607e:	bf18      	it	ne
 8006080:	f1b3 4f80 	cmpne.w	r3, #1073741824	@ 0x40000000
 8006084:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006088:	bf0c      	ite	eq
 800608a:	f04f 0c01 	moveq.w	ip, #1
 800608e:	f04f 0c00 	movne.w	ip, #0
 8006092:	42ab      	cmp	r3, r5
 8006094:	bf08      	it	eq
 8006096:	f04c 0c01 	orreq.w	ip, ip, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800609a:	680d      	ldr	r5, [r1, #0]
 800609c:	4328      	orrs	r0, r5
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800609e:	4d14      	ldr	r5, [pc, #80]	@ (80060f0 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
  htim->Instance->CR2 = tmpcr2;
 80060a0:	6058      	str	r0, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060a2:	42ab      	cmp	r3, r5
 80060a4:	bf14      	ite	ne
 80060a6:	4660      	movne	r0, ip
 80060a8:	f04c 0001 	orreq.w	r0, ip, #1
 80060ac:	b960      	cbnz	r0, 80060c8 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 80060ae:	4811      	ldr	r0, [pc, #68]	@ (80060f4 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 80060b0:	4283      	cmp	r3, r0
 80060b2:	d009      	beq.n	80060c8 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 80060b4:	e00d      	b.n	80060d2 <HAL_TIMEx_MasterConfigSynchronization+0x82>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80060b6:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80060b8:	f420 0070 	bic.w	r0, r0, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80060bc:	4328      	orrs	r0, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060be:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80060c0:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060c4:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 80060c6:	6058      	str	r0, [r3, #4]
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060c8:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060ca:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060ce:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060d0:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80060d2:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80060d4:	2101      	movs	r1, #1

  return HAL_OK;
 80060d6:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 80060d8:	f882 103d 	strb.w	r1, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80060dc:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
}
 80060e0:	bc30      	pop	{r4, r5}
 80060e2:	4770      	bx	lr
  __HAL_LOCK(htim);
 80060e4:	2002      	movs	r0, #2
}
 80060e6:	4770      	bx	lr
 80060e8:	40010000 	.word	0x40010000
 80060ec:	40000400 	.word	0x40000400
 80060f0:	40000c00 	.word	0x40000c00
 80060f4:	40001800 	.word	0x40001800

080060f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80060f8:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d03d      	beq.n	800617c <HAL_TIMEx_ConfigBreakDeadTime+0x84>
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006100:	4602      	mov	r2, r0
 8006102:	6848      	ldr	r0, [r1, #4]
{
 8006104:	b410      	push	{r4}
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006106:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 800610a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800610e:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006110:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006112:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006116:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006118:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800611a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800611e:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006120:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006122:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006126:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006128:	6a88      	ldr	r0, [r1, #40]	@ 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800612a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800612e:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006130:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006132:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006136:	4303      	orrs	r3, r0

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006138:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800613a:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 800613e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006142:	4c0f      	ldr	r4, [pc, #60]	@ (8006180 <HAL_TIMEx_ConfigBreakDeadTime+0x88>)
 8006144:	42a0      	cmp	r0, r4
 8006146:	d00b      	beq.n	8006160 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
 8006148:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800614c:	42a0      	cmp	r0, r4
 800614e:	d007      	beq.n	8006160 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8006150:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8006152:	6443      	str	r3, [r0, #68]	@ 0x44
  __HAL_UNLOCK(htim);
 8006154:	f882 103c 	strb.w	r1, [r2, #60]	@ 0x3c

  return HAL_OK;
 8006158:	4608      	mov	r0, r1
}
 800615a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800615e:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006160:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
 8006162:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006166:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800616a:	e9d1 4107 	ldrd	r4, r1, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800616e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006172:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006174:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006178:	430b      	orrs	r3, r1
 800617a:	e7e9      	b.n	8006150 <HAL_TIMEx_ConfigBreakDeadTime+0x58>
  __HAL_LOCK(htim);
 800617c:	2002      	movs	r0, #2
}
 800617e:	4770      	bx	lr
 8006180:	40010000 	.word	0x40010000

08006184 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8006184:	4770      	bx	lr
 8006186:	bf00      	nop

08006188 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8006188:	4770      	bx	lr
 800618a:	bf00      	nop

0800618c <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop

08006190 <HAL_UART_MspInit>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8006190:	4770      	bx	lr
 8006192:	bf00      	nop

08006194 <UART_SetConfig>:
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006194:	6901      	ldr	r1, [r0, #16]
 8006196:	6882      	ldr	r2, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006198:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800619a:	430a      	orrs	r2, r1
{
 800619c:	b570      	push	{r4, r5, r6, lr}
 800619e:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80061a0:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80061a2:	69c0      	ldr	r0, [r0, #28]
{
 80061a4:	b086      	sub	sp, #24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80061a6:	6961      	ldr	r1, [r4, #20]
 80061a8:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80061aa:	49a1      	ldr	r1, [pc, #644]	@ (8006430 <UART_SetConfig+0x29c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80061ac:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80061ae:	4029      	ands	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80061b0:	6a65      	ldr	r5, [r4, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80061b2:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061b4:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80061b6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061b8:	685a      	ldr	r2, [r3, #4]
 80061ba:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80061be:	430a      	orrs	r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80061c0:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061c2:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80061c4:	4a9b      	ldr	r2, [pc, #620]	@ (8006434 <UART_SetConfig+0x2a0>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	f000 811b 	beq.w	8006402 <UART_SetConfig+0x26e>
    tmpreg |= huart->Init.OneBitSampling;
 80061cc:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80061ce:	689e      	ldr	r6, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 80061d0:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80061d2:	4a99      	ldr	r2, [pc, #612]	@ (8006438 <UART_SetConfig+0x2a4>)
 80061d4:	4032      	ands	r2, r6
 80061d6:	4311      	orrs	r1, r2
 80061d8:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80061da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061dc:	f022 020f 	bic.w	r2, r2, #15
 80061e0:	432a      	orrs	r2, r5
 80061e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80061e4:	4a95      	ldr	r2, [pc, #596]	@ (800643c <UART_SetConfig+0x2a8>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d028      	beq.n	800623c <UART_SetConfig+0xa8>
 80061ea:	4a95      	ldr	r2, [pc, #596]	@ (8006440 <UART_SetConfig+0x2ac>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d01a      	beq.n	8006226 <UART_SetConfig+0x92>
 80061f0:	4a94      	ldr	r2, [pc, #592]	@ (8006444 <UART_SetConfig+0x2b0>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d017      	beq.n	8006226 <UART_SetConfig+0x92>
 80061f6:	4a94      	ldr	r2, [pc, #592]	@ (8006448 <UART_SetConfig+0x2b4>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d014      	beq.n	8006226 <UART_SetConfig+0x92>
 80061fc:	4a93      	ldr	r2, [pc, #588]	@ (800644c <UART_SetConfig+0x2b8>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d011      	beq.n	8006226 <UART_SetConfig+0x92>
 8006202:	4a93      	ldr	r2, [pc, #588]	@ (8006450 <UART_SetConfig+0x2bc>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d019      	beq.n	800623c <UART_SetConfig+0xa8>
 8006208:	4a92      	ldr	r2, [pc, #584]	@ (8006454 <UART_SetConfig+0x2c0>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d00b      	beq.n	8006226 <UART_SetConfig+0x92>
 800620e:	4a92      	ldr	r2, [pc, #584]	@ (8006458 <UART_SetConfig+0x2c4>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d008      	beq.n	8006226 <UART_SetConfig+0x92>

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
      {
        ret = HAL_ERROR;
 8006214:	2001      	movs	r0, #1
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006216:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8006218:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
  huart->RxISR = NULL;
 800621c:	6723      	str	r3, [r4, #112]	@ 0x70
  huart->NbRxDataToProcess = 1;
 800621e:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 8006220:	6763      	str	r3, [r4, #116]	@ 0x74

  return ret;
}
 8006222:	b006      	add	sp, #24
 8006224:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006226:	4b8d      	ldr	r3, [pc, #564]	@ (800645c <UART_SetConfig+0x2c8>)
 8006228:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800622a:	f003 0307 	and.w	r3, r3, #7
 800622e:	2b05      	cmp	r3, #5
 8006230:	d8f0      	bhi.n	8006214 <UART_SetConfig+0x80>
 8006232:	e8df f003 	tbb	[pc, r3]
 8006236:	7f9f      	.short	0x7f9f
 8006238:	795f928a 	.word	0x795f928a
 800623c:	4b87      	ldr	r3, [pc, #540]	@ (800645c <UART_SetConfig+0x2c8>)
 800623e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006240:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006244:	2b28      	cmp	r3, #40	@ 0x28
 8006246:	d8e5      	bhi.n	8006214 <UART_SetConfig+0x80>
 8006248:	a201      	add	r2, pc, #4	@ (adr r2, 8006250 <UART_SetConfig+0xbc>)
 800624a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800624e:	bf00      	nop
 8006250:	080063d1 	.word	0x080063d1
 8006254:	08006215 	.word	0x08006215
 8006258:	08006215 	.word	0x08006215
 800625c:	08006215 	.word	0x08006215
 8006260:	08006215 	.word	0x08006215
 8006264:	08006215 	.word	0x08006215
 8006268:	08006215 	.word	0x08006215
 800626c:	08006215 	.word	0x08006215
 8006270:	08006335 	.word	0x08006335
 8006274:	08006215 	.word	0x08006215
 8006278:	08006215 	.word	0x08006215
 800627c:	08006215 	.word	0x08006215
 8006280:	08006215 	.word	0x08006215
 8006284:	08006215 	.word	0x08006215
 8006288:	08006215 	.word	0x08006215
 800628c:	08006215 	.word	0x08006215
 8006290:	0800634b 	.word	0x0800634b
 8006294:	08006215 	.word	0x08006215
 8006298:	08006215 	.word	0x08006215
 800629c:	08006215 	.word	0x08006215
 80062a0:	08006215 	.word	0x08006215
 80062a4:	08006215 	.word	0x08006215
 80062a8:	08006215 	.word	0x08006215
 80062ac:	08006215 	.word	0x08006215
 80062b0:	0800635b 	.word	0x0800635b
 80062b4:	08006215 	.word	0x08006215
 80062b8:	08006215 	.word	0x08006215
 80062bc:	08006215 	.word	0x08006215
 80062c0:	08006215 	.word	0x08006215
 80062c4:	08006215 	.word	0x08006215
 80062c8:	08006215 	.word	0x08006215
 80062cc:	08006215 	.word	0x08006215
 80062d0:	080062f5 	.word	0x080062f5
 80062d4:	08006215 	.word	0x08006215
 80062d8:	08006215 	.word	0x08006215
 80062dc:	08006215 	.word	0x08006215
 80062e0:	08006215 	.word	0x08006215
 80062e4:	08006215 	.word	0x08006215
 80062e8:	08006215 	.word	0x08006215
 80062ec:	08006215 	.word	0x08006215
 80062f0:	08006329 	.word	0x08006329
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062f4:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
        pclk = (uint32_t) CSI_VALUE;
 80062f8:	4859      	ldr	r0, [pc, #356]	@ (8006460 <UART_SetConfig+0x2cc>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062fa:	d048      	beq.n	800638e <UART_SetConfig+0x1fa>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062fc:	4a59      	ldr	r2, [pc, #356]	@ (8006464 <UART_SetConfig+0x2d0>)
 80062fe:	6863      	ldr	r3, [r4, #4]
 8006300:	f832 1015 	ldrh.w	r1, [r2, r5, lsl #1]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006304:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006308:	fbb0 f0f1 	udiv	r0, r0, r1
 800630c:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8006310:	fbb0 f0f3 	udiv	r0, r0, r3
 8006314:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006316:	f1a0 0310 	sub.w	r3, r0, #16
 800631a:	4293      	cmp	r3, r2
 800631c:	f63f af7a 	bhi.w	8006214 <UART_SetConfig+0x80>
          huart->Instance->BRR = usartdiv;
 8006320:	6823      	ldr	r3, [r4, #0]
 8006322:	60d8      	str	r0, [r3, #12]
          pclk = (uint32_t) HSI_VALUE;
 8006324:	2000      	movs	r0, #0
 8006326:	e776      	b.n	8006216 <UART_SetConfig+0x82>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006328:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800632c:	d02f      	beq.n	800638e <UART_SetConfig+0x1fa>
        pclk = (uint32_t) LSE_VALUE;
 800632e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8006332:	e7e3      	b.n	80062fc <UART_SetConfig+0x168>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006334:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8006338:	d022      	beq.n	8006380 <UART_SetConfig+0x1ec>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800633a:	4668      	mov	r0, sp
 800633c:	f7fe fc66 	bl	8004c0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006340:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 8006342:	2800      	cmp	r0, #0
 8006344:	d0ee      	beq.n	8006324 <UART_SetConfig+0x190>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006346:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8006348:	e7d8      	b.n	80062fc <UART_SetConfig+0x168>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800634a:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800634e:	d050      	beq.n	80063f2 <UART_SetConfig+0x25e>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006350:	a803      	add	r0, sp, #12
 8006352:	f7fe fcf5 	bl	8004d40 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006356:	9804      	ldr	r0, [sp, #16]
        break;
 8006358:	e7f3      	b.n	8006342 <UART_SetConfig+0x1ae>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800635a:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800635e:	d03d      	beq.n	80063dc <UART_SetConfig+0x248>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006360:	4b3e      	ldr	r3, [pc, #248]	@ (800645c <UART_SetConfig+0x2c8>)
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	0691      	lsls	r1, r2, #26
 8006366:	d52e      	bpl.n	80063c6 <UART_SetConfig+0x232>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	483f      	ldr	r0, [pc, #252]	@ (8006468 <UART_SetConfig+0x2d4>)
 800636c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006370:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 8006372:	e7c3      	b.n	80062fc <UART_SetConfig+0x168>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006374:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8006378:	d027      	beq.n	80063ca <UART_SetConfig+0x236>
        pclk = HAL_RCC_GetPCLK1Freq();
 800637a:	f7fd fc57 	bl	8003c2c <HAL_RCC_GetPCLK1Freq>
        break;
 800637e:	e7e0      	b.n	8006342 <UART_SetConfig+0x1ae>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006380:	4668      	mov	r0, sp
 8006382:	f7fe fc43 	bl	8004c0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006386:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 8006388:	2800      	cmp	r0, #0
 800638a:	d0cb      	beq.n	8006324 <UART_SetConfig+0x190>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800638c:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800638e:	4b35      	ldr	r3, [pc, #212]	@ (8006464 <UART_SetConfig+0x2d0>)
 8006390:	6862      	ldr	r2, [r4, #4]
 8006392:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 8006396:	0853      	lsrs	r3, r2, #1
 8006398:	fbb0 f0f1 	udiv	r0, r0, r1
 800639c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063a0:	f64f 71ef 	movw	r1, #65519	@ 0xffef
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80063a8:	b29a      	uxth	r2, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063aa:	f1a2 0010 	sub.w	r0, r2, #16
 80063ae:	4288      	cmp	r0, r1
 80063b0:	f63f af30 	bhi.w	8006214 <UART_SetConfig+0x80>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80063b4:	f023 030f 	bic.w	r3, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80063b8:	f3c2 0242 	ubfx	r2, r2, #1, #3
        huart->Instance->BRR = brrtemp;
 80063bc:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80063be:	b29b      	uxth	r3, r3
        huart->Instance->BRR = brrtemp;
 80063c0:	4313      	orrs	r3, r2
 80063c2:	60cb      	str	r3, [r1, #12]
 80063c4:	e7ae      	b.n	8006324 <UART_SetConfig+0x190>
          pclk = (uint32_t) HSI_VALUE;
 80063c6:	4828      	ldr	r0, [pc, #160]	@ (8006468 <UART_SetConfig+0x2d4>)
 80063c8:	e798      	b.n	80062fc <UART_SetConfig+0x168>
        pclk = HAL_RCC_GetPCLK1Freq();
 80063ca:	f7fd fc2f 	bl	8003c2c <HAL_RCC_GetPCLK1Freq>
        break;
 80063ce:	e7db      	b.n	8006388 <UART_SetConfig+0x1f4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063d0:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80063d4:	d012      	beq.n	80063fc <UART_SetConfig+0x268>
        pclk = HAL_RCC_GetPCLK2Freq();
 80063d6:	f7fd fc71 	bl	8003cbc <HAL_RCC_GetPCLK2Freq>
        break;
 80063da:	e7b2      	b.n	8006342 <UART_SetConfig+0x1ae>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063dc:	4b1f      	ldr	r3, [pc, #124]	@ (800645c <UART_SetConfig+0x2c8>)
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	0690      	lsls	r0, r2, #26
 80063e2:	f140 808b 	bpl.w	80064fc <UART_SetConfig+0x368>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	481f      	ldr	r0, [pc, #124]	@ (8006468 <UART_SetConfig+0x2d4>)
 80063ea:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80063ee:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 80063f0:	e7cd      	b.n	800638e <UART_SetConfig+0x1fa>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063f2:	a803      	add	r0, sp, #12
 80063f4:	f7fe fca4 	bl	8004d40 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80063f8:	9804      	ldr	r0, [sp, #16]
        break;
 80063fa:	e7c5      	b.n	8006388 <UART_SetConfig+0x1f4>
        pclk = HAL_RCC_GetPCLK2Freq();
 80063fc:	f7fd fc5e 	bl	8003cbc <HAL_RCC_GetPCLK2Freq>
        break;
 8006400:	e7c2      	b.n	8006388 <UART_SetConfig+0x1f4>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006402:	6898      	ldr	r0, [r3, #8]
 8006404:	4a0c      	ldr	r2, [pc, #48]	@ (8006438 <UART_SetConfig+0x2a4>)
 8006406:	4002      	ands	r2, r0
 8006408:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 800640a:	4914      	ldr	r1, [pc, #80]	@ (800645c <UART_SetConfig+0x2c8>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800640c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800640e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006410:	f022 020f 	bic.w	r2, r2, #15
 8006414:	432a      	orrs	r2, r5
 8006416:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006418:	6d8b      	ldr	r3, [r1, #88]	@ 0x58
 800641a:	f003 0307 	and.w	r3, r3, #7
 800641e:	2b05      	cmp	r3, #5
 8006420:	f63f aef8 	bhi.w	8006214 <UART_SetConfig+0x80>
 8006424:	e8df f003 	tbb	[pc, r3]
 8006428:	224e575c 	.word	0x224e575c
 800642c:	5f62      	.short	0x5f62
 800642e:	bf00      	nop
 8006430:	cfff69f3 	.word	0xcfff69f3
 8006434:	58000c00 	.word	0x58000c00
 8006438:	11fff4ff 	.word	0x11fff4ff
 800643c:	40011000 	.word	0x40011000
 8006440:	40004400 	.word	0x40004400
 8006444:	40004800 	.word	0x40004800
 8006448:	40004c00 	.word	0x40004c00
 800644c:	40005000 	.word	0x40005000
 8006450:	40011400 	.word	0x40011400
 8006454:	40007800 	.word	0x40007800
 8006458:	40007c00 	.word	0x40007c00
 800645c:	58024400 	.word	0x58024400
 8006460:	003d0900 	.word	0x003d0900
 8006464:	080108c0 	.word	0x080108c0
 8006468:	03d09000 	.word	0x03d09000
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800646c:	4b24      	ldr	r3, [pc, #144]	@ (8006500 <UART_SetConfig+0x36c>)
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	0692      	lsls	r2, r2, #26
 8006472:	d43d      	bmi.n	80064f0 <UART_SetConfig+0x35c>
          pclk = (uint32_t) HSI_VALUE;
 8006474:	4823      	ldr	r0, [pc, #140]	@ (8006504 <UART_SetConfig+0x370>)
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006476:	4b24      	ldr	r3, [pc, #144]	@ (8006508 <UART_SetConfig+0x374>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006478:	6866      	ldr	r6, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800647a:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800647e:	eb06 0146 	add.w	r1, r6, r6, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006482:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006486:	4299      	cmp	r1, r3
 8006488:	f63f aec4 	bhi.w	8006214 <UART_SetConfig+0x80>
 800648c:	ebb3 3f06 	cmp.w	r3, r6, lsl #12
 8006490:	f63f aec0 	bhi.w	8006214 <UART_SetConfig+0x80>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006494:	2300      	movs	r3, #0
 8006496:	4619      	mov	r1, r3
 8006498:	f7f9 ff7a 	bl	8000390 <__aeabi_uldivmod>
 800649c:	4632      	mov	r2, r6
 800649e:	0209      	lsls	r1, r1, #8
 80064a0:	0203      	lsls	r3, r0, #8
 80064a2:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 80064a6:	0870      	lsrs	r0, r6, #1
 80064a8:	1818      	adds	r0, r3, r0
 80064aa:	f04f 0300 	mov.w	r3, #0
 80064ae:	f141 0100 	adc.w	r1, r1, #0
 80064b2:	f7f9 ff6d 	bl	8000390 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80064b6:	4b15      	ldr	r3, [pc, #84]	@ (800650c <UART_SetConfig+0x378>)
 80064b8:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 80064bc:	429a      	cmp	r2, r3
 80064be:	f63f aea9 	bhi.w	8006214 <UART_SetConfig+0x80>
 80064c2:	e72d      	b.n	8006320 <UART_SetConfig+0x18c>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064c4:	a803      	add	r0, sp, #12
 80064c6:	f7fe fc3b 	bl	8004d40 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80064ca:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 80064cc:	2800      	cmp	r0, #0
 80064ce:	f43f af29 	beq.w	8006324 <UART_SetConfig+0x190>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80064d2:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80064d4:	e7cf      	b.n	8006476 <UART_SetConfig+0x2e2>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064d6:	4668      	mov	r0, sp
 80064d8:	f7fe fb98 	bl	8004c0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80064dc:	9801      	ldr	r0, [sp, #4]
        break;
 80064de:	e7f5      	b.n	80064cc <UART_SetConfig+0x338>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80064e0:	f7fe fb82 	bl	8004be8 <HAL_RCCEx_GetD3PCLK1Freq>
        break;
 80064e4:	e7f2      	b.n	80064cc <UART_SetConfig+0x338>
        pclk = (uint32_t) LSE_VALUE;
 80064e6:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80064ea:	e7c4      	b.n	8006476 <UART_SetConfig+0x2e2>
        pclk = (uint32_t) CSI_VALUE;
 80064ec:	4808      	ldr	r0, [pc, #32]	@ (8006510 <UART_SetConfig+0x37c>)
 80064ee:	e7c2      	b.n	8006476 <UART_SetConfig+0x2e2>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4804      	ldr	r0, [pc, #16]	@ (8006504 <UART_SetConfig+0x370>)
 80064f4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80064f8:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 80064fa:	e7bc      	b.n	8006476 <UART_SetConfig+0x2e2>
          pclk = (uint32_t) HSI_VALUE;
 80064fc:	4801      	ldr	r0, [pc, #4]	@ (8006504 <UART_SetConfig+0x370>)
 80064fe:	e746      	b.n	800638e <UART_SetConfig+0x1fa>
 8006500:	58024400 	.word	0x58024400
 8006504:	03d09000 	.word	0x03d09000
 8006508:	080108c0 	.word	0x080108c0
 800650c:	000ffcff 	.word	0x000ffcff
 8006510:	003d0900 	.word	0x003d0900

08006514 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006514:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8006516:	07da      	lsls	r2, r3, #31
{
 8006518:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800651a:	d506      	bpl.n	800652a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800651c:	6801      	ldr	r1, [r0, #0]
 800651e:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8006520:	684a      	ldr	r2, [r1, #4]
 8006522:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8006526:	4322      	orrs	r2, r4
 8006528:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800652a:	079c      	lsls	r4, r3, #30
 800652c:	d506      	bpl.n	800653c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800652e:	6801      	ldr	r1, [r0, #0]
 8006530:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8006532:	684a      	ldr	r2, [r1, #4]
 8006534:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006538:	4322      	orrs	r2, r4
 800653a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800653c:	0759      	lsls	r1, r3, #29
 800653e:	d506      	bpl.n	800654e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006540:	6801      	ldr	r1, [r0, #0]
 8006542:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8006544:	684a      	ldr	r2, [r1, #4]
 8006546:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800654a:	4322      	orrs	r2, r4
 800654c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800654e:	071a      	lsls	r2, r3, #28
 8006550:	d506      	bpl.n	8006560 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006552:	6801      	ldr	r1, [r0, #0]
 8006554:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8006556:	684a      	ldr	r2, [r1, #4]
 8006558:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800655c:	4322      	orrs	r2, r4
 800655e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006560:	06dc      	lsls	r4, r3, #27
 8006562:	d506      	bpl.n	8006572 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006564:	6801      	ldr	r1, [r0, #0]
 8006566:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8006568:	688a      	ldr	r2, [r1, #8]
 800656a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800656e:	4322      	orrs	r2, r4
 8006570:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006572:	0699      	lsls	r1, r3, #26
 8006574:	d506      	bpl.n	8006584 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006576:	6801      	ldr	r1, [r0, #0]
 8006578:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 800657a:	688a      	ldr	r2, [r1, #8]
 800657c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006580:	4322      	orrs	r2, r4
 8006582:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006584:	065a      	lsls	r2, r3, #25
 8006586:	d50a      	bpl.n	800659e <UART_AdvFeatureConfig+0x8a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006588:	6801      	ldr	r1, [r0, #0]
 800658a:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 800658c:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800658e:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006592:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8006596:	ea42 0204 	orr.w	r2, r2, r4
 800659a:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800659c:	d00b      	beq.n	80065b6 <UART_AdvFeatureConfig+0xa2>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800659e:	061b      	lsls	r3, r3, #24
 80065a0:	d506      	bpl.n	80065b0 <UART_AdvFeatureConfig+0x9c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80065a2:	6802      	ldr	r2, [r0, #0]
 80065a4:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 80065a6:	6853      	ldr	r3, [r2, #4]
 80065a8:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80065ac:	430b      	orrs	r3, r1
 80065ae:	6053      	str	r3, [r2, #4]
  }
}
 80065b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80065b4:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065b6:	684a      	ldr	r2, [r1, #4]
 80065b8:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 80065ba:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 80065be:	4322      	orrs	r2, r4
 80065c0:	604a      	str	r2, [r1, #4]
 80065c2:	e7ec      	b.n	800659e <UART_AdvFeatureConfig+0x8a>

080065c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80065c4:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065c6:	2300      	movs	r3, #0
{
 80065c8:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065ca:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80065ce:	f7fb ff29 	bl	8002424 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80065d2:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80065d4:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	0711      	lsls	r1, r2, #28
 80065da:	d40e      	bmi.n	80065fa <UART_CheckIdleState+0x36>
      return HAL_TIMEOUT;
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	0752      	lsls	r2, r2, #29
 80065e0:	d42f      	bmi.n	8006642 <UART_CheckIdleState+0x7e>
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065e2:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 80065e4:	2220      	movs	r2, #32

  __HAL_UNLOCK(huart);

  return HAL_OK;
 80065e6:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 80065e8:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80065ec:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065f0:	66e3      	str	r3, [r4, #108]	@ 0x6c
          huart->gState = HAL_UART_STATE_READY;
          huart->RxState = HAL_UART_STATE_READY;
          huart->ErrorCode = HAL_UART_ERROR_RTO;

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065f2:	2300      	movs	r3, #0
 80065f4:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
}
 80065f8:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065fa:	69da      	ldr	r2, [r3, #28]
 80065fc:	0292      	lsls	r2, r2, #10
 80065fe:	d4ed      	bmi.n	80065dc <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006600:	f7fb ff10 	bl	8002424 <HAL_GetTick>
 8006604:	1b43      	subs	r3, r0, r5
 8006606:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800660a:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800660c:	d22a      	bcs.n	8006664 <UART_CheckIdleState+0xa0>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	0750      	lsls	r0, r2, #29
 8006612:	d5f2      	bpl.n	80065fa <UART_CheckIdleState+0x36>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006614:	69da      	ldr	r2, [r3, #28]
 8006616:	0511      	lsls	r1, r2, #20
 8006618:	d5ef      	bpl.n	80065fa <UART_CheckIdleState+0x36>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800661a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
          huart->gState = HAL_UART_STATE_READY;
 800661e:	2220      	movs	r2, #32
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006620:	6219      	str	r1, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006622:	6819      	ldr	r1, [r3, #0]
 8006624:	f421 71d0 	bic.w	r1, r1, #416	@ 0x1a0
 8006628:	6019      	str	r1, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800662a:	6899      	ldr	r1, [r3, #8]
 800662c:	f021 0101 	bic.w	r1, r1, #1
 8006630:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 8006632:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006636:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800663a:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
 800663e:	2003      	movs	r0, #3
 8006640:	e7d7      	b.n	80065f2 <UART_CheckIdleState+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006642:	69db      	ldr	r3, [r3, #28]
 8006644:	0258      	lsls	r0, r3, #9
 8006646:	d4cc      	bmi.n	80065e2 <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006648:	f7fb feec 	bl	8002424 <HAL_GetTick>
 800664c:	1b43      	subs	r3, r0, r5
 800664e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006652:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006654:	d206      	bcs.n	8006664 <UART_CheckIdleState+0xa0>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	0751      	lsls	r1, r2, #29
 800665a:	d5f2      	bpl.n	8006642 <UART_CheckIdleState+0x7e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800665c:	69da      	ldr	r2, [r3, #28]
 800665e:	0512      	lsls	r2, r2, #20
 8006660:	d5ef      	bpl.n	8006642 <UART_CheckIdleState+0x7e>
 8006662:	e7da      	b.n	800661a <UART_CheckIdleState+0x56>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006664:	681a      	ldr	r2, [r3, #0]
        huart->gState = HAL_UART_STATE_READY;
 8006666:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006668:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 800666c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800666e:	689a      	ldr	r2, [r3, #8]
 8006670:	f022 0201 	bic.w	r2, r2, #1
 8006674:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8006676:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800667a:	f8c4 1088 	str.w	r1, [r4, #136]	@ 0x88
        return HAL_TIMEOUT;
 800667e:	e7de      	b.n	800663e <UART_CheckIdleState+0x7a>

08006680 <HAL_UART_Init>:
  if (huart == NULL)
 8006680:	b380      	cbz	r0, 80066e4 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 8006682:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
{
 8006686:	b510      	push	{r4, lr}
 8006688:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800668a:	b333      	cbz	r3, 80066da <HAL_UART_Init+0x5a>
  __HAL_UART_DISABLE(huart);
 800668c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800668e:	2324      	movs	r3, #36	@ 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006690:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8006692:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  __HAL_UART_DISABLE(huart);
 8006696:	6813      	ldr	r3, [r2, #0]
 8006698:	f023 0301 	bic.w	r3, r3, #1
 800669c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800669e:	f7ff fd79 	bl	8006194 <UART_SetConfig>
 80066a2:	2801      	cmp	r0, #1
 80066a4:	d017      	beq.n	80066d6 <HAL_UART_Init+0x56>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80066a6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80066a8:	b98b      	cbnz	r3, 80066ce <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066aa:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 80066ac:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066ae:	685a      	ldr	r2, [r3, #4]
 80066b0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80066b4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066b6:	689a      	ldr	r2, [r3, #8]
 80066b8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80066bc:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	f042 0201 	orr.w	r2, r2, #1
}
 80066c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 80066c8:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80066ca:	f7ff bf7b 	b.w	80065c4 <UART_CheckIdleState>
    UART_AdvFeatureConfig(huart);
 80066ce:	4620      	mov	r0, r4
 80066d0:	f7ff ff20 	bl	8006514 <UART_AdvFeatureConfig>
 80066d4:	e7e9      	b.n	80066aa <HAL_UART_Init+0x2a>
}
 80066d6:	2001      	movs	r0, #1
 80066d8:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80066da:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
    HAL_UART_MspInit(huart);
 80066de:	f7ff fd57 	bl	8006190 <HAL_UART_MspInit>
 80066e2:	e7d3      	b.n	800668c <HAL_UART_Init+0xc>
}
 80066e4:	2001      	movs	r0, #1
 80066e6:	4770      	bx	lr

080066e8 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80066e8:	4b0c      	ldr	r3, [pc, #48]	@ (800671c <MX_DMA_Init+0x34>)

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80066ea:	2200      	movs	r2, #0
 80066ec:	200b      	movs	r0, #11
 80066ee:	4611      	mov	r1, r2
{
 80066f0:	b510      	push	{r4, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 80066f2:	f8d3 40d8 	ldr.w	r4, [r3, #216]	@ 0xd8
{
 80066f6:	b082      	sub	sp, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
 80066f8:	f044 0401 	orr.w	r4, r4, #1
 80066fc:	f8c3 40d8 	str.w	r4, [r3, #216]	@ 0xd8
 8006700:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006704:	f003 0301 	and.w	r3, r3, #1
 8006708:	9301      	str	r3, [sp, #4]
 800670a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800670c:	f7fb fec2 	bl	8002494 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8006710:	200b      	movs	r0, #11

}
 8006712:	b002      	add	sp, #8
 8006714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8006718:	f7fb bef8 	b.w	800250c <HAL_NVIC_EnableIRQ>
 800671c:	58024400 	.word	0x58024400

08006720 <MX_GPIO_Init>:
     PA8   ------> RCC_MCO_1
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8006720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006724:	4b50      	ldr	r3, [pc, #320]	@ (8006868 <MX_GPIO_Init+0x148>)
{
 8006726:	b08c      	sub	sp, #48	@ 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006728:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PE3_GPIO_Port, PE3_Pin, GPIO_PIN_RESET);
 800672a:	2108      	movs	r1, #8
 800672c:	4e4f      	ldr	r6, [pc, #316]	@ (800686c <MX_GPIO_Init+0x14c>)
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_CS_Pin|LCD_WR_RS_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PE3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800672e:	2701      	movs	r7, #1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006730:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(PE3_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006732:	2502      	movs	r5, #2
  HAL_GPIO_WritePin(PE3_GPIO_Port, PE3_Pin, GPIO_PIN_RESET);
 8006734:	4630      	mov	r0, r6

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_WR_RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006736:	f04f 0803 	mov.w	r8, #3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800673a:	e9cd 4406 	strd	r4, r4, [sp, #24]
 800673e:	e9cd 4408 	strd	r4, r4, [sp, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006742:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006746:	f042 0210 	orr.w	r2, r2, #16
 800674a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800674e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006752:	f002 0210 	and.w	r2, r2, #16
 8006756:	9200      	str	r2, [sp, #0]
 8006758:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800675a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800675e:	f042 0204 	orr.w	r2, r2, #4
 8006762:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006766:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800676a:	f002 0204 	and.w	r2, r2, #4
 800676e:	9201      	str	r2, [sp, #4]
 8006770:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006772:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006776:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800677a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800677e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006782:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8006786:	9202      	str	r2, [sp, #8]
 8006788:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800678a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800678e:	f042 0201 	orr.w	r2, r2, #1
 8006792:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006796:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800679a:	f002 0201 	and.w	r2, r2, #1
 800679e:	9203      	str	r2, [sp, #12]
 80067a0:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80067a2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80067a6:	430a      	orrs	r2, r1
 80067a8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80067ac:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80067b0:	400a      	ands	r2, r1
 80067b2:	9204      	str	r2, [sp, #16]
 80067b4:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80067b6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80067ba:	f042 0202 	orr.w	r2, r2, #2
 80067be:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  HAL_GPIO_WritePin(PE3_GPIO_Port, PE3_Pin, GPIO_PIN_RESET);
 80067c2:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80067c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80067c8:	f003 0302 	and.w	r3, r3, #2
 80067cc:	9305      	str	r3, [sp, #20]
 80067ce:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(PE3_GPIO_Port, PE3_Pin, GPIO_PIN_RESET);
 80067d0:	f7fc fc64 	bl	800309c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, LCD_CS_Pin|LCD_WR_RS_Pin, GPIO_PIN_SET);
 80067d4:	2201      	movs	r2, #1
 80067d6:	4630      	mov	r0, r6
 80067d8:	f44f 5120 	mov.w	r1, #10240	@ 0x2800
 80067dc:	f7fc fc5e 	bl	800309c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = PE3_Pin;
 80067e0:	2308      	movs	r3, #8
  HAL_GPIO_Init(PE3_GPIO_Port, &GPIO_InitStruct);
 80067e2:	a906      	add	r1, sp, #24
 80067e4:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = PE3_Pin;
 80067e6:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80067e8:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067ea:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067ec:	9409      	str	r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(PE3_GPIO_Port, &GPIO_InitStruct);
 80067ee:	f7fc fa43 	bl	8002c78 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = KEY_Pin;
 80067f2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80067f6:	2300      	movs	r3, #0
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 80067f8:	a906      	add	r1, sp, #24
 80067fa:	481d      	ldr	r0, [pc, #116]	@ (8006870 <MX_GPIO_Init+0x150>)
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80067fc:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pin = KEY_Pin;
 80067fe:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8006802:	f7fc fa39 	bl	8002c78 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_WR_RS_Pin;
 8006806:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800680a:	4630      	mov	r0, r6
 800680c:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_WR_RS_Pin;
 800680e:	9306      	str	r3, [sp, #24]
  /* USART1 TX for uart tx : PB14 */
  GPIO_InitStruct.Pin = USART1_TX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8006810:	2604      	movs	r6, #4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006812:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006816:	e9cd 7407 	strd	r7, r4, [sp, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800681a:	f7fc fa2d 	bl	8002c78 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800681e:	f44f 7380 	mov.w	r3, #256	@ 0x100
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006822:	a906      	add	r1, sp, #24
 8006824:	4813      	ldr	r0, [pc, #76]	@ (8006874 <MX_GPIO_Init+0x154>)
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006826:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006828:	e9cd 5407 	strd	r5, r4, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800682c:	e9cd 5409 	strd	r5, r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006830:	f7fc fa22 	bl	8002c78 <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006834:	9708      	str	r7, [sp, #32]
  HAL_GPIO_Init(USART1_TX_Port, &GPIO_InitStruct);
 8006836:	4f10      	ldr	r7, [pc, #64]	@ (8006878 <MX_GPIO_Init+0x158>)
  GPIO_InitStruct.Pin = USART1_TX_Pin;
 8006838:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  HAL_GPIO_Init(USART1_TX_Port, &GPIO_InitStruct);
 800683c:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800683e:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(USART1_TX_Port, &GPIO_InitStruct);
 8006840:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = USART1_TX_Pin;
 8006842:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8006844:	e9cd 8609 	strd	r8, r6, [sp, #36]	@ 0x24
  HAL_GPIO_Init(USART1_TX_Port, &GPIO_InitStruct);
 8006848:	f7fc fa16 	bl	8002c78 <HAL_GPIO_Init>

  /* USART1 RX for uart rx : PB15 */
  GPIO_InitStruct.Pin = USART1_RX_Pin;
 800684c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
  HAL_GPIO_Init(USART1_RX_Port, &GPIO_InitStruct);
 8006850:	a906      	add	r1, sp, #24
 8006852:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006854:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006856:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Pin = USART1_RX_Pin;
 8006858:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800685a:	e9cd 5609 	strd	r5, r6, [sp, #36]	@ 0x24
  HAL_GPIO_Init(USART1_RX_Port, &GPIO_InitStruct);
 800685e:	f7fc fa0b 	bl	8002c78 <HAL_GPIO_Init>
}
 8006862:	b00c      	add	sp, #48	@ 0x30
 8006864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006868:	58024400 	.word	0x58024400
 800686c:	58021000 	.word	0x58021000
 8006870:	58020800 	.word	0x58020800
 8006874:	58020000 	.word	0x58020000
 8006878:	58020400 	.word	0x58020400

0800687c <Error_Handler>:
	SCB_EnableDCache();
}

void LED_Blink(uint32_t Hdelay, uint32_t Ldelay)
{
	HAL_GPIO_WritePin(PE3_GPIO_Port, PE3_Pin, GPIO_PIN_SET);
 800687c:	4c09      	ldr	r4, [pc, #36]	@ (80068a4 <Error_Handler+0x28>)
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800687e:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(PE3_GPIO_Port, PE3_Pin, GPIO_PIN_SET);
 8006880:	2201      	movs	r2, #1
 8006882:	2108      	movs	r1, #8
 8006884:	4620      	mov	r0, r4
 8006886:	f7fc fc09 	bl	800309c <HAL_GPIO_WritePin>
	HAL_Delay(Hdelay - 1);
 800688a:	2004      	movs	r0, #4
 800688c:	f7fb fdd0 	bl	8002430 <HAL_Delay>
	HAL_GPIO_WritePin(PE3_GPIO_Port, PE3_Pin, GPIO_PIN_RESET);
 8006890:	4620      	mov	r0, r4
 8006892:	2200      	movs	r2, #0
 8006894:	2108      	movs	r1, #8
 8006896:	f7fc fc01 	bl	800309c <HAL_GPIO_WritePin>
	HAL_Delay(Ldelay - 1);
 800689a:	20f9      	movs	r0, #249	@ 0xf9
 800689c:	f7fb fdc8 	bl	8002430 <HAL_Delay>
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1)
 80068a0:	e7ee      	b.n	8006880 <Error_Handler+0x4>
 80068a2:	bf00      	nop
 80068a4:	58021000 	.word	0x58021000

080068a8 <_Z18SystemClock_Configv>:
{
 80068a8:	b530      	push	{r4, r5, lr}
 80068aa:	b09f      	sub	sp, #124	@ 0x7c
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80068ac:	224c      	movs	r2, #76	@ 0x4c
 80068ae:	2100      	movs	r1, #0
 80068b0:	a80a      	add	r0, sp, #40	@ 0x28
 80068b2:	f001 f87a 	bl	80079aa <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80068b6:	2220      	movs	r2, #32
 80068b8:	2100      	movs	r1, #0
 80068ba:	a802      	add	r0, sp, #8
 80068bc:	f001 f875 	bl	80079aa <memset>
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80068c0:	2002      	movs	r0, #2
 80068c2:	f7fc fbef 	bl	80030a4 <HAL_PWREx_ConfigSupply>
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80068c6:	4a26      	ldr	r2, [pc, #152]	@ (8006960 <_Z18SystemClock_Configv+0xb8>)
 80068c8:	2100      	movs	r1, #0
 80068ca:	4b26      	ldr	r3, [pc, #152]	@ (8006964 <_Z18SystemClock_Configv+0xbc>)
 80068cc:	9101      	str	r1, [sp, #4]
 80068ce:	6991      	ldr	r1, [r2, #24]
 80068d0:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 80068d4:	6191      	str	r1, [r2, #24]
 80068d6:	6991      	ldr	r1, [r2, #24]
 80068d8:	f401 4140 	and.w	r1, r1, #49152	@ 0xc000
 80068dc:	9101      	str	r1, [sp, #4]
 80068de:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80068e0:	f041 0101 	orr.w	r1, r1, #1
 80068e4:	62d9      	str	r1, [r3, #44]	@ 0x2c
 80068e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068e8:	f003 0301 	and.w	r3, r3, #1
 80068ec:	9301      	str	r3, [sp, #4]
 80068ee:	9b01      	ldr	r3, [sp, #4]
	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80068f0:	6993      	ldr	r3, [r2, #24]
 80068f2:	0499      	lsls	r1, r3, #18
 80068f4:	d5fc      	bpl.n	80068f0 <_Z18SystemClock_Configv+0x48>
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80068f6:	2302      	movs	r3, #2
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80068f8:	2200      	movs	r2, #0
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80068fa:	2021      	movs	r0, #33	@ 0x21
 80068fc:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006900:	9313      	str	r3, [sp, #76]	@ 0x4c
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8006902:	2501      	movs	r5, #1
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006904:	9314      	str	r3, [sp, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8006906:	2408      	movs	r4, #8
	RCC_OscInitStruct.PLL.PLLR = 2;
 8006908:	9319      	str	r3, [sp, #100]	@ 0x64
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800690a:	9510      	str	r5, [sp, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800690c:	941a      	str	r4, [sp, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLQ = 2;
 800690e:	e9cd 3317 	strd	r3, r3, [sp, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8006912:	e9cd 221b 	strd	r2, r2, [sp, #108]	@ 0x6c
	RCC_OscInitStruct.PLL.PLLN = 96;
 8006916:	2360      	movs	r3, #96	@ 0x60
 8006918:	2205      	movs	r2, #5
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800691a:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800691e:	a80a      	add	r0, sp, #40	@ 0x28
	RCC_OscInitStruct.PLL.PLLN = 96;
 8006920:	e9cd 2315 	strd	r2, r3, [sp, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006924:	f7fc fc54 	bl	80031d0 <HAL_RCC_OscConfig>
 8006928:	4603      	mov	r3, r0
 800692a:	b9b0      	cbnz	r0, 800695a <_Z18SystemClock_Configv+0xb2>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800692c:	223f      	movs	r2, #63	@ 0x3f
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800692e:	4629      	mov	r1, r5
 8006930:	a802      	add	r0, sp, #8
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8006932:	9304      	str	r3, [sp, #16]
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006934:	9202      	str	r2, [sp, #8]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006936:	2203      	movs	r2, #3
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8006938:	9309      	str	r3, [sp, #36]	@ 0x24
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800693a:	9203      	str	r2, [sp, #12]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800693c:	e9cd 4305 	strd	r4, r3, [sp, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8006940:	e9cd 3307 	strd	r3, r3, [sp, #28]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8006944:	f7fd f808 	bl	8003958 <HAL_RCC_ClockConfig>
 8006948:	b938      	cbnz	r0, 800695a <_Z18SystemClock_Configv+0xb2>
	HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI48, RCC_MCODIV_4);
 800694a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800694e:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8006952:	f7fc ff21 	bl	8003798 <HAL_RCC_MCOConfig>
}
 8006956:	b01f      	add	sp, #124	@ 0x7c
 8006958:	bd30      	pop	{r4, r5, pc}
		Error_Handler();
 800695a:	f7ff ff8f 	bl	800687c <Error_Handler>
 800695e:	bf00      	nop
 8006960:	58024800 	.word	0x58024800
 8006964:	58000400 	.word	0x58000400

08006968 <main>:
{
 8006968:	b500      	push	{lr}
	MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800696a:	2300      	movs	r3, #0
{
 800696c:	b087      	sub	sp, #28
	MPU_InitStruct.BaseAddress      = QSPI_BASE;
 800696e:	f04f 4410 	mov.w	r4, #2415919104	@ 0x90000000
	MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8006972:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006976:	e9cd 3304 	strd	r3, r3, [sp, #16]
	HAL_MPU_Disable();
 800697a:	f7fb fdeb 	bl	8002554 <HAL_MPU_Disable>
	MPU_InitStruct.Enable           = MPU_REGION_ENABLE;
 800697e:	2301      	movs	r3, #1
	MPU_InitStruct.Size             = MPU_REGION_SIZE_256MB;
 8006980:	4a43      	ldr	r2, [pc, #268]	@ (8006a90 <main+0x128>)
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8006982:	a802      	add	r0, sp, #8
	MPU_InitStruct.Enable           = MPU_REGION_ENABLE;
 8006984:	f8ad 3008 	strh.w	r3, [sp, #8]
	MPU_InitStruct.Size             = MPU_REGION_SIZE_256MB;
 8006988:	9305      	str	r3, [sp, #20]
 800698a:	e9cd 4203 	strd	r4, r2, [sp, #12]
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800698e:	f7fb fdff 	bl	8002590 <HAL_MPU_ConfigRegion>
	MPU_InitStruct.Enable           = MPU_REGION_ENABLE;
 8006992:	f240 1101 	movw	r1, #257	@ 0x101
	MPU_InitStruct.Size             = MPU_REGION_SIZE_8MB;
 8006996:	4a3f      	ldr	r2, [pc, #252]	@ (8006a94 <main+0x12c>)
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8006998:	a802      	add	r0, sp, #8
	MPU_InitStruct.Size             = MPU_REGION_SIZE_8MB;
 800699a:	4b3f      	ldr	r3, [pc, #252]	@ (8006a98 <main+0x130>)
	MPU_InitStruct.BaseAddress      = QSPI_BASE;
 800699c:	9403      	str	r4, [sp, #12]
	MPU_InitStruct.BaseAddress      = D1_AXISRAM_BASE;
 800699e:	f04f 5410 	mov.w	r4, #603979776	@ 0x24000000
	MPU_InitStruct.Enable           = MPU_REGION_ENABLE;
 80069a2:	f8ad 1008 	strh.w	r1, [sp, #8]
	MPU_InitStruct.Size             = MPU_REGION_SIZE_8MB;
 80069a6:	9204      	str	r2, [sp, #16]
 80069a8:	9305      	str	r3, [sp, #20]
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80069aa:	f7fb fdf1 	bl	8002590 <HAL_MPU_ConfigRegion>
	MPU_InitStruct.Size             = MPU_REGION_SIZE_512KB;
 80069ae:	4a3b      	ldr	r2, [pc, #236]	@ (8006a9c <main+0x134>)
	MPU_InitStruct.Enable           = MPU_REGION_ENABLE;
 80069b0:	f240 2101 	movw	r1, #513	@ 0x201
	MPU_InitStruct.Size             = MPU_REGION_SIZE_512KB;
 80069b4:	4b3a      	ldr	r3, [pc, #232]	@ (8006aa0 <main+0x138>)
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80069b6:	a802      	add	r0, sp, #8
	MPU_InitStruct.Enable           = MPU_REGION_ENABLE;
 80069b8:	f8ad 1008 	strh.w	r1, [sp, #8]
	MPU_InitStruct.BaseAddress      = D1_AXISRAM_BASE;
 80069bc:	9403      	str	r4, [sp, #12]
	MPU_InitStruct.Size             = MPU_REGION_SIZE_512KB;
 80069be:	e9cd 2304 	strd	r2, r3, [sp, #16]
	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80069c2:	f7fb fde5 	bl	8002590 <HAL_MPU_ConfigRegion>
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80069c6:	2004      	movs	r0, #4
 80069c8:	f7fb fdd2 	bl	8002570 <HAL_MPU_Enable>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80069cc:	4a35      	ldr	r2, [pc, #212]	@ (8006aa4 <main+0x13c>)
 80069ce:	6953      	ldr	r3, [r2, #20]
 80069d0:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 80069d4:	d111      	bne.n	80069fa <main+0x92>
  __ASM volatile ("dsb 0xF":::"memory");
 80069d6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80069da:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80069de:	f8c2 3250 	str.w	r3, [r2, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80069e2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80069e6:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80069ea:	6953      	ldr	r3, [r2, #20]
 80069ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069f0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80069f2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80069f6:	f3bf 8f6f 	isb	sy
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80069fa:	482a      	ldr	r0, [pc, #168]	@ (8006aa4 <main+0x13c>)
 80069fc:	6943      	ldr	r3, [r0, #20]
 80069fe:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 8006a02:	d124      	bne.n	8006a4e <main+0xe6>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8006a04:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8006a08:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8006a0c:	f8d0 5080 	ldr.w	r5, [r0, #128]	@ 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8006a10:	f643 76e0 	movw	r6, #16352	@ 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8006a14:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8006a18:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 8006a1c:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8006a1e:	ea04 0106 	and.w	r1, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8006a22:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8006a24:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
      } while (ways-- != 0U);
 8006a28:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8006a2a:	f8c0 2260 	str.w	r2, [r0, #608]	@ 0x260
      } while (ways-- != 0U);
 8006a2e:	1c5a      	adds	r2, r3, #1
 8006a30:	d1f8      	bne.n	8006a24 <main+0xbc>
    } while(sets-- != 0U);
 8006a32:	3c20      	subs	r4, #32
 8006a34:	f114 0f20 	cmn.w	r4, #32
 8006a38:	d1f1      	bne.n	8006a1e <main+0xb6>
 8006a3a:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8006a3e:	6943      	ldr	r3, [r0, #20]
 8006a40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a44:	6143      	str	r3, [r0, #20]
 8006a46:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006a4a:	f3bf 8f6f 	isb	sy
	HAL_Init();
 8006a4e:	4e16      	ldr	r6, [pc, #88]	@ (8006aa8 <main+0x140>)
		LCD_ShowString(0, 0, ST7735Ctx.Width, 16, 16, (uint8_t*)"running!!!!");
 8006a50:	2410      	movs	r4, #16
 8006a52:	4d16      	ldr	r5, [pc, #88]	@ (8006aac <main+0x144>)
	HAL_Init();
 8006a54:	f7fb fcaa 	bl	80023ac <HAL_Init>
	SystemClock_Config();
 8006a58:	f7ff ff26 	bl	80068a8 <_Z18SystemClock_Configv>
	MX_GPIO_Init();
 8006a5c:	f7ff fe60 	bl	8006720 <MX_GPIO_Init>
	MX_DMA_Init();
 8006a60:	f7ff fe42 	bl	80066e8 <MX_DMA_Init>
	MX_SPI4_Init();
 8006a64:	f000 f824 	bl	8006ab0 <MX_SPI4_Init>
	MX_TIM1_Init();
 8006a68:	f000 f932 	bl	8006cd0 <MX_TIM1_Init>
	UART_Init();
 8006a6c:	f000 f9e6 	bl	8006e3c <UART_Init>
	LCD_Test();
 8006a70:	f7fa f84c 	bl	8000b0c <LCD_Test>
		LCD_ShowString(0, 0, ST7735Ctx.Width, 16, 16, (uint8_t*)"running!!!!");
 8006a74:	2100      	movs	r1, #0
 8006a76:	8832      	ldrh	r2, [r6, #0]
 8006a78:	2310      	movs	r3, #16
 8006a7a:	9501      	str	r5, [sp, #4]
 8006a7c:	4608      	mov	r0, r1
 8006a7e:	9400      	str	r4, [sp, #0]
 8006a80:	f7fa f9ba 	bl	8000df8 <LCD_ShowString>
		HAL_Delay(1000);
 8006a84:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8006a88:	f7fb fcd2 	bl	8002430 <HAL_Delay>
	while (1)
 8006a8c:	e7f2      	b.n	8006a74 <main+0x10c>
 8006a8e:	bf00      	nop
 8006a90:	0001001b 	.word	0x0001001b
 8006a94:	05010016 	.word	0x05010016
 8006a98:	01010000 	.word	0x01010000
 8006a9c:	03010012 	.word	0x03010012
 8006aa0:	01010100 	.word	0x01010100
 8006aa4:	e000ed00 	.word	0xe000ed00
 8006aa8:	240007b0 	.word	0x240007b0
 8006aac:	080099e4 	.word	0x080099e4

08006ab0 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8006ab0:	b510      	push	{r4, lr}
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8006ab2:	4816      	ldr	r0, [pc, #88]	@ (8006b0c <MX_SPI4_Init+0x5c>)
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8006ab4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
  hspi4.Instance = SPI4;
 8006ab8:	4c15      	ldr	r4, [pc, #84]	@ (8006b10 <MX_SPI4_Init+0x60>)
  hspi4.Init.Direction = SPI_DIRECTION_1LINE;
 8006aba:	f44f 21c0 	mov.w	r1, #393216	@ 0x60000
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006abe:	2300      	movs	r3, #0
  hspi4.Init.Direction = SPI_DIRECTION_1LINE;
 8006ac0:	6081      	str	r1, [r0, #8]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi4.Init.NSS = SPI_NSS_SOFT;
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8006ac2:	f04f 5100 	mov.w	r1, #536870912	@ 0x20000000
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006ac6:	6103      	str	r3, [r0, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006ac8:	6143      	str	r3, [r0, #20]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8006aca:	e9c0 4200 	strd	r4, r2, [r0]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8006ace:	2207      	movs	r2, #7
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8006ad0:	f04f 6480 	mov.w	r4, #67108864	@ 0x4000000
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8006ad4:	60c2      	str	r2, [r0, #12]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi4.Init.CRCPolynomial = 0x0;
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006ad6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8006ada:	e9c0 4106 	strd	r4, r1, [r0, #24]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8006ade:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi4.Init.CRCPolynomial = 0x0;
 8006ae2:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8006ae6:	e9c0 230d 	strd	r2, r3, [r0, #52]	@ 0x34
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8006aea:	e9c0 330f 	strd	r3, r3, [r0, #60]	@ 0x3c
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8006aee:	e9c0 3311 	strd	r3, r3, [r0, #68]	@ 0x44
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8006af2:	e9c0 3313 	strd	r3, r3, [r0, #76]	@ 0x4c
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8006af6:	e9c0 3315 	strd	r3, r3, [r0, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8006afa:	f7fe fa17 	bl	8004f2c <HAL_SPI_Init>
 8006afe:	b900      	cbnz	r0, 8006b02 <MX_SPI4_Init+0x52>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8006b00:	bd10      	pop	{r4, pc}
 8006b02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8006b06:	f7ff beb9 	b.w	800687c <Error_Handler>
 8006b0a:	bf00      	nop
 8006b0c:	24000890 	.word	0x24000890
 8006b10:	40013400 	.word	0x40013400
 8006b14:	00000000 	.word	0x00000000

08006b18 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8006b18:	b510      	push	{r4, lr}
 8006b1a:	b0b6      	sub	sp, #216	@ 0xd8

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b1c:	2100      	movs	r1, #0
{
 8006b1e:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006b20:	22bc      	movs	r2, #188	@ 0xbc
 8006b22:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b24:	9106      	str	r1, [sp, #24]
 8006b26:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8006b2a:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006b2e:	f000 ff3c 	bl	80079aa <memset>
  if(spiHandle->Instance==SPI4)
 8006b32:	4b21      	ldr	r3, [pc, #132]	@ (8006bb8 <HAL_SPI_MspInit+0xa0>)
 8006b34:	6822      	ldr	r2, [r4, #0]
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d001      	beq.n	8006b3e <HAL_SPI_MspInit+0x26>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8006b3a:	b036      	add	sp, #216	@ 0xd8
 8006b3c:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8006b3e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006b42:	a807      	add	r0, sp, #28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8006b44:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006b46:	f7fd f9e1 	bl	8003f0c <HAL_RCCEx_PeriphCLKConfig>
 8006b4a:	bb40      	cbnz	r0, 8006b9e <HAL_SPI_MspInit+0x86>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8006b4c:	4b1b      	ldr	r3, [pc, #108]	@ (8006bbc <HAL_SPI_MspInit+0xa4>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8006b4e:	2405      	movs	r4, #5
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006b50:	a902      	add	r1, sp, #8
 8006b52:	481b      	ldr	r0, [pc, #108]	@ (8006bc0 <HAL_SPI_MspInit+0xa8>)
    __HAL_RCC_SPI4_CLK_ENABLE();
 8006b54:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8006b58:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006b5c:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 8006b60:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8006b64:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8006b68:	9200      	str	r2, [sp, #0]
 8006b6a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006b6c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006b70:	f042 0210 	orr.w	r2, r2, #16
 8006b74:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8006b7c:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006b7e:	f003 0310 	and.w	r3, r3, #16
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8006b82:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 8006ba8 <HAL_SPI_MspInit+0x90>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006b86:	9301      	str	r3, [sp, #4]
 8006b88:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8006b8a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006b8e:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8006bb0 <HAL_SPI_MspInit+0x98>
 8006b92:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006b96:	f7fc f86f 	bl	8002c78 <HAL_GPIO_Init>
}
 8006b9a:	b036      	add	sp, #216	@ 0xd8
 8006b9c:	bd10      	pop	{r4, pc}
      Error_Handler();
 8006b9e:	f7ff fe6d 	bl	800687c <Error_Handler>
 8006ba2:	e7d3      	b.n	8006b4c <HAL_SPI_MspInit+0x34>
 8006ba4:	f3af 8000 	nop.w
 8006ba8:	00005000 	.word	0x00005000
 8006bac:	00000002 	.word	0x00000002
 8006bb0:	00000000 	.word	0x00000000
 8006bb4:	00000002 	.word	0x00000002
 8006bb8:	40013400 	.word	0x40013400
 8006bbc:	58024400 	.word	0x58024400
 8006bc0:	58021000 	.word	0x58021000

08006bc4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006bc4:	4b07      	ldr	r3, [pc, #28]	@ (8006be4 <HAL_MspInit+0x20>)
{
 8006bc6:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006bc8:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8006bcc:	f042 0202 	orr.w	r2, r2, #2
 8006bd0:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 8006bd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006bd8:	f003 0302 	and.w	r3, r3, #2
 8006bdc:	9301      	str	r3, [sp, #4]
 8006bde:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006be0:	b002      	add	sp, #8
 8006be2:	4770      	bx	lr
 8006be4:	58024400 	.word	0x58024400

08006be8 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006be8:	4770      	bx	lr
 8006bea:	bf00      	nop

08006bec <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006bec:	e7fe      	b.n	8006bec <HardFault_Handler>
 8006bee:	bf00      	nop

08006bf0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006bf0:	e7fe      	b.n	8006bf0 <MemManage_Handler>
 8006bf2:	bf00      	nop

08006bf4 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006bf4:	e7fe      	b.n	8006bf4 <BusFault_Handler>
 8006bf6:	bf00      	nop

08006bf8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006bf8:	e7fe      	b.n	8006bf8 <UsageFault_Handler>
 8006bfa:	bf00      	nop

08006bfc <SVC_Handler>:
}

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
 8006bfc:	4770      	bx	lr
 8006bfe:	bf00      	nop

08006c00 <DebugMon_Handler>:
}

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8006c00:	4770      	bx	lr
 8006c02:	bf00      	nop

08006c04 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8006c04:	4770      	bx	lr
 8006c06:	bf00      	nop

08006c08 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006c08:	f7fb bc00 	b.w	800240c <HAL_IncTick>

08006c0c <DMA_STR0_IRQHandler>:
void DMA_STR0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8006c0c:	4801      	ldr	r0, [pc, #4]	@ (8006c14 <DMA_STR0_IRQHandler+0x8>)
 8006c0e:	f7fb be21 	b.w	8002854 <HAL_DMA_IRQHandler>
 8006c12:	bf00      	nop
 8006c14:	240007c4 	.word	0x240007c4

08006c18 <DCMI_IRQHandler>:
void DCMI_IRQHandler(void)
{
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8006c18:	4801      	ldr	r0, [pc, #4]	@ (8006c20 <DCMI_IRQHandler+0x8>)
 8006c1a:	f7fb bd03 	b.w	8002624 <HAL_DCMI_IRQHandler>
 8006c1e:	bf00      	nop
 8006c20:	24000840 	.word	0x24000840

08006c24 <TIM16_IRQHandler>:
void TIM16_IRQHandler(void)
{
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8006c24:	4801      	ldr	r0, [pc, #4]	@ (8006c2c <TIM16_IRQHandler+0x8>)
 8006c26:	f7fe bf7f 	b.w	8005b28 <HAL_TIM_IRQHandler>
 8006c2a:	bf00      	nop
 8006c2c:	24000918 	.word	0x24000918

08006c30 <_close_r>:
int _open_r(void *reent, const char *file, int flags, int mode){
	return 0;
}
int _close_r(void *reent, int fd){
	return 0;
}
 8006c30:	2000      	movs	r0, #0
 8006c32:	4770      	bx	lr

08006c34 <_lseek_r>:
int _lseek_r(void *reent, int fd, int pos, int whence){
	return 0;
}
 8006c34:	2000      	movs	r0, #0
 8006c36:	4770      	bx	lr

08006c38 <_read_r>:
long _read_r(void *reent, int fd, void *buf, unsigned int cnt){
	return 0;
}
 8006c38:	2000      	movs	r0, #0
 8006c3a:	4770      	bx	lr

08006c3c <_write_r>:
long _write_r(void *reent, int fd, const void *buf,  unsigned int cnt){
 8006c3c:	2000      	movs	r0, #0
 8006c3e:	4770      	bx	lr

08006c40 <_fstat>:
	return 0;
}

int _fstat (int fd, void* st){
 return 0;
}
 8006c40:	2000      	movs	r0, #0
 8006c42:	4770      	bx	lr

08006c44 <_getpid_r>:

int _getpid_r (void *r)
{
  return 0;
}
 8006c44:	2000      	movs	r0, #0
 8006c46:	4770      	bx	lr

08006c48 <_isatty_r>:

int _isatty_r( void *ptr, int fd) {
 8006c48:	2000      	movs	r0, #0
 8006c4a:	4770      	bx	lr

08006c4c <_kill_r>:
}

int _kill_r(void *ptr, int pid, int sig  )
{
	return 0;
}
 8006c4c:	2000      	movs	r0, #0
 8006c4e:	4770      	bx	lr

08006c50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006c50:	b410      	push	{r4}
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006c52:	4c1a      	ldr	r4, [pc, #104]	@ (8006cbc <SystemInit+0x6c>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006c54:	2200      	movs	r2, #0
  RCC->CR |= RCC_CR_HSION;
 8006c56:	4b1a      	ldr	r3, [pc, #104]	@ (8006cc0 <SystemInit+0x70>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006c58:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8006c5c:	4919      	ldr	r1, [pc, #100]	@ (8006cc4 <SystemInit+0x74>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006c5e:	f440 0070 	orr.w	r0, r0, #15728640	@ 0xf00000
 8006c62:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
  RCC->CR |= RCC_CR_HSION;
 8006c66:	6818      	ldr	r0, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8006c68:	4c17      	ldr	r4, [pc, #92]	@ (8006cc8 <SystemInit+0x78>)
  RCC->CR |= RCC_CR_HSION;
 8006c6a:	f040 0001 	orr.w	r0, r0, #1
 8006c6e:	6018      	str	r0, [r3, #0]
  RCC->CFGR = 0x00000000;
 8006c70:	611a      	str	r2, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8006c72:	6818      	ldr	r0, [r3, #0]
 8006c74:	4001      	ands	r1, r0
 8006c76:	6019      	str	r1, [r3, #0]
  RCC->D1CFGR = 0x00000000;
 8006c78:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8006c7a:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8006c7c:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x00000000;
 8006c7e:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLLCFGR = 0x00000000;
 8006c80:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC->PLL1DIVR = 0x00000000;
 8006c82:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC->PLL1FRACR = 0x00000000;
 8006c84:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC->PLL2DIVR = 0x00000000;
 8006c86:	639a      	str	r2, [r3, #56]	@ 0x38
  RCC->PLL2FRACR = 0x00000000;
 8006c88:	63da      	str	r2, [r3, #60]	@ 0x3c
  RCC->PLL3DIVR = 0x00000000;
 8006c8a:	641a      	str	r2, [r3, #64]	@ 0x40
  RCC->PLL3FRACR = 0x00000000;
 8006c8c:	645a      	str	r2, [r3, #68]	@ 0x44
  RCC->CR &= 0xFFFBFFFFU;
 8006c8e:	6819      	ldr	r1, [r3, #0]
 8006c90:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 8006c94:	6019      	str	r1, [r3, #0]
  RCC->CIER = 0x00000000;
 8006c96:	661a      	str	r2, [r3, #96]	@ 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8006c98:	6823      	ldr	r3, [r4, #0]
 8006c9a:	f36f 030f 	bfc	r3, #0, #16
 8006c9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ca2:	d203      	bcs.n	8006cac <SystemInit+0x5c>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8006ca4:	4b09      	ldr	r3, [pc, #36]	@ (8006ccc <SystemInit+0x7c>)
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006cac:	4b03      	ldr	r3, [pc, #12]	@ (8006cbc <SystemInit+0x6c>)
 8006cae:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8006cb2:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006cb6:	609a      	str	r2, [r3, #8]
}
 8006cb8:	4770      	bx	lr
 8006cba:	bf00      	nop
 8006cbc:	e000ed00 	.word	0xe000ed00
 8006cc0:	58024400 	.word	0x58024400
 8006cc4:	eaf6ed7f 	.word	0xeaf6ed7f
 8006cc8:	5c001000 	.word	0x5c001000
 8006ccc:	51008000 	.word	0x51008000

08006cd0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8006cd0:	b530      	push	{r4, r5, lr}

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006cd2:	2400      	movs	r4, #0
{
 8006cd4:	b0a1      	sub	sp, #132	@ 0x84
  TIM_OC_InitTypeDef sConfigOC = {0};
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8006cd6:	222c      	movs	r2, #44	@ 0x2c

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8006cd8:	4d47      	ldr	r5, [pc, #284]	@ (8006df8 <MX_TIM1_Init+0x128>)
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8006cda:	4621      	mov	r1, r4
 8006cdc:	a814      	add	r0, sp, #80	@ 0x50
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006cde:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006ce0:	940c      	str	r4, [sp, #48]	@ 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006ce2:	e9cd 4403 	strd	r4, r4, [sp, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006ce6:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
 8006cea:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
 8006cee:	e9cd 4411 	strd	r4, r4, [sp, #68]	@ 0x44
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8006cf2:	f000 fe5a 	bl	80079aa <memset>
  htim1.Init.Prescaler = 12-1;
 8006cf6:	230b      	movs	r3, #11
 8006cf8:	4a40      	ldr	r2, [pc, #256]	@ (8006dfc <MX_TIM1_Init+0x12c>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 1000-1;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8006cfa:	4628      	mov	r0, r5
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006cfc:	60ac      	str	r4, [r5, #8]
  htim1.Init.RepetitionCounter = 0;
 8006cfe:	61ac      	str	r4, [r5, #24]
  htim1.Init.Prescaler = 12-1;
 8006d00:	e9c5 2300 	strd	r2, r3, [r5]
  htim1.Init.Period = 1000-1;
 8006d04:	f240 33e7 	movw	r3, #999	@ 0x3e7
  htim1.Init.RepetitionCounter = 0;
 8006d08:	e9c5 4404 	strd	r4, r4, [r5, #16]
  htim1.Init.Period = 1000-1;
 8006d0c:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8006d0e:	f7fe fe61 	bl	80059d4 <HAL_TIM_PWM_Init>
 8006d12:	2800      	cmp	r0, #0
 8006d14:	d13e      	bne.n	8006d94 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006d16:	2300      	movs	r3, #0
 8006d18:	2200      	movs	r2, #0
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006d1a:	a902      	add	r1, sp, #8
 8006d1c:	4836      	ldr	r0, [pc, #216]	@ (8006df8 <MX_TIM1_Init+0x128>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006d1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006d22:	2300      	movs	r3, #0
 8006d24:	9304      	str	r3, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006d26:	f7ff f993 	bl	8006050 <HAL_TIMEx_MasterConfigSynchronization>
 8006d2a:	2800      	cmp	r0, #0
 8006d2c:	d13b      	bne.n	8006da6 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006d2e:	2260      	movs	r2, #96	@ 0x60
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8006d30:	2008      	movs	r0, #8
  sConfigOC.Pulse = 0;
 8006d32:	2300      	movs	r3, #0
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006d34:	a90c      	add	r1, sp, #48	@ 0x30
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006d36:	920c      	str	r2, [sp, #48]	@ 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006d38:	2204      	movs	r2, #4
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8006d3a:	900f      	str	r0, [sp, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006d3c:	482e      	ldr	r0, [pc, #184]	@ (8006df8 <MX_TIM1_Init+0x128>)
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006d3e:	9312      	str	r3, [sp, #72]	@ 0x48
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006d40:	ed9f 7b27 	vldr	d7, [pc, #156]	@ 8006de0 <MX_TIM1_Init+0x110>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006d44:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006d48:	ed8d 7b10 	vstr	d7, [sp, #64]	@ 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006d4c:	f7fe ffe6 	bl	8005d1c <HAL_TIM_PWM_ConfigChannel>
 8006d50:	bb30      	cbnz	r0, 8006da0 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006d52:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  sBreakDeadTimeConfig.DeadTime = 0;
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006d54:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
  sBreakDeadTimeConfig.BreakFilter = 0;
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
  sBreakDeadTimeConfig.Break2Filter = 0;
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8006d58:	a914      	add	r1, sp, #80	@ 0x50
 8006d5a:	4827      	ldr	r0, [pc, #156]	@ (8006df8 <MX_TIM1_Init+0x128>)
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006d5c:	931e      	str	r3, [sp, #120]	@ 0x78
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8006d5e:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8006de8 <MX_TIM1_Init+0x118>
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006d62:	e9cd 3314 	strd	r3, r3, [sp, #80]	@ 0x50
  sBreakDeadTimeConfig.DeadTime = 0;
 8006d66:	e9cd 3316 	strd	r3, r3, [sp, #88]	@ 0x58
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006d6a:	e9cd 3218 	strd	r3, r2, [sp, #96]	@ 0x60
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8006d6e:	e9cd 331a 	strd	r3, r3, [sp, #104]	@ 0x68
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8006d72:	ed8d 7b1c 	vstr	d7, [sp, #112]	@ 0x70
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8006d76:	f7ff f9bf 	bl	80060f8 <HAL_TIMEx_ConfigBreakDeadTime>
 8006d7a:	b970      	cbnz	r0, 8006d9a <MX_TIM1_Init+0xca>
}
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(timHandle->Instance==TIM1)
 8006d7c:	4a1f      	ldr	r2, [pc, #124]	@ (8006dfc <MX_TIM1_Init+0x12c>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d7e:	2300      	movs	r3, #0
  if(timHandle->Instance==TIM1)
 8006d80:	6829      	ldr	r1, [r5, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d82:	930a      	str	r3, [sp, #40]	@ 0x28
  if(timHandle->Instance==TIM1)
 8006d84:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d86:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8006d8a:	e9cd 3308 	strd	r3, r3, [sp, #32]
  if(timHandle->Instance==TIM1)
 8006d8e:	d00d      	beq.n	8006dac <MX_TIM1_Init+0xdc>
}
 8006d90:	b021      	add	sp, #132	@ 0x84
 8006d92:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8006d94:	f7ff fd72 	bl	800687c <Error_Handler>
 8006d98:	e7bd      	b.n	8006d16 <MX_TIM1_Init+0x46>
    Error_Handler();
 8006d9a:	f7ff fd6f 	bl	800687c <Error_Handler>
 8006d9e:	e7ed      	b.n	8006d7c <MX_TIM1_Init+0xac>
    Error_Handler();
 8006da0:	f7ff fd6c 	bl	800687c <Error_Handler>
 8006da4:	e7d5      	b.n	8006d52 <MX_TIM1_Init+0x82>
    Error_Handler();
 8006da6:	f7ff fd69 	bl	800687c <Error_Handler>
 8006daa:	e7c0      	b.n	8006d2e <MX_TIM1_Init+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006dac:	4b14      	ldr	r3, [pc, #80]	@ (8006e00 <MX_TIM1_Init+0x130>)
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006dae:	2401      	movs	r4, #1
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006db0:	a906      	add	r1, sp, #24
 8006db2:	4814      	ldr	r0, [pc, #80]	@ (8006e04 <MX_TIM1_Init+0x134>)
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006db4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006db8:	f042 0210 	orr.w	r2, r2, #16
 8006dbc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006dc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006dc4:	940a      	str	r4, [sp, #40]	@ 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006dc6:	f003 0310 	and.w	r3, r3, #16
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006dca:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 8006df0 <MX_TIM1_Init+0x120>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006dce:	9301      	str	r3, [sp, #4]
 8006dd0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006dd2:	ed8d 7b06 	vstr	d7, [sp, #24]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006dd6:	f7fb ff4f 	bl	8002c78 <HAL_GPIO_Init>
}
 8006dda:	b021      	add	sp, #132	@ 0x84
 8006ddc:	bd30      	pop	{r4, r5, pc}
 8006dde:	bf00      	nop
	...
 8006de8:	02000000 	.word	0x02000000
 8006dec:	00000000 	.word	0x00000000
 8006df0:	00000400 	.word	0x00000400
 8006df4:	00000002 	.word	0x00000002
 8006df8:	24000968 	.word	0x24000968
 8006dfc:	40010000 	.word	0x40010000
 8006e00:	58024400 	.word	0x58024400
 8006e04:	58021000 	.word	0x58021000

08006e08 <HAL_TIM_PWM_MspInit>:
  if(tim_pwmHandle->Instance==TIM1)
 8006e08:	4b0a      	ldr	r3, [pc, #40]	@ (8006e34 <HAL_TIM_PWM_MspInit+0x2c>)
 8006e0a:	6802      	ldr	r2, [r0, #0]
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d000      	beq.n	8006e12 <HAL_TIM_PWM_MspInit+0xa>
 8006e10:	4770      	bx	lr
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006e12:	4b09      	ldr	r3, [pc, #36]	@ (8006e38 <HAL_TIM_PWM_MspInit+0x30>)
{
 8006e14:	b082      	sub	sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006e16:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8006e1a:	f042 0201 	orr.w	r2, r2, #1
 8006e1e:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 8006e22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e26:	f003 0301 	and.w	r3, r3, #1
 8006e2a:	9301      	str	r3, [sp, #4]
 8006e2c:	9b01      	ldr	r3, [sp, #4]
}
 8006e2e:	b002      	add	sp, #8
 8006e30:	4770      	bx	lr
 8006e32:	bf00      	nop
 8006e34:	40010000 	.word	0x40010000
 8006e38:	58024400 	.word	0x58024400

08006e3c <UART_Init>:
  HAL_UART_Transmit(&UartHandle, (uint8_t *)&ch, 1, 0xFFFF);

  return ch;
}

void UART_Init(void){
 8006e3c:	b530      	push	{r4, r5, lr}
 8006e3e:	b0b1      	sub	sp, #196	@ 0xc4
	RCC_PeriphCLKInitTypeDef RCC_PeriphClkInit;
	
	/* Select SysClk as source of USART1 clocks */
  RCC_PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART16;
  RCC_PeriphClkInit.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8006e40:	2400      	movs	r4, #0
  RCC_PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART16;
 8006e42:	2301      	movs	r3, #1
  HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphClkInit);

  /* Enable USARTx clock */
  __HAL_RCC_USART1_CLK_ENABLE();
	
  UartHandle.Instance        = USART1;
 8006e44:	4d13      	ldr	r5, [pc, #76]	@ (8006e94 <UART_Init+0x58>)
  HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphClkInit);
 8006e46:	a801      	add	r0, sp, #4
  RCC_PeriphClkInit.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8006e48:	941f      	str	r4, [sp, #124]	@ 0x7c
  RCC_PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART16;
 8006e4a:	9301      	str	r3, [sp, #4]
  HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphClkInit);
 8006e4c:	f7fd f85e 	bl	8003f0c <HAL_RCCEx_PeriphCLKConfig>
  __HAL_RCC_USART1_CLK_ENABLE();
 8006e50:	4b11      	ldr	r3, [pc, #68]	@ (8006e98 <UART_Init+0x5c>)
  UartHandle.Init.BaudRate   = 115200;
 8006e52:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
  UartHandle.Instance        = USART1;
 8006e56:	4811      	ldr	r0, [pc, #68]	@ (8006e9c <UART_Init+0x60>)
  __HAL_RCC_USART1_CLK_ENABLE();
 8006e58:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 8006e5c:	6104      	str	r4, [r0, #16]
  __HAL_RCC_USART1_CLK_ENABLE();
 8006e5e:	f042 0210 	orr.w	r2, r2, #16
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8006e62:	e9c0 4402 	strd	r4, r4, [r0, #8]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 8006e66:	e9c0 4406 	strd	r4, r4, [r0, #24]
  __HAL_RCC_USART1_CLK_ENABLE();
 8006e6a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8006e6e:	220c      	movs	r2, #12
  __HAL_RCC_USART1_CLK_ENABLE();
 8006e70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8006e74:	6142      	str	r2, [r0, #20]
  __HAL_RCC_USART1_CLK_ENABLE();
 8006e76:	f003 0310 	and.w	r3, r3, #16
 8006e7a:	9300      	str	r3, [sp, #0]
 8006e7c:	9b00      	ldr	r3, [sp, #0]
  UartHandle.Init.BaudRate   = 115200;
 8006e7e:	e9c0 5100 	strd	r5, r1, [r0]

  if(HAL_UART_Init(&UartHandle) != HAL_OK)
 8006e82:	f7ff fbfd 	bl	8006680 <HAL_UART_Init>
 8006e86:	b908      	cbnz	r0, 8006e8c <UART_Init+0x50>
  {
    /* Initialization Error */
    Error_Handler();
  }
}
 8006e88:	b031      	add	sp, #196	@ 0xc4
 8006e8a:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8006e8c:	f7ff fcf6 	bl	800687c <Error_Handler>
}
 8006e90:	b031      	add	sp, #196	@ 0xc4
 8006e92:	bd30      	pop	{r4, r5, pc}
 8006e94:	40011000 	.word	0x40011000
 8006e98:	58024400 	.word	0x58024400
 8006e9c:	240009b8 	.word	0x240009b8

08006ea0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006ea0:	480d      	ldr	r0, [pc, #52]	@ (8006ed8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006ea2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8006ea4:	f7ff fed4 	bl	8006c50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006ea8:	480c      	ldr	r0, [pc, #48]	@ (8006edc <LoopForever+0x6>)
  ldr r1, =_edata
 8006eaa:	490d      	ldr	r1, [pc, #52]	@ (8006ee0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006eac:	4a0d      	ldr	r2, [pc, #52]	@ (8006ee4 <LoopForever+0xe>)
  movs r3, #0
 8006eae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006eb0:	e002      	b.n	8006eb8 <LoopCopyDataInit>

08006eb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006eb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006eb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006eb6:	3304      	adds	r3, #4

08006eb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006eb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006eba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006ebc:	d3f9      	bcc.n	8006eb2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006ebe:	4a0a      	ldr	r2, [pc, #40]	@ (8006ee8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006ec0:	4c0a      	ldr	r4, [pc, #40]	@ (8006eec <LoopForever+0x16>)
  movs r3, #0
 8006ec2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006ec4:	e001      	b.n	8006eca <LoopFillZerobss>

08006ec6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006ec6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006ec8:	3204      	adds	r2, #4

08006eca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006eca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006ecc:	d3fb      	bcc.n	8006ec6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8006ece:	f000 fd79 	bl	80079c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006ed2:	f7ff fd49 	bl	8006968 <main>

08006ed6 <LoopForever>:

LoopForever:
  b LoopForever
 8006ed6:	e7fe      	b.n	8006ed6 <LoopForever>
  ldr   r0, =_estack
 8006ed8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8006edc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8006ee0:	24000248 	.word	0x24000248
  ldr r2, =_sidata
 8006ee4:	08010c6c 	.word	0x08010c6c
  ldr r2, =_sbss
 8006ee8:	24000248 	.word	0x24000248
  ldr r4, =_ebss
 8006eec:	24000b98 	.word	0x24000b98

08006ef0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006ef0:	e7fe      	b.n	8006ef0 <ADC1_2_IRQHandler>

08006ef2 <__cvt>:
 8006ef2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ef4:	ed2d 8b02 	vpush	{d8}
 8006ef8:	eeb0 8b40 	vmov.f64	d8, d0
 8006efc:	b085      	sub	sp, #20
 8006efe:	4617      	mov	r7, r2
 8006f00:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8006f02:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006f04:	ee18 2a90 	vmov	r2, s17
 8006f08:	f025 0520 	bic.w	r5, r5, #32
 8006f0c:	2a00      	cmp	r2, #0
 8006f0e:	bfb6      	itet	lt
 8006f10:	222d      	movlt	r2, #45	@ 0x2d
 8006f12:	2200      	movge	r2, #0
 8006f14:	eeb1 8b40 	vneglt.f64	d8, d0
 8006f18:	2d46      	cmp	r5, #70	@ 0x46
 8006f1a:	460c      	mov	r4, r1
 8006f1c:	701a      	strb	r2, [r3, #0]
 8006f1e:	d004      	beq.n	8006f2a <__cvt+0x38>
 8006f20:	2d45      	cmp	r5, #69	@ 0x45
 8006f22:	d100      	bne.n	8006f26 <__cvt+0x34>
 8006f24:	3401      	adds	r4, #1
 8006f26:	2102      	movs	r1, #2
 8006f28:	e000      	b.n	8006f2c <__cvt+0x3a>
 8006f2a:	2103      	movs	r1, #3
 8006f2c:	ab03      	add	r3, sp, #12
 8006f2e:	9301      	str	r3, [sp, #4]
 8006f30:	ab02      	add	r3, sp, #8
 8006f32:	9300      	str	r3, [sp, #0]
 8006f34:	4622      	mov	r2, r4
 8006f36:	4633      	mov	r3, r6
 8006f38:	eeb0 0b48 	vmov.f64	d0, d8
 8006f3c:	f000 fdf4 	bl	8007b28 <_dtoa_r>
 8006f40:	2d47      	cmp	r5, #71	@ 0x47
 8006f42:	d114      	bne.n	8006f6e <__cvt+0x7c>
 8006f44:	07fb      	lsls	r3, r7, #31
 8006f46:	d50a      	bpl.n	8006f5e <__cvt+0x6c>
 8006f48:	1902      	adds	r2, r0, r4
 8006f4a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f52:	bf08      	it	eq
 8006f54:	9203      	streq	r2, [sp, #12]
 8006f56:	2130      	movs	r1, #48	@ 0x30
 8006f58:	9b03      	ldr	r3, [sp, #12]
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d319      	bcc.n	8006f92 <__cvt+0xa0>
 8006f5e:	9b03      	ldr	r3, [sp, #12]
 8006f60:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006f62:	1a1b      	subs	r3, r3, r0
 8006f64:	6013      	str	r3, [r2, #0]
 8006f66:	b005      	add	sp, #20
 8006f68:	ecbd 8b02 	vpop	{d8}
 8006f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f6e:	2d46      	cmp	r5, #70	@ 0x46
 8006f70:	eb00 0204 	add.w	r2, r0, r4
 8006f74:	d1e9      	bne.n	8006f4a <__cvt+0x58>
 8006f76:	7803      	ldrb	r3, [r0, #0]
 8006f78:	2b30      	cmp	r3, #48	@ 0x30
 8006f7a:	d107      	bne.n	8006f8c <__cvt+0x9a>
 8006f7c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f84:	bf1c      	itt	ne
 8006f86:	f1c4 0401 	rsbne	r4, r4, #1
 8006f8a:	6034      	strne	r4, [r6, #0]
 8006f8c:	6833      	ldr	r3, [r6, #0]
 8006f8e:	441a      	add	r2, r3
 8006f90:	e7db      	b.n	8006f4a <__cvt+0x58>
 8006f92:	1c5c      	adds	r4, r3, #1
 8006f94:	9403      	str	r4, [sp, #12]
 8006f96:	7019      	strb	r1, [r3, #0]
 8006f98:	e7de      	b.n	8006f58 <__cvt+0x66>

08006f9a <__exponent>:
 8006f9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f9c:	2900      	cmp	r1, #0
 8006f9e:	bfba      	itte	lt
 8006fa0:	4249      	neglt	r1, r1
 8006fa2:	232d      	movlt	r3, #45	@ 0x2d
 8006fa4:	232b      	movge	r3, #43	@ 0x2b
 8006fa6:	2909      	cmp	r1, #9
 8006fa8:	7002      	strb	r2, [r0, #0]
 8006faa:	7043      	strb	r3, [r0, #1]
 8006fac:	dd29      	ble.n	8007002 <__exponent+0x68>
 8006fae:	f10d 0307 	add.w	r3, sp, #7
 8006fb2:	461d      	mov	r5, r3
 8006fb4:	270a      	movs	r7, #10
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	fbb1 f6f7 	udiv	r6, r1, r7
 8006fbc:	fb07 1416 	mls	r4, r7, r6, r1
 8006fc0:	3430      	adds	r4, #48	@ 0x30
 8006fc2:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006fc6:	460c      	mov	r4, r1
 8006fc8:	2c63      	cmp	r4, #99	@ 0x63
 8006fca:	f103 33ff 	add.w	r3, r3, #4294967295
 8006fce:	4631      	mov	r1, r6
 8006fd0:	dcf1      	bgt.n	8006fb6 <__exponent+0x1c>
 8006fd2:	3130      	adds	r1, #48	@ 0x30
 8006fd4:	1e94      	subs	r4, r2, #2
 8006fd6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006fda:	1c41      	adds	r1, r0, #1
 8006fdc:	4623      	mov	r3, r4
 8006fde:	42ab      	cmp	r3, r5
 8006fe0:	d30a      	bcc.n	8006ff8 <__exponent+0x5e>
 8006fe2:	f10d 0309 	add.w	r3, sp, #9
 8006fe6:	1a9b      	subs	r3, r3, r2
 8006fe8:	42ac      	cmp	r4, r5
 8006fea:	bf88      	it	hi
 8006fec:	2300      	movhi	r3, #0
 8006fee:	3302      	adds	r3, #2
 8006ff0:	4403      	add	r3, r0
 8006ff2:	1a18      	subs	r0, r3, r0
 8006ff4:	b003      	add	sp, #12
 8006ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ff8:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006ffc:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007000:	e7ed      	b.n	8006fde <__exponent+0x44>
 8007002:	2330      	movs	r3, #48	@ 0x30
 8007004:	3130      	adds	r1, #48	@ 0x30
 8007006:	7083      	strb	r3, [r0, #2]
 8007008:	70c1      	strb	r1, [r0, #3]
 800700a:	1d03      	adds	r3, r0, #4
 800700c:	e7f1      	b.n	8006ff2 <__exponent+0x58>
	...

08007010 <_printf_float>:
 8007010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007014:	b08d      	sub	sp, #52	@ 0x34
 8007016:	460c      	mov	r4, r1
 8007018:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800701c:	4616      	mov	r6, r2
 800701e:	461f      	mov	r7, r3
 8007020:	4605      	mov	r5, r0
 8007022:	f000 fccb 	bl	80079bc <_localeconv_r>
 8007026:	f8d0 b000 	ldr.w	fp, [r0]
 800702a:	4658      	mov	r0, fp
 800702c:	f7f9 f9a8 	bl	8000380 <strlen>
 8007030:	2300      	movs	r3, #0
 8007032:	930a      	str	r3, [sp, #40]	@ 0x28
 8007034:	f8d8 3000 	ldr.w	r3, [r8]
 8007038:	f894 9018 	ldrb.w	r9, [r4, #24]
 800703c:	6822      	ldr	r2, [r4, #0]
 800703e:	9005      	str	r0, [sp, #20]
 8007040:	3307      	adds	r3, #7
 8007042:	f023 0307 	bic.w	r3, r3, #7
 8007046:	f103 0108 	add.w	r1, r3, #8
 800704a:	f8c8 1000 	str.w	r1, [r8]
 800704e:	ed93 0b00 	vldr	d0, [r3]
 8007052:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80072b0 <_printf_float+0x2a0>
 8007056:	eeb0 7bc0 	vabs.f64	d7, d0
 800705a:	eeb4 7b46 	vcmp.f64	d7, d6
 800705e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007062:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8007066:	dd24      	ble.n	80070b2 <_printf_float+0xa2>
 8007068:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800706c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007070:	d502      	bpl.n	8007078 <_printf_float+0x68>
 8007072:	232d      	movs	r3, #45	@ 0x2d
 8007074:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007078:	498f      	ldr	r1, [pc, #572]	@ (80072b8 <_printf_float+0x2a8>)
 800707a:	4b90      	ldr	r3, [pc, #576]	@ (80072bc <_printf_float+0x2ac>)
 800707c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8007080:	bf8c      	ite	hi
 8007082:	4688      	movhi	r8, r1
 8007084:	4698      	movls	r8, r3
 8007086:	f022 0204 	bic.w	r2, r2, #4
 800708a:	2303      	movs	r3, #3
 800708c:	6123      	str	r3, [r4, #16]
 800708e:	6022      	str	r2, [r4, #0]
 8007090:	f04f 0a00 	mov.w	sl, #0
 8007094:	9700      	str	r7, [sp, #0]
 8007096:	4633      	mov	r3, r6
 8007098:	aa0b      	add	r2, sp, #44	@ 0x2c
 800709a:	4621      	mov	r1, r4
 800709c:	4628      	mov	r0, r5
 800709e:	f000 f9d1 	bl	8007444 <_printf_common>
 80070a2:	3001      	adds	r0, #1
 80070a4:	f040 8089 	bne.w	80071ba <_printf_float+0x1aa>
 80070a8:	f04f 30ff 	mov.w	r0, #4294967295
 80070ac:	b00d      	add	sp, #52	@ 0x34
 80070ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070b2:	eeb4 0b40 	vcmp.f64	d0, d0
 80070b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070ba:	d709      	bvc.n	80070d0 <_printf_float+0xc0>
 80070bc:	ee10 3a90 	vmov	r3, s1
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	bfbc      	itt	lt
 80070c4:	232d      	movlt	r3, #45	@ 0x2d
 80070c6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80070ca:	497d      	ldr	r1, [pc, #500]	@ (80072c0 <_printf_float+0x2b0>)
 80070cc:	4b7d      	ldr	r3, [pc, #500]	@ (80072c4 <_printf_float+0x2b4>)
 80070ce:	e7d5      	b.n	800707c <_printf_float+0x6c>
 80070d0:	6863      	ldr	r3, [r4, #4]
 80070d2:	1c59      	adds	r1, r3, #1
 80070d4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 80070d8:	d139      	bne.n	800714e <_printf_float+0x13e>
 80070da:	2306      	movs	r3, #6
 80070dc:	6063      	str	r3, [r4, #4]
 80070de:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80070e2:	2300      	movs	r3, #0
 80070e4:	6022      	str	r2, [r4, #0]
 80070e6:	9303      	str	r3, [sp, #12]
 80070e8:	ab0a      	add	r3, sp, #40	@ 0x28
 80070ea:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80070ee:	ab09      	add	r3, sp, #36	@ 0x24
 80070f0:	9300      	str	r3, [sp, #0]
 80070f2:	6861      	ldr	r1, [r4, #4]
 80070f4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80070f8:	4628      	mov	r0, r5
 80070fa:	f7ff fefa 	bl	8006ef2 <__cvt>
 80070fe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007102:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007104:	4680      	mov	r8, r0
 8007106:	d129      	bne.n	800715c <_printf_float+0x14c>
 8007108:	1cc8      	adds	r0, r1, #3
 800710a:	db02      	blt.n	8007112 <_printf_float+0x102>
 800710c:	6863      	ldr	r3, [r4, #4]
 800710e:	4299      	cmp	r1, r3
 8007110:	dd41      	ble.n	8007196 <_printf_float+0x186>
 8007112:	f1a9 0902 	sub.w	r9, r9, #2
 8007116:	fa5f f989 	uxtb.w	r9, r9
 800711a:	3901      	subs	r1, #1
 800711c:	464a      	mov	r2, r9
 800711e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007122:	9109      	str	r1, [sp, #36]	@ 0x24
 8007124:	f7ff ff39 	bl	8006f9a <__exponent>
 8007128:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800712a:	1813      	adds	r3, r2, r0
 800712c:	2a01      	cmp	r2, #1
 800712e:	4682      	mov	sl, r0
 8007130:	6123      	str	r3, [r4, #16]
 8007132:	dc02      	bgt.n	800713a <_printf_float+0x12a>
 8007134:	6822      	ldr	r2, [r4, #0]
 8007136:	07d2      	lsls	r2, r2, #31
 8007138:	d501      	bpl.n	800713e <_printf_float+0x12e>
 800713a:	3301      	adds	r3, #1
 800713c:	6123      	str	r3, [r4, #16]
 800713e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007142:	2b00      	cmp	r3, #0
 8007144:	d0a6      	beq.n	8007094 <_printf_float+0x84>
 8007146:	232d      	movs	r3, #45	@ 0x2d
 8007148:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800714c:	e7a2      	b.n	8007094 <_printf_float+0x84>
 800714e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007152:	d1c4      	bne.n	80070de <_printf_float+0xce>
 8007154:	2b00      	cmp	r3, #0
 8007156:	d1c2      	bne.n	80070de <_printf_float+0xce>
 8007158:	2301      	movs	r3, #1
 800715a:	e7bf      	b.n	80070dc <_printf_float+0xcc>
 800715c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8007160:	d9db      	bls.n	800711a <_printf_float+0x10a>
 8007162:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8007166:	d118      	bne.n	800719a <_printf_float+0x18a>
 8007168:	2900      	cmp	r1, #0
 800716a:	6863      	ldr	r3, [r4, #4]
 800716c:	dd0b      	ble.n	8007186 <_printf_float+0x176>
 800716e:	6121      	str	r1, [r4, #16]
 8007170:	b913      	cbnz	r3, 8007178 <_printf_float+0x168>
 8007172:	6822      	ldr	r2, [r4, #0]
 8007174:	07d0      	lsls	r0, r2, #31
 8007176:	d502      	bpl.n	800717e <_printf_float+0x16e>
 8007178:	3301      	adds	r3, #1
 800717a:	440b      	add	r3, r1
 800717c:	6123      	str	r3, [r4, #16]
 800717e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007180:	f04f 0a00 	mov.w	sl, #0
 8007184:	e7db      	b.n	800713e <_printf_float+0x12e>
 8007186:	b913      	cbnz	r3, 800718e <_printf_float+0x17e>
 8007188:	6822      	ldr	r2, [r4, #0]
 800718a:	07d2      	lsls	r2, r2, #31
 800718c:	d501      	bpl.n	8007192 <_printf_float+0x182>
 800718e:	3302      	adds	r3, #2
 8007190:	e7f4      	b.n	800717c <_printf_float+0x16c>
 8007192:	2301      	movs	r3, #1
 8007194:	e7f2      	b.n	800717c <_printf_float+0x16c>
 8007196:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800719a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800719c:	4299      	cmp	r1, r3
 800719e:	db05      	blt.n	80071ac <_printf_float+0x19c>
 80071a0:	6823      	ldr	r3, [r4, #0]
 80071a2:	6121      	str	r1, [r4, #16]
 80071a4:	07d8      	lsls	r0, r3, #31
 80071a6:	d5ea      	bpl.n	800717e <_printf_float+0x16e>
 80071a8:	1c4b      	adds	r3, r1, #1
 80071aa:	e7e7      	b.n	800717c <_printf_float+0x16c>
 80071ac:	2900      	cmp	r1, #0
 80071ae:	bfd4      	ite	le
 80071b0:	f1c1 0202 	rsble	r2, r1, #2
 80071b4:	2201      	movgt	r2, #1
 80071b6:	4413      	add	r3, r2
 80071b8:	e7e0      	b.n	800717c <_printf_float+0x16c>
 80071ba:	6823      	ldr	r3, [r4, #0]
 80071bc:	055a      	lsls	r2, r3, #21
 80071be:	d407      	bmi.n	80071d0 <_printf_float+0x1c0>
 80071c0:	6923      	ldr	r3, [r4, #16]
 80071c2:	4642      	mov	r2, r8
 80071c4:	4631      	mov	r1, r6
 80071c6:	4628      	mov	r0, r5
 80071c8:	47b8      	blx	r7
 80071ca:	3001      	adds	r0, #1
 80071cc:	d12a      	bne.n	8007224 <_printf_float+0x214>
 80071ce:	e76b      	b.n	80070a8 <_printf_float+0x98>
 80071d0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80071d4:	f240 80e0 	bls.w	8007398 <_printf_float+0x388>
 80071d8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80071dc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80071e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071e4:	d133      	bne.n	800724e <_printf_float+0x23e>
 80071e6:	4a38      	ldr	r2, [pc, #224]	@ (80072c8 <_printf_float+0x2b8>)
 80071e8:	2301      	movs	r3, #1
 80071ea:	4631      	mov	r1, r6
 80071ec:	4628      	mov	r0, r5
 80071ee:	47b8      	blx	r7
 80071f0:	3001      	adds	r0, #1
 80071f2:	f43f af59 	beq.w	80070a8 <_printf_float+0x98>
 80071f6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80071fa:	4543      	cmp	r3, r8
 80071fc:	db02      	blt.n	8007204 <_printf_float+0x1f4>
 80071fe:	6823      	ldr	r3, [r4, #0]
 8007200:	07d8      	lsls	r0, r3, #31
 8007202:	d50f      	bpl.n	8007224 <_printf_float+0x214>
 8007204:	9b05      	ldr	r3, [sp, #20]
 8007206:	465a      	mov	r2, fp
 8007208:	4631      	mov	r1, r6
 800720a:	4628      	mov	r0, r5
 800720c:	47b8      	blx	r7
 800720e:	3001      	adds	r0, #1
 8007210:	f43f af4a 	beq.w	80070a8 <_printf_float+0x98>
 8007214:	f04f 0900 	mov.w	r9, #0
 8007218:	f108 38ff 	add.w	r8, r8, #4294967295
 800721c:	f104 0a1a 	add.w	sl, r4, #26
 8007220:	45c8      	cmp	r8, r9
 8007222:	dc09      	bgt.n	8007238 <_printf_float+0x228>
 8007224:	6823      	ldr	r3, [r4, #0]
 8007226:	079b      	lsls	r3, r3, #30
 8007228:	f100 8107 	bmi.w	800743a <_printf_float+0x42a>
 800722c:	68e0      	ldr	r0, [r4, #12]
 800722e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007230:	4298      	cmp	r0, r3
 8007232:	bfb8      	it	lt
 8007234:	4618      	movlt	r0, r3
 8007236:	e739      	b.n	80070ac <_printf_float+0x9c>
 8007238:	2301      	movs	r3, #1
 800723a:	4652      	mov	r2, sl
 800723c:	4631      	mov	r1, r6
 800723e:	4628      	mov	r0, r5
 8007240:	47b8      	blx	r7
 8007242:	3001      	adds	r0, #1
 8007244:	f43f af30 	beq.w	80070a8 <_printf_float+0x98>
 8007248:	f109 0901 	add.w	r9, r9, #1
 800724c:	e7e8      	b.n	8007220 <_printf_float+0x210>
 800724e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007250:	2b00      	cmp	r3, #0
 8007252:	dc3b      	bgt.n	80072cc <_printf_float+0x2bc>
 8007254:	4a1c      	ldr	r2, [pc, #112]	@ (80072c8 <_printf_float+0x2b8>)
 8007256:	2301      	movs	r3, #1
 8007258:	4631      	mov	r1, r6
 800725a:	4628      	mov	r0, r5
 800725c:	47b8      	blx	r7
 800725e:	3001      	adds	r0, #1
 8007260:	f43f af22 	beq.w	80070a8 <_printf_float+0x98>
 8007264:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007268:	ea59 0303 	orrs.w	r3, r9, r3
 800726c:	d102      	bne.n	8007274 <_printf_float+0x264>
 800726e:	6823      	ldr	r3, [r4, #0]
 8007270:	07d9      	lsls	r1, r3, #31
 8007272:	d5d7      	bpl.n	8007224 <_printf_float+0x214>
 8007274:	9b05      	ldr	r3, [sp, #20]
 8007276:	465a      	mov	r2, fp
 8007278:	4631      	mov	r1, r6
 800727a:	4628      	mov	r0, r5
 800727c:	47b8      	blx	r7
 800727e:	3001      	adds	r0, #1
 8007280:	f43f af12 	beq.w	80070a8 <_printf_float+0x98>
 8007284:	f04f 0a00 	mov.w	sl, #0
 8007288:	f104 0b1a 	add.w	fp, r4, #26
 800728c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800728e:	425b      	negs	r3, r3
 8007290:	4553      	cmp	r3, sl
 8007292:	dc01      	bgt.n	8007298 <_printf_float+0x288>
 8007294:	464b      	mov	r3, r9
 8007296:	e794      	b.n	80071c2 <_printf_float+0x1b2>
 8007298:	2301      	movs	r3, #1
 800729a:	465a      	mov	r2, fp
 800729c:	4631      	mov	r1, r6
 800729e:	4628      	mov	r0, r5
 80072a0:	47b8      	blx	r7
 80072a2:	3001      	adds	r0, #1
 80072a4:	f43f af00 	beq.w	80070a8 <_printf_float+0x98>
 80072a8:	f10a 0a01 	add.w	sl, sl, #1
 80072ac:	e7ee      	b.n	800728c <_printf_float+0x27c>
 80072ae:	bf00      	nop
 80072b0:	ffffffff 	.word	0xffffffff
 80072b4:	7fefffff 	.word	0x7fefffff
 80072b8:	080108ec 	.word	0x080108ec
 80072bc:	080108e8 	.word	0x080108e8
 80072c0:	080108f4 	.word	0x080108f4
 80072c4:	080108f0 	.word	0x080108f0
 80072c8:	080108f8 	.word	0x080108f8
 80072cc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80072ce:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80072d2:	4553      	cmp	r3, sl
 80072d4:	bfa8      	it	ge
 80072d6:	4653      	movge	r3, sl
 80072d8:	2b00      	cmp	r3, #0
 80072da:	4699      	mov	r9, r3
 80072dc:	dc37      	bgt.n	800734e <_printf_float+0x33e>
 80072de:	2300      	movs	r3, #0
 80072e0:	9307      	str	r3, [sp, #28]
 80072e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80072e6:	f104 021a 	add.w	r2, r4, #26
 80072ea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80072ec:	9907      	ldr	r1, [sp, #28]
 80072ee:	9306      	str	r3, [sp, #24]
 80072f0:	eba3 0309 	sub.w	r3, r3, r9
 80072f4:	428b      	cmp	r3, r1
 80072f6:	dc31      	bgt.n	800735c <_printf_float+0x34c>
 80072f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072fa:	459a      	cmp	sl, r3
 80072fc:	dc3b      	bgt.n	8007376 <_printf_float+0x366>
 80072fe:	6823      	ldr	r3, [r4, #0]
 8007300:	07da      	lsls	r2, r3, #31
 8007302:	d438      	bmi.n	8007376 <_printf_float+0x366>
 8007304:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007306:	ebaa 0903 	sub.w	r9, sl, r3
 800730a:	9b06      	ldr	r3, [sp, #24]
 800730c:	ebaa 0303 	sub.w	r3, sl, r3
 8007310:	4599      	cmp	r9, r3
 8007312:	bfa8      	it	ge
 8007314:	4699      	movge	r9, r3
 8007316:	f1b9 0f00 	cmp.w	r9, #0
 800731a:	dc34      	bgt.n	8007386 <_printf_float+0x376>
 800731c:	f04f 0800 	mov.w	r8, #0
 8007320:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007324:	f104 0b1a 	add.w	fp, r4, #26
 8007328:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800732a:	ebaa 0303 	sub.w	r3, sl, r3
 800732e:	eba3 0309 	sub.w	r3, r3, r9
 8007332:	4543      	cmp	r3, r8
 8007334:	f77f af76 	ble.w	8007224 <_printf_float+0x214>
 8007338:	2301      	movs	r3, #1
 800733a:	465a      	mov	r2, fp
 800733c:	4631      	mov	r1, r6
 800733e:	4628      	mov	r0, r5
 8007340:	47b8      	blx	r7
 8007342:	3001      	adds	r0, #1
 8007344:	f43f aeb0 	beq.w	80070a8 <_printf_float+0x98>
 8007348:	f108 0801 	add.w	r8, r8, #1
 800734c:	e7ec      	b.n	8007328 <_printf_float+0x318>
 800734e:	4642      	mov	r2, r8
 8007350:	4631      	mov	r1, r6
 8007352:	4628      	mov	r0, r5
 8007354:	47b8      	blx	r7
 8007356:	3001      	adds	r0, #1
 8007358:	d1c1      	bne.n	80072de <_printf_float+0x2ce>
 800735a:	e6a5      	b.n	80070a8 <_printf_float+0x98>
 800735c:	2301      	movs	r3, #1
 800735e:	4631      	mov	r1, r6
 8007360:	4628      	mov	r0, r5
 8007362:	9206      	str	r2, [sp, #24]
 8007364:	47b8      	blx	r7
 8007366:	3001      	adds	r0, #1
 8007368:	f43f ae9e 	beq.w	80070a8 <_printf_float+0x98>
 800736c:	9b07      	ldr	r3, [sp, #28]
 800736e:	9a06      	ldr	r2, [sp, #24]
 8007370:	3301      	adds	r3, #1
 8007372:	9307      	str	r3, [sp, #28]
 8007374:	e7b9      	b.n	80072ea <_printf_float+0x2da>
 8007376:	9b05      	ldr	r3, [sp, #20]
 8007378:	465a      	mov	r2, fp
 800737a:	4631      	mov	r1, r6
 800737c:	4628      	mov	r0, r5
 800737e:	47b8      	blx	r7
 8007380:	3001      	adds	r0, #1
 8007382:	d1bf      	bne.n	8007304 <_printf_float+0x2f4>
 8007384:	e690      	b.n	80070a8 <_printf_float+0x98>
 8007386:	9a06      	ldr	r2, [sp, #24]
 8007388:	464b      	mov	r3, r9
 800738a:	4442      	add	r2, r8
 800738c:	4631      	mov	r1, r6
 800738e:	4628      	mov	r0, r5
 8007390:	47b8      	blx	r7
 8007392:	3001      	adds	r0, #1
 8007394:	d1c2      	bne.n	800731c <_printf_float+0x30c>
 8007396:	e687      	b.n	80070a8 <_printf_float+0x98>
 8007398:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800739c:	f1b9 0f01 	cmp.w	r9, #1
 80073a0:	dc01      	bgt.n	80073a6 <_printf_float+0x396>
 80073a2:	07db      	lsls	r3, r3, #31
 80073a4:	d536      	bpl.n	8007414 <_printf_float+0x404>
 80073a6:	2301      	movs	r3, #1
 80073a8:	4642      	mov	r2, r8
 80073aa:	4631      	mov	r1, r6
 80073ac:	4628      	mov	r0, r5
 80073ae:	47b8      	blx	r7
 80073b0:	3001      	adds	r0, #1
 80073b2:	f43f ae79 	beq.w	80070a8 <_printf_float+0x98>
 80073b6:	9b05      	ldr	r3, [sp, #20]
 80073b8:	465a      	mov	r2, fp
 80073ba:	4631      	mov	r1, r6
 80073bc:	4628      	mov	r0, r5
 80073be:	47b8      	blx	r7
 80073c0:	3001      	adds	r0, #1
 80073c2:	f43f ae71 	beq.w	80070a8 <_printf_float+0x98>
 80073c6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80073ca:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80073ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073d2:	f109 39ff 	add.w	r9, r9, #4294967295
 80073d6:	d018      	beq.n	800740a <_printf_float+0x3fa>
 80073d8:	464b      	mov	r3, r9
 80073da:	f108 0201 	add.w	r2, r8, #1
 80073de:	4631      	mov	r1, r6
 80073e0:	4628      	mov	r0, r5
 80073e2:	47b8      	blx	r7
 80073e4:	3001      	adds	r0, #1
 80073e6:	d10c      	bne.n	8007402 <_printf_float+0x3f2>
 80073e8:	e65e      	b.n	80070a8 <_printf_float+0x98>
 80073ea:	2301      	movs	r3, #1
 80073ec:	465a      	mov	r2, fp
 80073ee:	4631      	mov	r1, r6
 80073f0:	4628      	mov	r0, r5
 80073f2:	47b8      	blx	r7
 80073f4:	3001      	adds	r0, #1
 80073f6:	f43f ae57 	beq.w	80070a8 <_printf_float+0x98>
 80073fa:	f108 0801 	add.w	r8, r8, #1
 80073fe:	45c8      	cmp	r8, r9
 8007400:	dbf3      	blt.n	80073ea <_printf_float+0x3da>
 8007402:	4653      	mov	r3, sl
 8007404:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007408:	e6dc      	b.n	80071c4 <_printf_float+0x1b4>
 800740a:	f04f 0800 	mov.w	r8, #0
 800740e:	f104 0b1a 	add.w	fp, r4, #26
 8007412:	e7f4      	b.n	80073fe <_printf_float+0x3ee>
 8007414:	2301      	movs	r3, #1
 8007416:	4642      	mov	r2, r8
 8007418:	e7e1      	b.n	80073de <_printf_float+0x3ce>
 800741a:	2301      	movs	r3, #1
 800741c:	464a      	mov	r2, r9
 800741e:	4631      	mov	r1, r6
 8007420:	4628      	mov	r0, r5
 8007422:	47b8      	blx	r7
 8007424:	3001      	adds	r0, #1
 8007426:	f43f ae3f 	beq.w	80070a8 <_printf_float+0x98>
 800742a:	f108 0801 	add.w	r8, r8, #1
 800742e:	68e3      	ldr	r3, [r4, #12]
 8007430:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007432:	1a5b      	subs	r3, r3, r1
 8007434:	4543      	cmp	r3, r8
 8007436:	dcf0      	bgt.n	800741a <_printf_float+0x40a>
 8007438:	e6f8      	b.n	800722c <_printf_float+0x21c>
 800743a:	f04f 0800 	mov.w	r8, #0
 800743e:	f104 0919 	add.w	r9, r4, #25
 8007442:	e7f4      	b.n	800742e <_printf_float+0x41e>

08007444 <_printf_common>:
 8007444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007448:	4616      	mov	r6, r2
 800744a:	4698      	mov	r8, r3
 800744c:	688a      	ldr	r2, [r1, #8]
 800744e:	690b      	ldr	r3, [r1, #16]
 8007450:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007454:	4293      	cmp	r3, r2
 8007456:	bfb8      	it	lt
 8007458:	4613      	movlt	r3, r2
 800745a:	6033      	str	r3, [r6, #0]
 800745c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007460:	4607      	mov	r7, r0
 8007462:	460c      	mov	r4, r1
 8007464:	b10a      	cbz	r2, 800746a <_printf_common+0x26>
 8007466:	3301      	adds	r3, #1
 8007468:	6033      	str	r3, [r6, #0]
 800746a:	6823      	ldr	r3, [r4, #0]
 800746c:	0699      	lsls	r1, r3, #26
 800746e:	bf42      	ittt	mi
 8007470:	6833      	ldrmi	r3, [r6, #0]
 8007472:	3302      	addmi	r3, #2
 8007474:	6033      	strmi	r3, [r6, #0]
 8007476:	6825      	ldr	r5, [r4, #0]
 8007478:	f015 0506 	ands.w	r5, r5, #6
 800747c:	d106      	bne.n	800748c <_printf_common+0x48>
 800747e:	f104 0a19 	add.w	sl, r4, #25
 8007482:	68e3      	ldr	r3, [r4, #12]
 8007484:	6832      	ldr	r2, [r6, #0]
 8007486:	1a9b      	subs	r3, r3, r2
 8007488:	42ab      	cmp	r3, r5
 800748a:	dc26      	bgt.n	80074da <_printf_common+0x96>
 800748c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007490:	6822      	ldr	r2, [r4, #0]
 8007492:	3b00      	subs	r3, #0
 8007494:	bf18      	it	ne
 8007496:	2301      	movne	r3, #1
 8007498:	0692      	lsls	r2, r2, #26
 800749a:	d42b      	bmi.n	80074f4 <_printf_common+0xb0>
 800749c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80074a0:	4641      	mov	r1, r8
 80074a2:	4638      	mov	r0, r7
 80074a4:	47c8      	blx	r9
 80074a6:	3001      	adds	r0, #1
 80074a8:	d01e      	beq.n	80074e8 <_printf_common+0xa4>
 80074aa:	6823      	ldr	r3, [r4, #0]
 80074ac:	6922      	ldr	r2, [r4, #16]
 80074ae:	f003 0306 	and.w	r3, r3, #6
 80074b2:	2b04      	cmp	r3, #4
 80074b4:	bf02      	ittt	eq
 80074b6:	68e5      	ldreq	r5, [r4, #12]
 80074b8:	6833      	ldreq	r3, [r6, #0]
 80074ba:	1aed      	subeq	r5, r5, r3
 80074bc:	68a3      	ldr	r3, [r4, #8]
 80074be:	bf0c      	ite	eq
 80074c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80074c4:	2500      	movne	r5, #0
 80074c6:	4293      	cmp	r3, r2
 80074c8:	bfc4      	itt	gt
 80074ca:	1a9b      	subgt	r3, r3, r2
 80074cc:	18ed      	addgt	r5, r5, r3
 80074ce:	2600      	movs	r6, #0
 80074d0:	341a      	adds	r4, #26
 80074d2:	42b5      	cmp	r5, r6
 80074d4:	d11a      	bne.n	800750c <_printf_common+0xc8>
 80074d6:	2000      	movs	r0, #0
 80074d8:	e008      	b.n	80074ec <_printf_common+0xa8>
 80074da:	2301      	movs	r3, #1
 80074dc:	4652      	mov	r2, sl
 80074de:	4641      	mov	r1, r8
 80074e0:	4638      	mov	r0, r7
 80074e2:	47c8      	blx	r9
 80074e4:	3001      	adds	r0, #1
 80074e6:	d103      	bne.n	80074f0 <_printf_common+0xac>
 80074e8:	f04f 30ff 	mov.w	r0, #4294967295
 80074ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074f0:	3501      	adds	r5, #1
 80074f2:	e7c6      	b.n	8007482 <_printf_common+0x3e>
 80074f4:	18e1      	adds	r1, r4, r3
 80074f6:	1c5a      	adds	r2, r3, #1
 80074f8:	2030      	movs	r0, #48	@ 0x30
 80074fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80074fe:	4422      	add	r2, r4
 8007500:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007504:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007508:	3302      	adds	r3, #2
 800750a:	e7c7      	b.n	800749c <_printf_common+0x58>
 800750c:	2301      	movs	r3, #1
 800750e:	4622      	mov	r2, r4
 8007510:	4641      	mov	r1, r8
 8007512:	4638      	mov	r0, r7
 8007514:	47c8      	blx	r9
 8007516:	3001      	adds	r0, #1
 8007518:	d0e6      	beq.n	80074e8 <_printf_common+0xa4>
 800751a:	3601      	adds	r6, #1
 800751c:	e7d9      	b.n	80074d2 <_printf_common+0x8e>
	...

08007520 <_printf_i>:
 8007520:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007524:	7e0f      	ldrb	r7, [r1, #24]
 8007526:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007528:	2f78      	cmp	r7, #120	@ 0x78
 800752a:	4691      	mov	r9, r2
 800752c:	4680      	mov	r8, r0
 800752e:	460c      	mov	r4, r1
 8007530:	469a      	mov	sl, r3
 8007532:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007536:	d807      	bhi.n	8007548 <_printf_i+0x28>
 8007538:	2f62      	cmp	r7, #98	@ 0x62
 800753a:	d80a      	bhi.n	8007552 <_printf_i+0x32>
 800753c:	2f00      	cmp	r7, #0
 800753e:	f000 80d1 	beq.w	80076e4 <_printf_i+0x1c4>
 8007542:	2f58      	cmp	r7, #88	@ 0x58
 8007544:	f000 80b8 	beq.w	80076b8 <_printf_i+0x198>
 8007548:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800754c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007550:	e03a      	b.n	80075c8 <_printf_i+0xa8>
 8007552:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007556:	2b15      	cmp	r3, #21
 8007558:	d8f6      	bhi.n	8007548 <_printf_i+0x28>
 800755a:	a101      	add	r1, pc, #4	@ (adr r1, 8007560 <_printf_i+0x40>)
 800755c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007560:	080075b9 	.word	0x080075b9
 8007564:	080075cd 	.word	0x080075cd
 8007568:	08007549 	.word	0x08007549
 800756c:	08007549 	.word	0x08007549
 8007570:	08007549 	.word	0x08007549
 8007574:	08007549 	.word	0x08007549
 8007578:	080075cd 	.word	0x080075cd
 800757c:	08007549 	.word	0x08007549
 8007580:	08007549 	.word	0x08007549
 8007584:	08007549 	.word	0x08007549
 8007588:	08007549 	.word	0x08007549
 800758c:	080076cb 	.word	0x080076cb
 8007590:	080075f7 	.word	0x080075f7
 8007594:	08007685 	.word	0x08007685
 8007598:	08007549 	.word	0x08007549
 800759c:	08007549 	.word	0x08007549
 80075a0:	080076ed 	.word	0x080076ed
 80075a4:	08007549 	.word	0x08007549
 80075a8:	080075f7 	.word	0x080075f7
 80075ac:	08007549 	.word	0x08007549
 80075b0:	08007549 	.word	0x08007549
 80075b4:	0800768d 	.word	0x0800768d
 80075b8:	6833      	ldr	r3, [r6, #0]
 80075ba:	1d1a      	adds	r2, r3, #4
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	6032      	str	r2, [r6, #0]
 80075c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80075c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80075c8:	2301      	movs	r3, #1
 80075ca:	e09c      	b.n	8007706 <_printf_i+0x1e6>
 80075cc:	6833      	ldr	r3, [r6, #0]
 80075ce:	6820      	ldr	r0, [r4, #0]
 80075d0:	1d19      	adds	r1, r3, #4
 80075d2:	6031      	str	r1, [r6, #0]
 80075d4:	0606      	lsls	r6, r0, #24
 80075d6:	d501      	bpl.n	80075dc <_printf_i+0xbc>
 80075d8:	681d      	ldr	r5, [r3, #0]
 80075da:	e003      	b.n	80075e4 <_printf_i+0xc4>
 80075dc:	0645      	lsls	r5, r0, #25
 80075de:	d5fb      	bpl.n	80075d8 <_printf_i+0xb8>
 80075e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80075e4:	2d00      	cmp	r5, #0
 80075e6:	da03      	bge.n	80075f0 <_printf_i+0xd0>
 80075e8:	232d      	movs	r3, #45	@ 0x2d
 80075ea:	426d      	negs	r5, r5
 80075ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80075f0:	4858      	ldr	r0, [pc, #352]	@ (8007754 <_printf_i+0x234>)
 80075f2:	230a      	movs	r3, #10
 80075f4:	e011      	b.n	800761a <_printf_i+0xfa>
 80075f6:	6821      	ldr	r1, [r4, #0]
 80075f8:	6833      	ldr	r3, [r6, #0]
 80075fa:	0608      	lsls	r0, r1, #24
 80075fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8007600:	d402      	bmi.n	8007608 <_printf_i+0xe8>
 8007602:	0649      	lsls	r1, r1, #25
 8007604:	bf48      	it	mi
 8007606:	b2ad      	uxthmi	r5, r5
 8007608:	2f6f      	cmp	r7, #111	@ 0x6f
 800760a:	4852      	ldr	r0, [pc, #328]	@ (8007754 <_printf_i+0x234>)
 800760c:	6033      	str	r3, [r6, #0]
 800760e:	bf14      	ite	ne
 8007610:	230a      	movne	r3, #10
 8007612:	2308      	moveq	r3, #8
 8007614:	2100      	movs	r1, #0
 8007616:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800761a:	6866      	ldr	r6, [r4, #4]
 800761c:	60a6      	str	r6, [r4, #8]
 800761e:	2e00      	cmp	r6, #0
 8007620:	db05      	blt.n	800762e <_printf_i+0x10e>
 8007622:	6821      	ldr	r1, [r4, #0]
 8007624:	432e      	orrs	r6, r5
 8007626:	f021 0104 	bic.w	r1, r1, #4
 800762a:	6021      	str	r1, [r4, #0]
 800762c:	d04b      	beq.n	80076c6 <_printf_i+0x1a6>
 800762e:	4616      	mov	r6, r2
 8007630:	fbb5 f1f3 	udiv	r1, r5, r3
 8007634:	fb03 5711 	mls	r7, r3, r1, r5
 8007638:	5dc7      	ldrb	r7, [r0, r7]
 800763a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800763e:	462f      	mov	r7, r5
 8007640:	42bb      	cmp	r3, r7
 8007642:	460d      	mov	r5, r1
 8007644:	d9f4      	bls.n	8007630 <_printf_i+0x110>
 8007646:	2b08      	cmp	r3, #8
 8007648:	d10b      	bne.n	8007662 <_printf_i+0x142>
 800764a:	6823      	ldr	r3, [r4, #0]
 800764c:	07df      	lsls	r7, r3, #31
 800764e:	d508      	bpl.n	8007662 <_printf_i+0x142>
 8007650:	6923      	ldr	r3, [r4, #16]
 8007652:	6861      	ldr	r1, [r4, #4]
 8007654:	4299      	cmp	r1, r3
 8007656:	bfde      	ittt	le
 8007658:	2330      	movle	r3, #48	@ 0x30
 800765a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800765e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007662:	1b92      	subs	r2, r2, r6
 8007664:	6122      	str	r2, [r4, #16]
 8007666:	f8cd a000 	str.w	sl, [sp]
 800766a:	464b      	mov	r3, r9
 800766c:	aa03      	add	r2, sp, #12
 800766e:	4621      	mov	r1, r4
 8007670:	4640      	mov	r0, r8
 8007672:	f7ff fee7 	bl	8007444 <_printf_common>
 8007676:	3001      	adds	r0, #1
 8007678:	d14a      	bne.n	8007710 <_printf_i+0x1f0>
 800767a:	f04f 30ff 	mov.w	r0, #4294967295
 800767e:	b004      	add	sp, #16
 8007680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007684:	6823      	ldr	r3, [r4, #0]
 8007686:	f043 0320 	orr.w	r3, r3, #32
 800768a:	6023      	str	r3, [r4, #0]
 800768c:	4832      	ldr	r0, [pc, #200]	@ (8007758 <_printf_i+0x238>)
 800768e:	2778      	movs	r7, #120	@ 0x78
 8007690:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007694:	6823      	ldr	r3, [r4, #0]
 8007696:	6831      	ldr	r1, [r6, #0]
 8007698:	061f      	lsls	r7, r3, #24
 800769a:	f851 5b04 	ldr.w	r5, [r1], #4
 800769e:	d402      	bmi.n	80076a6 <_printf_i+0x186>
 80076a0:	065f      	lsls	r7, r3, #25
 80076a2:	bf48      	it	mi
 80076a4:	b2ad      	uxthmi	r5, r5
 80076a6:	6031      	str	r1, [r6, #0]
 80076a8:	07d9      	lsls	r1, r3, #31
 80076aa:	bf44      	itt	mi
 80076ac:	f043 0320 	orrmi.w	r3, r3, #32
 80076b0:	6023      	strmi	r3, [r4, #0]
 80076b2:	b11d      	cbz	r5, 80076bc <_printf_i+0x19c>
 80076b4:	2310      	movs	r3, #16
 80076b6:	e7ad      	b.n	8007614 <_printf_i+0xf4>
 80076b8:	4826      	ldr	r0, [pc, #152]	@ (8007754 <_printf_i+0x234>)
 80076ba:	e7e9      	b.n	8007690 <_printf_i+0x170>
 80076bc:	6823      	ldr	r3, [r4, #0]
 80076be:	f023 0320 	bic.w	r3, r3, #32
 80076c2:	6023      	str	r3, [r4, #0]
 80076c4:	e7f6      	b.n	80076b4 <_printf_i+0x194>
 80076c6:	4616      	mov	r6, r2
 80076c8:	e7bd      	b.n	8007646 <_printf_i+0x126>
 80076ca:	6833      	ldr	r3, [r6, #0]
 80076cc:	6825      	ldr	r5, [r4, #0]
 80076ce:	6961      	ldr	r1, [r4, #20]
 80076d0:	1d18      	adds	r0, r3, #4
 80076d2:	6030      	str	r0, [r6, #0]
 80076d4:	062e      	lsls	r6, r5, #24
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	d501      	bpl.n	80076de <_printf_i+0x1be>
 80076da:	6019      	str	r1, [r3, #0]
 80076dc:	e002      	b.n	80076e4 <_printf_i+0x1c4>
 80076de:	0668      	lsls	r0, r5, #25
 80076e0:	d5fb      	bpl.n	80076da <_printf_i+0x1ba>
 80076e2:	8019      	strh	r1, [r3, #0]
 80076e4:	2300      	movs	r3, #0
 80076e6:	6123      	str	r3, [r4, #16]
 80076e8:	4616      	mov	r6, r2
 80076ea:	e7bc      	b.n	8007666 <_printf_i+0x146>
 80076ec:	6833      	ldr	r3, [r6, #0]
 80076ee:	1d1a      	adds	r2, r3, #4
 80076f0:	6032      	str	r2, [r6, #0]
 80076f2:	681e      	ldr	r6, [r3, #0]
 80076f4:	6862      	ldr	r2, [r4, #4]
 80076f6:	2100      	movs	r1, #0
 80076f8:	4630      	mov	r0, r6
 80076fa:	f7f8 fdf1 	bl	80002e0 <memchr>
 80076fe:	b108      	cbz	r0, 8007704 <_printf_i+0x1e4>
 8007700:	1b80      	subs	r0, r0, r6
 8007702:	6060      	str	r0, [r4, #4]
 8007704:	6863      	ldr	r3, [r4, #4]
 8007706:	6123      	str	r3, [r4, #16]
 8007708:	2300      	movs	r3, #0
 800770a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800770e:	e7aa      	b.n	8007666 <_printf_i+0x146>
 8007710:	6923      	ldr	r3, [r4, #16]
 8007712:	4632      	mov	r2, r6
 8007714:	4649      	mov	r1, r9
 8007716:	4640      	mov	r0, r8
 8007718:	47d0      	blx	sl
 800771a:	3001      	adds	r0, #1
 800771c:	d0ad      	beq.n	800767a <_printf_i+0x15a>
 800771e:	6823      	ldr	r3, [r4, #0]
 8007720:	079b      	lsls	r3, r3, #30
 8007722:	d413      	bmi.n	800774c <_printf_i+0x22c>
 8007724:	68e0      	ldr	r0, [r4, #12]
 8007726:	9b03      	ldr	r3, [sp, #12]
 8007728:	4298      	cmp	r0, r3
 800772a:	bfb8      	it	lt
 800772c:	4618      	movlt	r0, r3
 800772e:	e7a6      	b.n	800767e <_printf_i+0x15e>
 8007730:	2301      	movs	r3, #1
 8007732:	4632      	mov	r2, r6
 8007734:	4649      	mov	r1, r9
 8007736:	4640      	mov	r0, r8
 8007738:	47d0      	blx	sl
 800773a:	3001      	adds	r0, #1
 800773c:	d09d      	beq.n	800767a <_printf_i+0x15a>
 800773e:	3501      	adds	r5, #1
 8007740:	68e3      	ldr	r3, [r4, #12]
 8007742:	9903      	ldr	r1, [sp, #12]
 8007744:	1a5b      	subs	r3, r3, r1
 8007746:	42ab      	cmp	r3, r5
 8007748:	dcf2      	bgt.n	8007730 <_printf_i+0x210>
 800774a:	e7eb      	b.n	8007724 <_printf_i+0x204>
 800774c:	2500      	movs	r5, #0
 800774e:	f104 0619 	add.w	r6, r4, #25
 8007752:	e7f5      	b.n	8007740 <_printf_i+0x220>
 8007754:	080108fa 	.word	0x080108fa
 8007758:	0801090b 	.word	0x0801090b

0800775c <std>:
 800775c:	2300      	movs	r3, #0
 800775e:	b510      	push	{r4, lr}
 8007760:	4604      	mov	r4, r0
 8007762:	e9c0 3300 	strd	r3, r3, [r0]
 8007766:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800776a:	6083      	str	r3, [r0, #8]
 800776c:	8181      	strh	r1, [r0, #12]
 800776e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007770:	81c2      	strh	r2, [r0, #14]
 8007772:	6183      	str	r3, [r0, #24]
 8007774:	4619      	mov	r1, r3
 8007776:	2208      	movs	r2, #8
 8007778:	305c      	adds	r0, #92	@ 0x5c
 800777a:	f000 f916 	bl	80079aa <memset>
 800777e:	4b0d      	ldr	r3, [pc, #52]	@ (80077b4 <std+0x58>)
 8007780:	6263      	str	r3, [r4, #36]	@ 0x24
 8007782:	4b0d      	ldr	r3, [pc, #52]	@ (80077b8 <std+0x5c>)
 8007784:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007786:	4b0d      	ldr	r3, [pc, #52]	@ (80077bc <std+0x60>)
 8007788:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800778a:	4b0d      	ldr	r3, [pc, #52]	@ (80077c0 <std+0x64>)
 800778c:	6323      	str	r3, [r4, #48]	@ 0x30
 800778e:	4b0d      	ldr	r3, [pc, #52]	@ (80077c4 <std+0x68>)
 8007790:	6224      	str	r4, [r4, #32]
 8007792:	429c      	cmp	r4, r3
 8007794:	d006      	beq.n	80077a4 <std+0x48>
 8007796:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800779a:	4294      	cmp	r4, r2
 800779c:	d002      	beq.n	80077a4 <std+0x48>
 800779e:	33d0      	adds	r3, #208	@ 0xd0
 80077a0:	429c      	cmp	r4, r3
 80077a2:	d105      	bne.n	80077b0 <std+0x54>
 80077a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80077a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077ac:	f000 b92e 	b.w	8007a0c <__retarget_lock_init_recursive>
 80077b0:	bd10      	pop	{r4, pc}
 80077b2:	bf00      	nop
 80077b4:	08007925 	.word	0x08007925
 80077b8:	08007947 	.word	0x08007947
 80077bc:	0800797f 	.word	0x0800797f
 80077c0:	080079a3 	.word	0x080079a3
 80077c4:	24000a48 	.word	0x24000a48

080077c8 <stdio_exit_handler>:
 80077c8:	4a02      	ldr	r2, [pc, #8]	@ (80077d4 <stdio_exit_handler+0xc>)
 80077ca:	4903      	ldr	r1, [pc, #12]	@ (80077d8 <stdio_exit_handler+0x10>)
 80077cc:	4803      	ldr	r0, [pc, #12]	@ (80077dc <stdio_exit_handler+0x14>)
 80077ce:	f000 b869 	b.w	80078a4 <_fwalk_sglue>
 80077d2:	bf00      	nop
 80077d4:	24000080 	.word	0x24000080
 80077d8:	080091fd 	.word	0x080091fd
 80077dc:	24000090 	.word	0x24000090

080077e0 <cleanup_stdio>:
 80077e0:	6841      	ldr	r1, [r0, #4]
 80077e2:	4b0c      	ldr	r3, [pc, #48]	@ (8007814 <cleanup_stdio+0x34>)
 80077e4:	4299      	cmp	r1, r3
 80077e6:	b510      	push	{r4, lr}
 80077e8:	4604      	mov	r4, r0
 80077ea:	d001      	beq.n	80077f0 <cleanup_stdio+0x10>
 80077ec:	f001 fd06 	bl	80091fc <_fflush_r>
 80077f0:	68a1      	ldr	r1, [r4, #8]
 80077f2:	4b09      	ldr	r3, [pc, #36]	@ (8007818 <cleanup_stdio+0x38>)
 80077f4:	4299      	cmp	r1, r3
 80077f6:	d002      	beq.n	80077fe <cleanup_stdio+0x1e>
 80077f8:	4620      	mov	r0, r4
 80077fa:	f001 fcff 	bl	80091fc <_fflush_r>
 80077fe:	68e1      	ldr	r1, [r4, #12]
 8007800:	4b06      	ldr	r3, [pc, #24]	@ (800781c <cleanup_stdio+0x3c>)
 8007802:	4299      	cmp	r1, r3
 8007804:	d004      	beq.n	8007810 <cleanup_stdio+0x30>
 8007806:	4620      	mov	r0, r4
 8007808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800780c:	f001 bcf6 	b.w	80091fc <_fflush_r>
 8007810:	bd10      	pop	{r4, pc}
 8007812:	bf00      	nop
 8007814:	24000a48 	.word	0x24000a48
 8007818:	24000ab0 	.word	0x24000ab0
 800781c:	24000b18 	.word	0x24000b18

08007820 <global_stdio_init.part.0>:
 8007820:	b510      	push	{r4, lr}
 8007822:	4b0b      	ldr	r3, [pc, #44]	@ (8007850 <global_stdio_init.part.0+0x30>)
 8007824:	4c0b      	ldr	r4, [pc, #44]	@ (8007854 <global_stdio_init.part.0+0x34>)
 8007826:	4a0c      	ldr	r2, [pc, #48]	@ (8007858 <global_stdio_init.part.0+0x38>)
 8007828:	601a      	str	r2, [r3, #0]
 800782a:	4620      	mov	r0, r4
 800782c:	2200      	movs	r2, #0
 800782e:	2104      	movs	r1, #4
 8007830:	f7ff ff94 	bl	800775c <std>
 8007834:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007838:	2201      	movs	r2, #1
 800783a:	2109      	movs	r1, #9
 800783c:	f7ff ff8e 	bl	800775c <std>
 8007840:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007844:	2202      	movs	r2, #2
 8007846:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800784a:	2112      	movs	r1, #18
 800784c:	f7ff bf86 	b.w	800775c <std>
 8007850:	24000b80 	.word	0x24000b80
 8007854:	24000a48 	.word	0x24000a48
 8007858:	080077c9 	.word	0x080077c9

0800785c <__sfp_lock_acquire>:
 800785c:	4801      	ldr	r0, [pc, #4]	@ (8007864 <__sfp_lock_acquire+0x8>)
 800785e:	f000 b8d6 	b.w	8007a0e <__retarget_lock_acquire_recursive>
 8007862:	bf00      	nop
 8007864:	24000b85 	.word	0x24000b85

08007868 <__sfp_lock_release>:
 8007868:	4801      	ldr	r0, [pc, #4]	@ (8007870 <__sfp_lock_release+0x8>)
 800786a:	f000 b8d1 	b.w	8007a10 <__retarget_lock_release_recursive>
 800786e:	bf00      	nop
 8007870:	24000b85 	.word	0x24000b85

08007874 <__sinit>:
 8007874:	b510      	push	{r4, lr}
 8007876:	4604      	mov	r4, r0
 8007878:	f7ff fff0 	bl	800785c <__sfp_lock_acquire>
 800787c:	6a23      	ldr	r3, [r4, #32]
 800787e:	b11b      	cbz	r3, 8007888 <__sinit+0x14>
 8007880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007884:	f7ff bff0 	b.w	8007868 <__sfp_lock_release>
 8007888:	4b04      	ldr	r3, [pc, #16]	@ (800789c <__sinit+0x28>)
 800788a:	6223      	str	r3, [r4, #32]
 800788c:	4b04      	ldr	r3, [pc, #16]	@ (80078a0 <__sinit+0x2c>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d1f5      	bne.n	8007880 <__sinit+0xc>
 8007894:	f7ff ffc4 	bl	8007820 <global_stdio_init.part.0>
 8007898:	e7f2      	b.n	8007880 <__sinit+0xc>
 800789a:	bf00      	nop
 800789c:	080077e1 	.word	0x080077e1
 80078a0:	24000b80 	.word	0x24000b80

080078a4 <_fwalk_sglue>:
 80078a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078a8:	4607      	mov	r7, r0
 80078aa:	4688      	mov	r8, r1
 80078ac:	4614      	mov	r4, r2
 80078ae:	2600      	movs	r6, #0
 80078b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80078b4:	f1b9 0901 	subs.w	r9, r9, #1
 80078b8:	d505      	bpl.n	80078c6 <_fwalk_sglue+0x22>
 80078ba:	6824      	ldr	r4, [r4, #0]
 80078bc:	2c00      	cmp	r4, #0
 80078be:	d1f7      	bne.n	80078b0 <_fwalk_sglue+0xc>
 80078c0:	4630      	mov	r0, r6
 80078c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078c6:	89ab      	ldrh	r3, [r5, #12]
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d907      	bls.n	80078dc <_fwalk_sglue+0x38>
 80078cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80078d0:	3301      	adds	r3, #1
 80078d2:	d003      	beq.n	80078dc <_fwalk_sglue+0x38>
 80078d4:	4629      	mov	r1, r5
 80078d6:	4638      	mov	r0, r7
 80078d8:	47c0      	blx	r8
 80078da:	4306      	orrs	r6, r0
 80078dc:	3568      	adds	r5, #104	@ 0x68
 80078de:	e7e9      	b.n	80078b4 <_fwalk_sglue+0x10>

080078e0 <siprintf>:
 80078e0:	b40e      	push	{r1, r2, r3}
 80078e2:	b510      	push	{r4, lr}
 80078e4:	b09d      	sub	sp, #116	@ 0x74
 80078e6:	ab1f      	add	r3, sp, #124	@ 0x7c
 80078e8:	9002      	str	r0, [sp, #8]
 80078ea:	9006      	str	r0, [sp, #24]
 80078ec:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80078f0:	480a      	ldr	r0, [pc, #40]	@ (800791c <siprintf+0x3c>)
 80078f2:	9107      	str	r1, [sp, #28]
 80078f4:	9104      	str	r1, [sp, #16]
 80078f6:	490a      	ldr	r1, [pc, #40]	@ (8007920 <siprintf+0x40>)
 80078f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80078fc:	9105      	str	r1, [sp, #20]
 80078fe:	2400      	movs	r4, #0
 8007900:	a902      	add	r1, sp, #8
 8007902:	6800      	ldr	r0, [r0, #0]
 8007904:	9301      	str	r3, [sp, #4]
 8007906:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007908:	f001 faf8 	bl	8008efc <_svfiprintf_r>
 800790c:	9b02      	ldr	r3, [sp, #8]
 800790e:	701c      	strb	r4, [r3, #0]
 8007910:	b01d      	add	sp, #116	@ 0x74
 8007912:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007916:	b003      	add	sp, #12
 8007918:	4770      	bx	lr
 800791a:	bf00      	nop
 800791c:	2400008c 	.word	0x2400008c
 8007920:	ffff0208 	.word	0xffff0208

08007924 <__sread>:
 8007924:	b510      	push	{r4, lr}
 8007926:	460c      	mov	r4, r1
 8007928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800792c:	f7ff f984 	bl	8006c38 <_read_r>
 8007930:	2800      	cmp	r0, #0
 8007932:	bfab      	itete	ge
 8007934:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007936:	89a3      	ldrhlt	r3, [r4, #12]
 8007938:	181b      	addge	r3, r3, r0
 800793a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800793e:	bfac      	ite	ge
 8007940:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007942:	81a3      	strhlt	r3, [r4, #12]
 8007944:	bd10      	pop	{r4, pc}

08007946 <__swrite>:
 8007946:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800794a:	461f      	mov	r7, r3
 800794c:	898b      	ldrh	r3, [r1, #12]
 800794e:	05db      	lsls	r3, r3, #23
 8007950:	4605      	mov	r5, r0
 8007952:	460c      	mov	r4, r1
 8007954:	4616      	mov	r6, r2
 8007956:	d505      	bpl.n	8007964 <__swrite+0x1e>
 8007958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800795c:	2302      	movs	r3, #2
 800795e:	2200      	movs	r2, #0
 8007960:	f7ff f968 	bl	8006c34 <_lseek_r>
 8007964:	89a3      	ldrh	r3, [r4, #12]
 8007966:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800796a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800796e:	81a3      	strh	r3, [r4, #12]
 8007970:	4632      	mov	r2, r6
 8007972:	463b      	mov	r3, r7
 8007974:	4628      	mov	r0, r5
 8007976:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800797a:	f7ff b95f 	b.w	8006c3c <_write_r>

0800797e <__sseek>:
 800797e:	b510      	push	{r4, lr}
 8007980:	460c      	mov	r4, r1
 8007982:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007986:	f7ff f955 	bl	8006c34 <_lseek_r>
 800798a:	1c43      	adds	r3, r0, #1
 800798c:	89a3      	ldrh	r3, [r4, #12]
 800798e:	bf15      	itete	ne
 8007990:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007992:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007996:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800799a:	81a3      	strheq	r3, [r4, #12]
 800799c:	bf18      	it	ne
 800799e:	81a3      	strhne	r3, [r4, #12]
 80079a0:	bd10      	pop	{r4, pc}

080079a2 <__sclose>:
 80079a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079a6:	f7ff b943 	b.w	8006c30 <_close_r>

080079aa <memset>:
 80079aa:	4402      	add	r2, r0
 80079ac:	4603      	mov	r3, r0
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d100      	bne.n	80079b4 <memset+0xa>
 80079b2:	4770      	bx	lr
 80079b4:	f803 1b01 	strb.w	r1, [r3], #1
 80079b8:	e7f9      	b.n	80079ae <memset+0x4>
	...

080079bc <_localeconv_r>:
 80079bc:	4800      	ldr	r0, [pc, #0]	@ (80079c0 <_localeconv_r+0x4>)
 80079be:	4770      	bx	lr
 80079c0:	240001cc 	.word	0x240001cc

080079c4 <__libc_init_array>:
 80079c4:	b570      	push	{r4, r5, r6, lr}
 80079c6:	4d0d      	ldr	r5, [pc, #52]	@ (80079fc <__libc_init_array+0x38>)
 80079c8:	4c0d      	ldr	r4, [pc, #52]	@ (8007a00 <__libc_init_array+0x3c>)
 80079ca:	1b64      	subs	r4, r4, r5
 80079cc:	10a4      	asrs	r4, r4, #2
 80079ce:	2600      	movs	r6, #0
 80079d0:	42a6      	cmp	r6, r4
 80079d2:	d109      	bne.n	80079e8 <__libc_init_array+0x24>
 80079d4:	4d0b      	ldr	r5, [pc, #44]	@ (8007a04 <__libc_init_array+0x40>)
 80079d6:	4c0c      	ldr	r4, [pc, #48]	@ (8007a08 <__libc_init_array+0x44>)
 80079d8:	f001 ffe4 	bl	80099a4 <_init>
 80079dc:	1b64      	subs	r4, r4, r5
 80079de:	10a4      	asrs	r4, r4, #2
 80079e0:	2600      	movs	r6, #0
 80079e2:	42a6      	cmp	r6, r4
 80079e4:	d105      	bne.n	80079f2 <__libc_init_array+0x2e>
 80079e6:	bd70      	pop	{r4, r5, r6, pc}
 80079e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80079ec:	4798      	blx	r3
 80079ee:	3601      	adds	r6, #1
 80079f0:	e7ee      	b.n	80079d0 <__libc_init_array+0xc>
 80079f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80079f6:	4798      	blx	r3
 80079f8:	3601      	adds	r6, #1
 80079fa:	e7f2      	b.n	80079e2 <__libc_init_array+0x1e>
 80079fc:	08010c64 	.word	0x08010c64
 8007a00:	08010c64 	.word	0x08010c64
 8007a04:	08010c64 	.word	0x08010c64
 8007a08:	08010c68 	.word	0x08010c68

08007a0c <__retarget_lock_init_recursive>:
 8007a0c:	4770      	bx	lr

08007a0e <__retarget_lock_acquire_recursive>:
 8007a0e:	4770      	bx	lr

08007a10 <__retarget_lock_release_recursive>:
 8007a10:	4770      	bx	lr

08007a12 <quorem>:
 8007a12:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a16:	6903      	ldr	r3, [r0, #16]
 8007a18:	690c      	ldr	r4, [r1, #16]
 8007a1a:	42a3      	cmp	r3, r4
 8007a1c:	4607      	mov	r7, r0
 8007a1e:	db7e      	blt.n	8007b1e <quorem+0x10c>
 8007a20:	3c01      	subs	r4, #1
 8007a22:	f101 0814 	add.w	r8, r1, #20
 8007a26:	00a3      	lsls	r3, r4, #2
 8007a28:	f100 0514 	add.w	r5, r0, #20
 8007a2c:	9300      	str	r3, [sp, #0]
 8007a2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a32:	9301      	str	r3, [sp, #4]
 8007a34:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007a38:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a3c:	3301      	adds	r3, #1
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007a44:	fbb2 f6f3 	udiv	r6, r2, r3
 8007a48:	d32e      	bcc.n	8007aa8 <quorem+0x96>
 8007a4a:	f04f 0a00 	mov.w	sl, #0
 8007a4e:	46c4      	mov	ip, r8
 8007a50:	46ae      	mov	lr, r5
 8007a52:	46d3      	mov	fp, sl
 8007a54:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007a58:	b298      	uxth	r0, r3
 8007a5a:	fb06 a000 	mla	r0, r6, r0, sl
 8007a5e:	0c02      	lsrs	r2, r0, #16
 8007a60:	0c1b      	lsrs	r3, r3, #16
 8007a62:	fb06 2303 	mla	r3, r6, r3, r2
 8007a66:	f8de 2000 	ldr.w	r2, [lr]
 8007a6a:	b280      	uxth	r0, r0
 8007a6c:	b292      	uxth	r2, r2
 8007a6e:	1a12      	subs	r2, r2, r0
 8007a70:	445a      	add	r2, fp
 8007a72:	f8de 0000 	ldr.w	r0, [lr]
 8007a76:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007a80:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007a84:	b292      	uxth	r2, r2
 8007a86:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007a8a:	45e1      	cmp	r9, ip
 8007a8c:	f84e 2b04 	str.w	r2, [lr], #4
 8007a90:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007a94:	d2de      	bcs.n	8007a54 <quorem+0x42>
 8007a96:	9b00      	ldr	r3, [sp, #0]
 8007a98:	58eb      	ldr	r3, [r5, r3]
 8007a9a:	b92b      	cbnz	r3, 8007aa8 <quorem+0x96>
 8007a9c:	9b01      	ldr	r3, [sp, #4]
 8007a9e:	3b04      	subs	r3, #4
 8007aa0:	429d      	cmp	r5, r3
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	d32f      	bcc.n	8007b06 <quorem+0xf4>
 8007aa6:	613c      	str	r4, [r7, #16]
 8007aa8:	4638      	mov	r0, r7
 8007aaa:	f001 f8c3 	bl	8008c34 <__mcmp>
 8007aae:	2800      	cmp	r0, #0
 8007ab0:	db25      	blt.n	8007afe <quorem+0xec>
 8007ab2:	4629      	mov	r1, r5
 8007ab4:	2000      	movs	r0, #0
 8007ab6:	f858 2b04 	ldr.w	r2, [r8], #4
 8007aba:	f8d1 c000 	ldr.w	ip, [r1]
 8007abe:	fa1f fe82 	uxth.w	lr, r2
 8007ac2:	fa1f f38c 	uxth.w	r3, ip
 8007ac6:	eba3 030e 	sub.w	r3, r3, lr
 8007aca:	4403      	add	r3, r0
 8007acc:	0c12      	lsrs	r2, r2, #16
 8007ace:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007ad2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007adc:	45c1      	cmp	r9, r8
 8007ade:	f841 3b04 	str.w	r3, [r1], #4
 8007ae2:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007ae6:	d2e6      	bcs.n	8007ab6 <quorem+0xa4>
 8007ae8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007aec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007af0:	b922      	cbnz	r2, 8007afc <quorem+0xea>
 8007af2:	3b04      	subs	r3, #4
 8007af4:	429d      	cmp	r5, r3
 8007af6:	461a      	mov	r2, r3
 8007af8:	d30b      	bcc.n	8007b12 <quorem+0x100>
 8007afa:	613c      	str	r4, [r7, #16]
 8007afc:	3601      	adds	r6, #1
 8007afe:	4630      	mov	r0, r6
 8007b00:	b003      	add	sp, #12
 8007b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b06:	6812      	ldr	r2, [r2, #0]
 8007b08:	3b04      	subs	r3, #4
 8007b0a:	2a00      	cmp	r2, #0
 8007b0c:	d1cb      	bne.n	8007aa6 <quorem+0x94>
 8007b0e:	3c01      	subs	r4, #1
 8007b10:	e7c6      	b.n	8007aa0 <quorem+0x8e>
 8007b12:	6812      	ldr	r2, [r2, #0]
 8007b14:	3b04      	subs	r3, #4
 8007b16:	2a00      	cmp	r2, #0
 8007b18:	d1ef      	bne.n	8007afa <quorem+0xe8>
 8007b1a:	3c01      	subs	r4, #1
 8007b1c:	e7ea      	b.n	8007af4 <quorem+0xe2>
 8007b1e:	2000      	movs	r0, #0
 8007b20:	e7ee      	b.n	8007b00 <quorem+0xee>
 8007b22:	0000      	movs	r0, r0
 8007b24:	0000      	movs	r0, r0
	...

08007b28 <_dtoa_r>:
 8007b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b2c:	ed2d 8b02 	vpush	{d8}
 8007b30:	69c7      	ldr	r7, [r0, #28]
 8007b32:	b091      	sub	sp, #68	@ 0x44
 8007b34:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007b38:	ec55 4b10 	vmov	r4, r5, d0
 8007b3c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8007b3e:	9107      	str	r1, [sp, #28]
 8007b40:	4681      	mov	r9, r0
 8007b42:	9209      	str	r2, [sp, #36]	@ 0x24
 8007b44:	930d      	str	r3, [sp, #52]	@ 0x34
 8007b46:	b97f      	cbnz	r7, 8007b68 <_dtoa_r+0x40>
 8007b48:	2010      	movs	r0, #16
 8007b4a:	f000 fd4b 	bl	80085e4 <malloc>
 8007b4e:	4602      	mov	r2, r0
 8007b50:	f8c9 001c 	str.w	r0, [r9, #28]
 8007b54:	b920      	cbnz	r0, 8007b60 <_dtoa_r+0x38>
 8007b56:	4ba0      	ldr	r3, [pc, #640]	@ (8007dd8 <_dtoa_r+0x2b0>)
 8007b58:	21ef      	movs	r1, #239	@ 0xef
 8007b5a:	48a0      	ldr	r0, [pc, #640]	@ (8007ddc <_dtoa_r+0x2b4>)
 8007b5c:	f001 fbae 	bl	80092bc <__assert_func>
 8007b60:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007b64:	6007      	str	r7, [r0, #0]
 8007b66:	60c7      	str	r7, [r0, #12]
 8007b68:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007b6c:	6819      	ldr	r1, [r3, #0]
 8007b6e:	b159      	cbz	r1, 8007b88 <_dtoa_r+0x60>
 8007b70:	685a      	ldr	r2, [r3, #4]
 8007b72:	604a      	str	r2, [r1, #4]
 8007b74:	2301      	movs	r3, #1
 8007b76:	4093      	lsls	r3, r2
 8007b78:	608b      	str	r3, [r1, #8]
 8007b7a:	4648      	mov	r0, r9
 8007b7c:	f000 fe28 	bl	80087d0 <_Bfree>
 8007b80:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007b84:	2200      	movs	r2, #0
 8007b86:	601a      	str	r2, [r3, #0]
 8007b88:	1e2b      	subs	r3, r5, #0
 8007b8a:	bfbb      	ittet	lt
 8007b8c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007b90:	9303      	strlt	r3, [sp, #12]
 8007b92:	2300      	movge	r3, #0
 8007b94:	2201      	movlt	r2, #1
 8007b96:	bfac      	ite	ge
 8007b98:	6033      	strge	r3, [r6, #0]
 8007b9a:	6032      	strlt	r2, [r6, #0]
 8007b9c:	4b90      	ldr	r3, [pc, #576]	@ (8007de0 <_dtoa_r+0x2b8>)
 8007b9e:	9e03      	ldr	r6, [sp, #12]
 8007ba0:	43b3      	bics	r3, r6
 8007ba2:	d110      	bne.n	8007bc6 <_dtoa_r+0x9e>
 8007ba4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007ba6:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007baa:	6013      	str	r3, [r2, #0]
 8007bac:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8007bb0:	4323      	orrs	r3, r4
 8007bb2:	f000 84e6 	beq.w	8008582 <_dtoa_r+0xa5a>
 8007bb6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007bb8:	4f8a      	ldr	r7, [pc, #552]	@ (8007de4 <_dtoa_r+0x2bc>)
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	f000 84e8 	beq.w	8008590 <_dtoa_r+0xa68>
 8007bc0:	1cfb      	adds	r3, r7, #3
 8007bc2:	f000 bce3 	b.w	800858c <_dtoa_r+0xa64>
 8007bc6:	ed9d 8b02 	vldr	d8, [sp, #8]
 8007bca:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bd2:	d10a      	bne.n	8007bea <_dtoa_r+0xc2>
 8007bd4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	6013      	str	r3, [r2, #0]
 8007bda:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007bdc:	b113      	cbz	r3, 8007be4 <_dtoa_r+0xbc>
 8007bde:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8007be0:	4b81      	ldr	r3, [pc, #516]	@ (8007de8 <_dtoa_r+0x2c0>)
 8007be2:	6013      	str	r3, [r2, #0]
 8007be4:	4f81      	ldr	r7, [pc, #516]	@ (8007dec <_dtoa_r+0x2c4>)
 8007be6:	f000 bcd3 	b.w	8008590 <_dtoa_r+0xa68>
 8007bea:	aa0e      	add	r2, sp, #56	@ 0x38
 8007bec:	a90f      	add	r1, sp, #60	@ 0x3c
 8007bee:	4648      	mov	r0, r9
 8007bf0:	eeb0 0b48 	vmov.f64	d0, d8
 8007bf4:	f001 f8ce 	bl	8008d94 <__d2b>
 8007bf8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8007bfc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007bfe:	9001      	str	r0, [sp, #4]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d045      	beq.n	8007c90 <_dtoa_r+0x168>
 8007c04:	eeb0 7b48 	vmov.f64	d7, d8
 8007c08:	ee18 1a90 	vmov	r1, s17
 8007c0c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8007c10:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8007c14:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8007c18:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8007c1c:	2500      	movs	r5, #0
 8007c1e:	ee07 1a90 	vmov	s15, r1
 8007c22:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8007c26:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8007dc0 <_dtoa_r+0x298>
 8007c2a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007c2e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8007dc8 <_dtoa_r+0x2a0>
 8007c32:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007c36:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8007dd0 <_dtoa_r+0x2a8>
 8007c3a:	ee07 3a90 	vmov	s15, r3
 8007c3e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8007c42:	eeb0 7b46 	vmov.f64	d7, d6
 8007c46:	eea4 7b05 	vfma.f64	d7, d4, d5
 8007c4a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8007c4e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c56:	ee16 8a90 	vmov	r8, s13
 8007c5a:	d508      	bpl.n	8007c6e <_dtoa_r+0x146>
 8007c5c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007c60:	eeb4 6b47 	vcmp.f64	d6, d7
 8007c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c68:	bf18      	it	ne
 8007c6a:	f108 38ff 	addne.w	r8, r8, #4294967295
 8007c6e:	f1b8 0f16 	cmp.w	r8, #22
 8007c72:	d82b      	bhi.n	8007ccc <_dtoa_r+0x1a4>
 8007c74:	495e      	ldr	r1, [pc, #376]	@ (8007df0 <_dtoa_r+0x2c8>)
 8007c76:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8007c7a:	ed91 7b00 	vldr	d7, [r1]
 8007c7e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c86:	d501      	bpl.n	8007c8c <_dtoa_r+0x164>
 8007c88:	f108 38ff 	add.w	r8, r8, #4294967295
 8007c8c:	2100      	movs	r1, #0
 8007c8e:	e01e      	b.n	8007cce <_dtoa_r+0x1a6>
 8007c90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c92:	4413      	add	r3, r2
 8007c94:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8007c98:	2920      	cmp	r1, #32
 8007c9a:	bfc1      	itttt	gt
 8007c9c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8007ca0:	408e      	lslgt	r6, r1
 8007ca2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8007ca6:	fa24 f101 	lsrgt.w	r1, r4, r1
 8007caa:	bfd6      	itet	le
 8007cac:	f1c1 0120 	rsble	r1, r1, #32
 8007cb0:	4331      	orrgt	r1, r6
 8007cb2:	fa04 f101 	lslle.w	r1, r4, r1
 8007cb6:	ee07 1a90 	vmov	s15, r1
 8007cba:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007cbe:	3b01      	subs	r3, #1
 8007cc0:	ee17 1a90 	vmov	r1, s15
 8007cc4:	2501      	movs	r5, #1
 8007cc6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8007cca:	e7a8      	b.n	8007c1e <_dtoa_r+0xf6>
 8007ccc:	2101      	movs	r1, #1
 8007cce:	1ad2      	subs	r2, r2, r3
 8007cd0:	1e53      	subs	r3, r2, #1
 8007cd2:	9306      	str	r3, [sp, #24]
 8007cd4:	bf45      	ittet	mi
 8007cd6:	f1c2 0301 	rsbmi	r3, r2, #1
 8007cda:	9304      	strmi	r3, [sp, #16]
 8007cdc:	2300      	movpl	r3, #0
 8007cde:	2300      	movmi	r3, #0
 8007ce0:	bf4c      	ite	mi
 8007ce2:	9306      	strmi	r3, [sp, #24]
 8007ce4:	9304      	strpl	r3, [sp, #16]
 8007ce6:	f1b8 0f00 	cmp.w	r8, #0
 8007cea:	910c      	str	r1, [sp, #48]	@ 0x30
 8007cec:	db18      	blt.n	8007d20 <_dtoa_r+0x1f8>
 8007cee:	9b06      	ldr	r3, [sp, #24]
 8007cf0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8007cf4:	4443      	add	r3, r8
 8007cf6:	9306      	str	r3, [sp, #24]
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	9a07      	ldr	r2, [sp, #28]
 8007cfc:	2a09      	cmp	r2, #9
 8007cfe:	d845      	bhi.n	8007d8c <_dtoa_r+0x264>
 8007d00:	2a05      	cmp	r2, #5
 8007d02:	bfc4      	itt	gt
 8007d04:	3a04      	subgt	r2, #4
 8007d06:	9207      	strgt	r2, [sp, #28]
 8007d08:	9a07      	ldr	r2, [sp, #28]
 8007d0a:	f1a2 0202 	sub.w	r2, r2, #2
 8007d0e:	bfcc      	ite	gt
 8007d10:	2400      	movgt	r4, #0
 8007d12:	2401      	movle	r4, #1
 8007d14:	2a03      	cmp	r2, #3
 8007d16:	d844      	bhi.n	8007da2 <_dtoa_r+0x27a>
 8007d18:	e8df f002 	tbb	[pc, r2]
 8007d1c:	0b173634 	.word	0x0b173634
 8007d20:	9b04      	ldr	r3, [sp, #16]
 8007d22:	2200      	movs	r2, #0
 8007d24:	eba3 0308 	sub.w	r3, r3, r8
 8007d28:	9304      	str	r3, [sp, #16]
 8007d2a:	920a      	str	r2, [sp, #40]	@ 0x28
 8007d2c:	f1c8 0300 	rsb	r3, r8, #0
 8007d30:	e7e3      	b.n	8007cfa <_dtoa_r+0x1d2>
 8007d32:	2201      	movs	r2, #1
 8007d34:	9208      	str	r2, [sp, #32]
 8007d36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d38:	eb08 0b02 	add.w	fp, r8, r2
 8007d3c:	f10b 0a01 	add.w	sl, fp, #1
 8007d40:	4652      	mov	r2, sl
 8007d42:	2a01      	cmp	r2, #1
 8007d44:	bfb8      	it	lt
 8007d46:	2201      	movlt	r2, #1
 8007d48:	e006      	b.n	8007d58 <_dtoa_r+0x230>
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	9208      	str	r2, [sp, #32]
 8007d4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d50:	2a00      	cmp	r2, #0
 8007d52:	dd29      	ble.n	8007da8 <_dtoa_r+0x280>
 8007d54:	4693      	mov	fp, r2
 8007d56:	4692      	mov	sl, r2
 8007d58:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8007d5c:	2100      	movs	r1, #0
 8007d5e:	2004      	movs	r0, #4
 8007d60:	f100 0614 	add.w	r6, r0, #20
 8007d64:	4296      	cmp	r6, r2
 8007d66:	d926      	bls.n	8007db6 <_dtoa_r+0x28e>
 8007d68:	6079      	str	r1, [r7, #4]
 8007d6a:	4648      	mov	r0, r9
 8007d6c:	9305      	str	r3, [sp, #20]
 8007d6e:	f000 fcef 	bl	8008750 <_Balloc>
 8007d72:	9b05      	ldr	r3, [sp, #20]
 8007d74:	4607      	mov	r7, r0
 8007d76:	2800      	cmp	r0, #0
 8007d78:	d13e      	bne.n	8007df8 <_dtoa_r+0x2d0>
 8007d7a:	4b1e      	ldr	r3, [pc, #120]	@ (8007df4 <_dtoa_r+0x2cc>)
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007d82:	e6ea      	b.n	8007b5a <_dtoa_r+0x32>
 8007d84:	2200      	movs	r2, #0
 8007d86:	e7e1      	b.n	8007d4c <_dtoa_r+0x224>
 8007d88:	2200      	movs	r2, #0
 8007d8a:	e7d3      	b.n	8007d34 <_dtoa_r+0x20c>
 8007d8c:	2401      	movs	r4, #1
 8007d8e:	2200      	movs	r2, #0
 8007d90:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8007d94:	f04f 3bff 	mov.w	fp, #4294967295
 8007d98:	2100      	movs	r1, #0
 8007d9a:	46da      	mov	sl, fp
 8007d9c:	2212      	movs	r2, #18
 8007d9e:	9109      	str	r1, [sp, #36]	@ 0x24
 8007da0:	e7da      	b.n	8007d58 <_dtoa_r+0x230>
 8007da2:	2201      	movs	r2, #1
 8007da4:	9208      	str	r2, [sp, #32]
 8007da6:	e7f5      	b.n	8007d94 <_dtoa_r+0x26c>
 8007da8:	f04f 0b01 	mov.w	fp, #1
 8007dac:	46da      	mov	sl, fp
 8007dae:	465a      	mov	r2, fp
 8007db0:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8007db4:	e7d0      	b.n	8007d58 <_dtoa_r+0x230>
 8007db6:	3101      	adds	r1, #1
 8007db8:	0040      	lsls	r0, r0, #1
 8007dba:	e7d1      	b.n	8007d60 <_dtoa_r+0x238>
 8007dbc:	f3af 8000 	nop.w
 8007dc0:	636f4361 	.word	0x636f4361
 8007dc4:	3fd287a7 	.word	0x3fd287a7
 8007dc8:	8b60c8b3 	.word	0x8b60c8b3
 8007dcc:	3fc68a28 	.word	0x3fc68a28
 8007dd0:	509f79fb 	.word	0x509f79fb
 8007dd4:	3fd34413 	.word	0x3fd34413
 8007dd8:	08010929 	.word	0x08010929
 8007ddc:	08010940 	.word	0x08010940
 8007de0:	7ff00000 	.word	0x7ff00000
 8007de4:	08010925 	.word	0x08010925
 8007de8:	080108f9 	.word	0x080108f9
 8007dec:	080108f8 	.word	0x080108f8
 8007df0:	08010a90 	.word	0x08010a90
 8007df4:	08010998 	.word	0x08010998
 8007df8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8007dfc:	f1ba 0f0e 	cmp.w	sl, #14
 8007e00:	6010      	str	r0, [r2, #0]
 8007e02:	d86e      	bhi.n	8007ee2 <_dtoa_r+0x3ba>
 8007e04:	2c00      	cmp	r4, #0
 8007e06:	d06c      	beq.n	8007ee2 <_dtoa_r+0x3ba>
 8007e08:	f1b8 0f00 	cmp.w	r8, #0
 8007e0c:	f340 80b4 	ble.w	8007f78 <_dtoa_r+0x450>
 8007e10:	4ac8      	ldr	r2, [pc, #800]	@ (8008134 <_dtoa_r+0x60c>)
 8007e12:	f008 010f 	and.w	r1, r8, #15
 8007e16:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8007e1a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8007e1e:	ed92 7b00 	vldr	d7, [r2]
 8007e22:	ea4f 1128 	mov.w	r1, r8, asr #4
 8007e26:	f000 809b 	beq.w	8007f60 <_dtoa_r+0x438>
 8007e2a:	4ac3      	ldr	r2, [pc, #780]	@ (8008138 <_dtoa_r+0x610>)
 8007e2c:	ed92 6b08 	vldr	d6, [r2, #32]
 8007e30:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8007e34:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007e38:	f001 010f 	and.w	r1, r1, #15
 8007e3c:	2203      	movs	r2, #3
 8007e3e:	48be      	ldr	r0, [pc, #760]	@ (8008138 <_dtoa_r+0x610>)
 8007e40:	2900      	cmp	r1, #0
 8007e42:	f040 808f 	bne.w	8007f64 <_dtoa_r+0x43c>
 8007e46:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007e4a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007e4e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007e52:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007e54:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007e58:	2900      	cmp	r1, #0
 8007e5a:	f000 80b3 	beq.w	8007fc4 <_dtoa_r+0x49c>
 8007e5e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8007e62:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e6a:	f140 80ab 	bpl.w	8007fc4 <_dtoa_r+0x49c>
 8007e6e:	f1ba 0f00 	cmp.w	sl, #0
 8007e72:	f000 80a7 	beq.w	8007fc4 <_dtoa_r+0x49c>
 8007e76:	f1bb 0f00 	cmp.w	fp, #0
 8007e7a:	dd30      	ble.n	8007ede <_dtoa_r+0x3b6>
 8007e7c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8007e80:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007e84:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007e88:	f108 31ff 	add.w	r1, r8, #4294967295
 8007e8c:	9105      	str	r1, [sp, #20]
 8007e8e:	3201      	adds	r2, #1
 8007e90:	465c      	mov	r4, fp
 8007e92:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007e96:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8007e9a:	ee07 2a90 	vmov	s15, r2
 8007e9e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007ea2:	eea7 5b06 	vfma.f64	d5, d7, d6
 8007ea6:	ee15 2a90 	vmov	r2, s11
 8007eaa:	ec51 0b15 	vmov	r0, r1, d5
 8007eae:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8007eb2:	2c00      	cmp	r4, #0
 8007eb4:	f040 808a 	bne.w	8007fcc <_dtoa_r+0x4a4>
 8007eb8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8007ebc:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007ec0:	ec41 0b17 	vmov	d7, r0, r1
 8007ec4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ecc:	f300 826a 	bgt.w	80083a4 <_dtoa_r+0x87c>
 8007ed0:	eeb1 7b47 	vneg.f64	d7, d7
 8007ed4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007edc:	d423      	bmi.n	8007f26 <_dtoa_r+0x3fe>
 8007ede:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007ee2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007ee4:	2a00      	cmp	r2, #0
 8007ee6:	f2c0 8129 	blt.w	800813c <_dtoa_r+0x614>
 8007eea:	f1b8 0f0e 	cmp.w	r8, #14
 8007eee:	f300 8125 	bgt.w	800813c <_dtoa_r+0x614>
 8007ef2:	4b90      	ldr	r3, [pc, #576]	@ (8008134 <_dtoa_r+0x60c>)
 8007ef4:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007ef8:	ed93 6b00 	vldr	d6, [r3]
 8007efc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	f280 80c8 	bge.w	8008094 <_dtoa_r+0x56c>
 8007f04:	f1ba 0f00 	cmp.w	sl, #0
 8007f08:	f300 80c4 	bgt.w	8008094 <_dtoa_r+0x56c>
 8007f0c:	d10b      	bne.n	8007f26 <_dtoa_r+0x3fe>
 8007f0e:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8007f12:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007f16:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007f1a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f22:	f2c0 823c 	blt.w	800839e <_dtoa_r+0x876>
 8007f26:	2400      	movs	r4, #0
 8007f28:	4625      	mov	r5, r4
 8007f2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f2c:	43db      	mvns	r3, r3
 8007f2e:	9305      	str	r3, [sp, #20]
 8007f30:	463e      	mov	r6, r7
 8007f32:	f04f 0800 	mov.w	r8, #0
 8007f36:	4621      	mov	r1, r4
 8007f38:	4648      	mov	r0, r9
 8007f3a:	f000 fc49 	bl	80087d0 <_Bfree>
 8007f3e:	2d00      	cmp	r5, #0
 8007f40:	f000 80a2 	beq.w	8008088 <_dtoa_r+0x560>
 8007f44:	f1b8 0f00 	cmp.w	r8, #0
 8007f48:	d005      	beq.n	8007f56 <_dtoa_r+0x42e>
 8007f4a:	45a8      	cmp	r8, r5
 8007f4c:	d003      	beq.n	8007f56 <_dtoa_r+0x42e>
 8007f4e:	4641      	mov	r1, r8
 8007f50:	4648      	mov	r0, r9
 8007f52:	f000 fc3d 	bl	80087d0 <_Bfree>
 8007f56:	4629      	mov	r1, r5
 8007f58:	4648      	mov	r0, r9
 8007f5a:	f000 fc39 	bl	80087d0 <_Bfree>
 8007f5e:	e093      	b.n	8008088 <_dtoa_r+0x560>
 8007f60:	2202      	movs	r2, #2
 8007f62:	e76c      	b.n	8007e3e <_dtoa_r+0x316>
 8007f64:	07cc      	lsls	r4, r1, #31
 8007f66:	d504      	bpl.n	8007f72 <_dtoa_r+0x44a>
 8007f68:	ed90 6b00 	vldr	d6, [r0]
 8007f6c:	3201      	adds	r2, #1
 8007f6e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007f72:	1049      	asrs	r1, r1, #1
 8007f74:	3008      	adds	r0, #8
 8007f76:	e763      	b.n	8007e40 <_dtoa_r+0x318>
 8007f78:	d022      	beq.n	8007fc0 <_dtoa_r+0x498>
 8007f7a:	f1c8 0100 	rsb	r1, r8, #0
 8007f7e:	4a6d      	ldr	r2, [pc, #436]	@ (8008134 <_dtoa_r+0x60c>)
 8007f80:	f001 000f 	and.w	r0, r1, #15
 8007f84:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8007f88:	ed92 7b00 	vldr	d7, [r2]
 8007f8c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8007f90:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007f94:	4868      	ldr	r0, [pc, #416]	@ (8008138 <_dtoa_r+0x610>)
 8007f96:	1109      	asrs	r1, r1, #4
 8007f98:	2400      	movs	r4, #0
 8007f9a:	2202      	movs	r2, #2
 8007f9c:	b929      	cbnz	r1, 8007faa <_dtoa_r+0x482>
 8007f9e:	2c00      	cmp	r4, #0
 8007fa0:	f43f af57 	beq.w	8007e52 <_dtoa_r+0x32a>
 8007fa4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007fa8:	e753      	b.n	8007e52 <_dtoa_r+0x32a>
 8007faa:	07ce      	lsls	r6, r1, #31
 8007fac:	d505      	bpl.n	8007fba <_dtoa_r+0x492>
 8007fae:	ed90 6b00 	vldr	d6, [r0]
 8007fb2:	3201      	adds	r2, #1
 8007fb4:	2401      	movs	r4, #1
 8007fb6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007fba:	1049      	asrs	r1, r1, #1
 8007fbc:	3008      	adds	r0, #8
 8007fbe:	e7ed      	b.n	8007f9c <_dtoa_r+0x474>
 8007fc0:	2202      	movs	r2, #2
 8007fc2:	e746      	b.n	8007e52 <_dtoa_r+0x32a>
 8007fc4:	f8cd 8014 	str.w	r8, [sp, #20]
 8007fc8:	4654      	mov	r4, sl
 8007fca:	e762      	b.n	8007e92 <_dtoa_r+0x36a>
 8007fcc:	4a59      	ldr	r2, [pc, #356]	@ (8008134 <_dtoa_r+0x60c>)
 8007fce:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8007fd2:	ed12 4b02 	vldr	d4, [r2, #-8]
 8007fd6:	9a08      	ldr	r2, [sp, #32]
 8007fd8:	ec41 0b17 	vmov	d7, r0, r1
 8007fdc:	443c      	add	r4, r7
 8007fde:	b34a      	cbz	r2, 8008034 <_dtoa_r+0x50c>
 8007fe0:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8007fe4:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8007fe8:	463e      	mov	r6, r7
 8007fea:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8007fee:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8007ff2:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007ff6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007ffa:	ee14 2a90 	vmov	r2, s9
 8007ffe:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008002:	3230      	adds	r2, #48	@ 0x30
 8008004:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008008:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800800c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008010:	f806 2b01 	strb.w	r2, [r6], #1
 8008014:	d438      	bmi.n	8008088 <_dtoa_r+0x560>
 8008016:	ee32 5b46 	vsub.f64	d5, d2, d6
 800801a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800801e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008022:	d46e      	bmi.n	8008102 <_dtoa_r+0x5da>
 8008024:	42a6      	cmp	r6, r4
 8008026:	f43f af5a 	beq.w	8007ede <_dtoa_r+0x3b6>
 800802a:	ee27 7b03 	vmul.f64	d7, d7, d3
 800802e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008032:	e7e0      	b.n	8007ff6 <_dtoa_r+0x4ce>
 8008034:	4621      	mov	r1, r4
 8008036:	463e      	mov	r6, r7
 8008038:	ee27 7b04 	vmul.f64	d7, d7, d4
 800803c:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8008040:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008044:	ee14 2a90 	vmov	r2, s9
 8008048:	3230      	adds	r2, #48	@ 0x30
 800804a:	f806 2b01 	strb.w	r2, [r6], #1
 800804e:	42a6      	cmp	r6, r4
 8008050:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008054:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008058:	d119      	bne.n	800808e <_dtoa_r+0x566>
 800805a:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800805e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8008062:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8008066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800806a:	dc4a      	bgt.n	8008102 <_dtoa_r+0x5da>
 800806c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8008070:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8008074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008078:	f57f af31 	bpl.w	8007ede <_dtoa_r+0x3b6>
 800807c:	460e      	mov	r6, r1
 800807e:	3901      	subs	r1, #1
 8008080:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008084:	2b30      	cmp	r3, #48	@ 0x30
 8008086:	d0f9      	beq.n	800807c <_dtoa_r+0x554>
 8008088:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800808c:	e027      	b.n	80080de <_dtoa_r+0x5b6>
 800808e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008092:	e7d5      	b.n	8008040 <_dtoa_r+0x518>
 8008094:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008098:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800809c:	463e      	mov	r6, r7
 800809e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80080a2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80080a6:	ee15 3a10 	vmov	r3, s10
 80080aa:	3330      	adds	r3, #48	@ 0x30
 80080ac:	f806 3b01 	strb.w	r3, [r6], #1
 80080b0:	1bf3      	subs	r3, r6, r7
 80080b2:	459a      	cmp	sl, r3
 80080b4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80080b8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80080bc:	d132      	bne.n	8008124 <_dtoa_r+0x5fc>
 80080be:	ee37 7b07 	vadd.f64	d7, d7, d7
 80080c2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80080c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080ca:	dc18      	bgt.n	80080fe <_dtoa_r+0x5d6>
 80080cc:	eeb4 7b46 	vcmp.f64	d7, d6
 80080d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080d4:	d103      	bne.n	80080de <_dtoa_r+0x5b6>
 80080d6:	ee15 3a10 	vmov	r3, s10
 80080da:	07db      	lsls	r3, r3, #31
 80080dc:	d40f      	bmi.n	80080fe <_dtoa_r+0x5d6>
 80080de:	9901      	ldr	r1, [sp, #4]
 80080e0:	4648      	mov	r0, r9
 80080e2:	f000 fb75 	bl	80087d0 <_Bfree>
 80080e6:	2300      	movs	r3, #0
 80080e8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80080ea:	7033      	strb	r3, [r6, #0]
 80080ec:	f108 0301 	add.w	r3, r8, #1
 80080f0:	6013      	str	r3, [r2, #0]
 80080f2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	f000 824b 	beq.w	8008590 <_dtoa_r+0xa68>
 80080fa:	601e      	str	r6, [r3, #0]
 80080fc:	e248      	b.n	8008590 <_dtoa_r+0xa68>
 80080fe:	f8cd 8014 	str.w	r8, [sp, #20]
 8008102:	4633      	mov	r3, r6
 8008104:	461e      	mov	r6, r3
 8008106:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800810a:	2a39      	cmp	r2, #57	@ 0x39
 800810c:	d106      	bne.n	800811c <_dtoa_r+0x5f4>
 800810e:	429f      	cmp	r7, r3
 8008110:	d1f8      	bne.n	8008104 <_dtoa_r+0x5dc>
 8008112:	9a05      	ldr	r2, [sp, #20]
 8008114:	3201      	adds	r2, #1
 8008116:	9205      	str	r2, [sp, #20]
 8008118:	2230      	movs	r2, #48	@ 0x30
 800811a:	703a      	strb	r2, [r7, #0]
 800811c:	781a      	ldrb	r2, [r3, #0]
 800811e:	3201      	adds	r2, #1
 8008120:	701a      	strb	r2, [r3, #0]
 8008122:	e7b1      	b.n	8008088 <_dtoa_r+0x560>
 8008124:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008128:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800812c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008130:	d1b5      	bne.n	800809e <_dtoa_r+0x576>
 8008132:	e7d4      	b.n	80080de <_dtoa_r+0x5b6>
 8008134:	08010a90 	.word	0x08010a90
 8008138:	08010a68 	.word	0x08010a68
 800813c:	9908      	ldr	r1, [sp, #32]
 800813e:	2900      	cmp	r1, #0
 8008140:	f000 80e9 	beq.w	8008316 <_dtoa_r+0x7ee>
 8008144:	9907      	ldr	r1, [sp, #28]
 8008146:	2901      	cmp	r1, #1
 8008148:	f300 80cb 	bgt.w	80082e2 <_dtoa_r+0x7ba>
 800814c:	2d00      	cmp	r5, #0
 800814e:	f000 80c4 	beq.w	80082da <_dtoa_r+0x7b2>
 8008152:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008156:	9e04      	ldr	r6, [sp, #16]
 8008158:	461c      	mov	r4, r3
 800815a:	9305      	str	r3, [sp, #20]
 800815c:	9b04      	ldr	r3, [sp, #16]
 800815e:	4413      	add	r3, r2
 8008160:	9304      	str	r3, [sp, #16]
 8008162:	9b06      	ldr	r3, [sp, #24]
 8008164:	2101      	movs	r1, #1
 8008166:	4413      	add	r3, r2
 8008168:	4648      	mov	r0, r9
 800816a:	9306      	str	r3, [sp, #24]
 800816c:	f000 fbe4 	bl	8008938 <__i2b>
 8008170:	9b05      	ldr	r3, [sp, #20]
 8008172:	4605      	mov	r5, r0
 8008174:	b166      	cbz	r6, 8008190 <_dtoa_r+0x668>
 8008176:	9a06      	ldr	r2, [sp, #24]
 8008178:	2a00      	cmp	r2, #0
 800817a:	dd09      	ble.n	8008190 <_dtoa_r+0x668>
 800817c:	42b2      	cmp	r2, r6
 800817e:	9904      	ldr	r1, [sp, #16]
 8008180:	bfa8      	it	ge
 8008182:	4632      	movge	r2, r6
 8008184:	1a89      	subs	r1, r1, r2
 8008186:	9104      	str	r1, [sp, #16]
 8008188:	9906      	ldr	r1, [sp, #24]
 800818a:	1ab6      	subs	r6, r6, r2
 800818c:	1a8a      	subs	r2, r1, r2
 800818e:	9206      	str	r2, [sp, #24]
 8008190:	b30b      	cbz	r3, 80081d6 <_dtoa_r+0x6ae>
 8008192:	9a08      	ldr	r2, [sp, #32]
 8008194:	2a00      	cmp	r2, #0
 8008196:	f000 80c5 	beq.w	8008324 <_dtoa_r+0x7fc>
 800819a:	2c00      	cmp	r4, #0
 800819c:	f000 80bf 	beq.w	800831e <_dtoa_r+0x7f6>
 80081a0:	4629      	mov	r1, r5
 80081a2:	4622      	mov	r2, r4
 80081a4:	4648      	mov	r0, r9
 80081a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80081a8:	f000 fc7e 	bl	8008aa8 <__pow5mult>
 80081ac:	9a01      	ldr	r2, [sp, #4]
 80081ae:	4601      	mov	r1, r0
 80081b0:	4605      	mov	r5, r0
 80081b2:	4648      	mov	r0, r9
 80081b4:	f000 fbd6 	bl	8008964 <__multiply>
 80081b8:	9901      	ldr	r1, [sp, #4]
 80081ba:	9005      	str	r0, [sp, #20]
 80081bc:	4648      	mov	r0, r9
 80081be:	f000 fb07 	bl	80087d0 <_Bfree>
 80081c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80081c4:	1b1b      	subs	r3, r3, r4
 80081c6:	f000 80b0 	beq.w	800832a <_dtoa_r+0x802>
 80081ca:	9905      	ldr	r1, [sp, #20]
 80081cc:	461a      	mov	r2, r3
 80081ce:	4648      	mov	r0, r9
 80081d0:	f000 fc6a 	bl	8008aa8 <__pow5mult>
 80081d4:	9001      	str	r0, [sp, #4]
 80081d6:	2101      	movs	r1, #1
 80081d8:	4648      	mov	r0, r9
 80081da:	f000 fbad 	bl	8008938 <__i2b>
 80081de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081e0:	4604      	mov	r4, r0
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	f000 81da 	beq.w	800859c <_dtoa_r+0xa74>
 80081e8:	461a      	mov	r2, r3
 80081ea:	4601      	mov	r1, r0
 80081ec:	4648      	mov	r0, r9
 80081ee:	f000 fc5b 	bl	8008aa8 <__pow5mult>
 80081f2:	9b07      	ldr	r3, [sp, #28]
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	4604      	mov	r4, r0
 80081f8:	f300 80a0 	bgt.w	800833c <_dtoa_r+0x814>
 80081fc:	9b02      	ldr	r3, [sp, #8]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	f040 8096 	bne.w	8008330 <_dtoa_r+0x808>
 8008204:	9b03      	ldr	r3, [sp, #12]
 8008206:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800820a:	2a00      	cmp	r2, #0
 800820c:	f040 8092 	bne.w	8008334 <_dtoa_r+0x80c>
 8008210:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008214:	0d12      	lsrs	r2, r2, #20
 8008216:	0512      	lsls	r2, r2, #20
 8008218:	2a00      	cmp	r2, #0
 800821a:	f000 808d 	beq.w	8008338 <_dtoa_r+0x810>
 800821e:	9b04      	ldr	r3, [sp, #16]
 8008220:	3301      	adds	r3, #1
 8008222:	9304      	str	r3, [sp, #16]
 8008224:	9b06      	ldr	r3, [sp, #24]
 8008226:	3301      	adds	r3, #1
 8008228:	9306      	str	r3, [sp, #24]
 800822a:	2301      	movs	r3, #1
 800822c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800822e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008230:	2b00      	cmp	r3, #0
 8008232:	f000 81b9 	beq.w	80085a8 <_dtoa_r+0xa80>
 8008236:	6922      	ldr	r2, [r4, #16]
 8008238:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800823c:	6910      	ldr	r0, [r2, #16]
 800823e:	f000 fb2f 	bl	80088a0 <__hi0bits>
 8008242:	f1c0 0020 	rsb	r0, r0, #32
 8008246:	9b06      	ldr	r3, [sp, #24]
 8008248:	4418      	add	r0, r3
 800824a:	f010 001f 	ands.w	r0, r0, #31
 800824e:	f000 8081 	beq.w	8008354 <_dtoa_r+0x82c>
 8008252:	f1c0 0220 	rsb	r2, r0, #32
 8008256:	2a04      	cmp	r2, #4
 8008258:	dd73      	ble.n	8008342 <_dtoa_r+0x81a>
 800825a:	9b04      	ldr	r3, [sp, #16]
 800825c:	f1c0 001c 	rsb	r0, r0, #28
 8008260:	4403      	add	r3, r0
 8008262:	9304      	str	r3, [sp, #16]
 8008264:	9b06      	ldr	r3, [sp, #24]
 8008266:	4406      	add	r6, r0
 8008268:	4403      	add	r3, r0
 800826a:	9306      	str	r3, [sp, #24]
 800826c:	9b04      	ldr	r3, [sp, #16]
 800826e:	2b00      	cmp	r3, #0
 8008270:	dd05      	ble.n	800827e <_dtoa_r+0x756>
 8008272:	9901      	ldr	r1, [sp, #4]
 8008274:	461a      	mov	r2, r3
 8008276:	4648      	mov	r0, r9
 8008278:	f000 fc70 	bl	8008b5c <__lshift>
 800827c:	9001      	str	r0, [sp, #4]
 800827e:	9b06      	ldr	r3, [sp, #24]
 8008280:	2b00      	cmp	r3, #0
 8008282:	dd05      	ble.n	8008290 <_dtoa_r+0x768>
 8008284:	4621      	mov	r1, r4
 8008286:	461a      	mov	r2, r3
 8008288:	4648      	mov	r0, r9
 800828a:	f000 fc67 	bl	8008b5c <__lshift>
 800828e:	4604      	mov	r4, r0
 8008290:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008292:	2b00      	cmp	r3, #0
 8008294:	d060      	beq.n	8008358 <_dtoa_r+0x830>
 8008296:	9801      	ldr	r0, [sp, #4]
 8008298:	4621      	mov	r1, r4
 800829a:	f000 fccb 	bl	8008c34 <__mcmp>
 800829e:	2800      	cmp	r0, #0
 80082a0:	da5a      	bge.n	8008358 <_dtoa_r+0x830>
 80082a2:	f108 33ff 	add.w	r3, r8, #4294967295
 80082a6:	9305      	str	r3, [sp, #20]
 80082a8:	9901      	ldr	r1, [sp, #4]
 80082aa:	2300      	movs	r3, #0
 80082ac:	220a      	movs	r2, #10
 80082ae:	4648      	mov	r0, r9
 80082b0:	f000 fab0 	bl	8008814 <__multadd>
 80082b4:	9b08      	ldr	r3, [sp, #32]
 80082b6:	9001      	str	r0, [sp, #4]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	f000 8177 	beq.w	80085ac <_dtoa_r+0xa84>
 80082be:	4629      	mov	r1, r5
 80082c0:	2300      	movs	r3, #0
 80082c2:	220a      	movs	r2, #10
 80082c4:	4648      	mov	r0, r9
 80082c6:	f000 faa5 	bl	8008814 <__multadd>
 80082ca:	f1bb 0f00 	cmp.w	fp, #0
 80082ce:	4605      	mov	r5, r0
 80082d0:	dc6e      	bgt.n	80083b0 <_dtoa_r+0x888>
 80082d2:	9b07      	ldr	r3, [sp, #28]
 80082d4:	2b02      	cmp	r3, #2
 80082d6:	dc48      	bgt.n	800836a <_dtoa_r+0x842>
 80082d8:	e06a      	b.n	80083b0 <_dtoa_r+0x888>
 80082da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80082dc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80082e0:	e739      	b.n	8008156 <_dtoa_r+0x62e>
 80082e2:	f10a 34ff 	add.w	r4, sl, #4294967295
 80082e6:	42a3      	cmp	r3, r4
 80082e8:	db07      	blt.n	80082fa <_dtoa_r+0x7d2>
 80082ea:	f1ba 0f00 	cmp.w	sl, #0
 80082ee:	eba3 0404 	sub.w	r4, r3, r4
 80082f2:	db0b      	blt.n	800830c <_dtoa_r+0x7e4>
 80082f4:	9e04      	ldr	r6, [sp, #16]
 80082f6:	4652      	mov	r2, sl
 80082f8:	e72f      	b.n	800815a <_dtoa_r+0x632>
 80082fa:	1ae2      	subs	r2, r4, r3
 80082fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80082fe:	9e04      	ldr	r6, [sp, #16]
 8008300:	4413      	add	r3, r2
 8008302:	930a      	str	r3, [sp, #40]	@ 0x28
 8008304:	4652      	mov	r2, sl
 8008306:	4623      	mov	r3, r4
 8008308:	2400      	movs	r4, #0
 800830a:	e726      	b.n	800815a <_dtoa_r+0x632>
 800830c:	9a04      	ldr	r2, [sp, #16]
 800830e:	eba2 060a 	sub.w	r6, r2, sl
 8008312:	2200      	movs	r2, #0
 8008314:	e721      	b.n	800815a <_dtoa_r+0x632>
 8008316:	9e04      	ldr	r6, [sp, #16]
 8008318:	9d08      	ldr	r5, [sp, #32]
 800831a:	461c      	mov	r4, r3
 800831c:	e72a      	b.n	8008174 <_dtoa_r+0x64c>
 800831e:	9a01      	ldr	r2, [sp, #4]
 8008320:	9205      	str	r2, [sp, #20]
 8008322:	e752      	b.n	80081ca <_dtoa_r+0x6a2>
 8008324:	9901      	ldr	r1, [sp, #4]
 8008326:	461a      	mov	r2, r3
 8008328:	e751      	b.n	80081ce <_dtoa_r+0x6a6>
 800832a:	9b05      	ldr	r3, [sp, #20]
 800832c:	9301      	str	r3, [sp, #4]
 800832e:	e752      	b.n	80081d6 <_dtoa_r+0x6ae>
 8008330:	2300      	movs	r3, #0
 8008332:	e77b      	b.n	800822c <_dtoa_r+0x704>
 8008334:	9b02      	ldr	r3, [sp, #8]
 8008336:	e779      	b.n	800822c <_dtoa_r+0x704>
 8008338:	920b      	str	r2, [sp, #44]	@ 0x2c
 800833a:	e778      	b.n	800822e <_dtoa_r+0x706>
 800833c:	2300      	movs	r3, #0
 800833e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008340:	e779      	b.n	8008236 <_dtoa_r+0x70e>
 8008342:	d093      	beq.n	800826c <_dtoa_r+0x744>
 8008344:	9b04      	ldr	r3, [sp, #16]
 8008346:	321c      	adds	r2, #28
 8008348:	4413      	add	r3, r2
 800834a:	9304      	str	r3, [sp, #16]
 800834c:	9b06      	ldr	r3, [sp, #24]
 800834e:	4416      	add	r6, r2
 8008350:	4413      	add	r3, r2
 8008352:	e78a      	b.n	800826a <_dtoa_r+0x742>
 8008354:	4602      	mov	r2, r0
 8008356:	e7f5      	b.n	8008344 <_dtoa_r+0x81c>
 8008358:	f1ba 0f00 	cmp.w	sl, #0
 800835c:	f8cd 8014 	str.w	r8, [sp, #20]
 8008360:	46d3      	mov	fp, sl
 8008362:	dc21      	bgt.n	80083a8 <_dtoa_r+0x880>
 8008364:	9b07      	ldr	r3, [sp, #28]
 8008366:	2b02      	cmp	r3, #2
 8008368:	dd1e      	ble.n	80083a8 <_dtoa_r+0x880>
 800836a:	f1bb 0f00 	cmp.w	fp, #0
 800836e:	f47f addc 	bne.w	8007f2a <_dtoa_r+0x402>
 8008372:	4621      	mov	r1, r4
 8008374:	465b      	mov	r3, fp
 8008376:	2205      	movs	r2, #5
 8008378:	4648      	mov	r0, r9
 800837a:	f000 fa4b 	bl	8008814 <__multadd>
 800837e:	4601      	mov	r1, r0
 8008380:	4604      	mov	r4, r0
 8008382:	9801      	ldr	r0, [sp, #4]
 8008384:	f000 fc56 	bl	8008c34 <__mcmp>
 8008388:	2800      	cmp	r0, #0
 800838a:	f77f adce 	ble.w	8007f2a <_dtoa_r+0x402>
 800838e:	463e      	mov	r6, r7
 8008390:	2331      	movs	r3, #49	@ 0x31
 8008392:	f806 3b01 	strb.w	r3, [r6], #1
 8008396:	9b05      	ldr	r3, [sp, #20]
 8008398:	3301      	adds	r3, #1
 800839a:	9305      	str	r3, [sp, #20]
 800839c:	e5c9      	b.n	8007f32 <_dtoa_r+0x40a>
 800839e:	f8cd 8014 	str.w	r8, [sp, #20]
 80083a2:	4654      	mov	r4, sl
 80083a4:	4625      	mov	r5, r4
 80083a6:	e7f2      	b.n	800838e <_dtoa_r+0x866>
 80083a8:	9b08      	ldr	r3, [sp, #32]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	f000 8102 	beq.w	80085b4 <_dtoa_r+0xa8c>
 80083b0:	2e00      	cmp	r6, #0
 80083b2:	dd05      	ble.n	80083c0 <_dtoa_r+0x898>
 80083b4:	4629      	mov	r1, r5
 80083b6:	4632      	mov	r2, r6
 80083b8:	4648      	mov	r0, r9
 80083ba:	f000 fbcf 	bl	8008b5c <__lshift>
 80083be:	4605      	mov	r5, r0
 80083c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d058      	beq.n	8008478 <_dtoa_r+0x950>
 80083c6:	6869      	ldr	r1, [r5, #4]
 80083c8:	4648      	mov	r0, r9
 80083ca:	f000 f9c1 	bl	8008750 <_Balloc>
 80083ce:	4606      	mov	r6, r0
 80083d0:	b928      	cbnz	r0, 80083de <_dtoa_r+0x8b6>
 80083d2:	4b82      	ldr	r3, [pc, #520]	@ (80085dc <_dtoa_r+0xab4>)
 80083d4:	4602      	mov	r2, r0
 80083d6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80083da:	f7ff bbbe 	b.w	8007b5a <_dtoa_r+0x32>
 80083de:	692a      	ldr	r2, [r5, #16]
 80083e0:	3202      	adds	r2, #2
 80083e2:	0092      	lsls	r2, r2, #2
 80083e4:	f105 010c 	add.w	r1, r5, #12
 80083e8:	300c      	adds	r0, #12
 80083ea:	f000 ff59 	bl	80092a0 <memcpy>
 80083ee:	2201      	movs	r2, #1
 80083f0:	4631      	mov	r1, r6
 80083f2:	4648      	mov	r0, r9
 80083f4:	f000 fbb2 	bl	8008b5c <__lshift>
 80083f8:	1c7b      	adds	r3, r7, #1
 80083fa:	9304      	str	r3, [sp, #16]
 80083fc:	eb07 030b 	add.w	r3, r7, fp
 8008400:	9309      	str	r3, [sp, #36]	@ 0x24
 8008402:	9b02      	ldr	r3, [sp, #8]
 8008404:	f003 0301 	and.w	r3, r3, #1
 8008408:	46a8      	mov	r8, r5
 800840a:	9308      	str	r3, [sp, #32]
 800840c:	4605      	mov	r5, r0
 800840e:	9b04      	ldr	r3, [sp, #16]
 8008410:	9801      	ldr	r0, [sp, #4]
 8008412:	4621      	mov	r1, r4
 8008414:	f103 3bff 	add.w	fp, r3, #4294967295
 8008418:	f7ff fafb 	bl	8007a12 <quorem>
 800841c:	4641      	mov	r1, r8
 800841e:	9002      	str	r0, [sp, #8]
 8008420:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8008424:	9801      	ldr	r0, [sp, #4]
 8008426:	f000 fc05 	bl	8008c34 <__mcmp>
 800842a:	462a      	mov	r2, r5
 800842c:	9006      	str	r0, [sp, #24]
 800842e:	4621      	mov	r1, r4
 8008430:	4648      	mov	r0, r9
 8008432:	f000 fc1b 	bl	8008c6c <__mdiff>
 8008436:	68c2      	ldr	r2, [r0, #12]
 8008438:	4606      	mov	r6, r0
 800843a:	b9fa      	cbnz	r2, 800847c <_dtoa_r+0x954>
 800843c:	4601      	mov	r1, r0
 800843e:	9801      	ldr	r0, [sp, #4]
 8008440:	f000 fbf8 	bl	8008c34 <__mcmp>
 8008444:	4602      	mov	r2, r0
 8008446:	4631      	mov	r1, r6
 8008448:	4648      	mov	r0, r9
 800844a:	920a      	str	r2, [sp, #40]	@ 0x28
 800844c:	f000 f9c0 	bl	80087d0 <_Bfree>
 8008450:	9b07      	ldr	r3, [sp, #28]
 8008452:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008454:	9e04      	ldr	r6, [sp, #16]
 8008456:	ea42 0103 	orr.w	r1, r2, r3
 800845a:	9b08      	ldr	r3, [sp, #32]
 800845c:	4319      	orrs	r1, r3
 800845e:	d10f      	bne.n	8008480 <_dtoa_r+0x958>
 8008460:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8008464:	d028      	beq.n	80084b8 <_dtoa_r+0x990>
 8008466:	9b06      	ldr	r3, [sp, #24]
 8008468:	2b00      	cmp	r3, #0
 800846a:	dd02      	ble.n	8008472 <_dtoa_r+0x94a>
 800846c:	9b02      	ldr	r3, [sp, #8]
 800846e:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8008472:	f88b a000 	strb.w	sl, [fp]
 8008476:	e55e      	b.n	8007f36 <_dtoa_r+0x40e>
 8008478:	4628      	mov	r0, r5
 800847a:	e7bd      	b.n	80083f8 <_dtoa_r+0x8d0>
 800847c:	2201      	movs	r2, #1
 800847e:	e7e2      	b.n	8008446 <_dtoa_r+0x91e>
 8008480:	9b06      	ldr	r3, [sp, #24]
 8008482:	2b00      	cmp	r3, #0
 8008484:	db04      	blt.n	8008490 <_dtoa_r+0x968>
 8008486:	9907      	ldr	r1, [sp, #28]
 8008488:	430b      	orrs	r3, r1
 800848a:	9908      	ldr	r1, [sp, #32]
 800848c:	430b      	orrs	r3, r1
 800848e:	d120      	bne.n	80084d2 <_dtoa_r+0x9aa>
 8008490:	2a00      	cmp	r2, #0
 8008492:	ddee      	ble.n	8008472 <_dtoa_r+0x94a>
 8008494:	9901      	ldr	r1, [sp, #4]
 8008496:	2201      	movs	r2, #1
 8008498:	4648      	mov	r0, r9
 800849a:	f000 fb5f 	bl	8008b5c <__lshift>
 800849e:	4621      	mov	r1, r4
 80084a0:	9001      	str	r0, [sp, #4]
 80084a2:	f000 fbc7 	bl	8008c34 <__mcmp>
 80084a6:	2800      	cmp	r0, #0
 80084a8:	dc03      	bgt.n	80084b2 <_dtoa_r+0x98a>
 80084aa:	d1e2      	bne.n	8008472 <_dtoa_r+0x94a>
 80084ac:	f01a 0f01 	tst.w	sl, #1
 80084b0:	d0df      	beq.n	8008472 <_dtoa_r+0x94a>
 80084b2:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80084b6:	d1d9      	bne.n	800846c <_dtoa_r+0x944>
 80084b8:	2339      	movs	r3, #57	@ 0x39
 80084ba:	f88b 3000 	strb.w	r3, [fp]
 80084be:	4633      	mov	r3, r6
 80084c0:	461e      	mov	r6, r3
 80084c2:	3b01      	subs	r3, #1
 80084c4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80084c8:	2a39      	cmp	r2, #57	@ 0x39
 80084ca:	d052      	beq.n	8008572 <_dtoa_r+0xa4a>
 80084cc:	3201      	adds	r2, #1
 80084ce:	701a      	strb	r2, [r3, #0]
 80084d0:	e531      	b.n	8007f36 <_dtoa_r+0x40e>
 80084d2:	2a00      	cmp	r2, #0
 80084d4:	dd07      	ble.n	80084e6 <_dtoa_r+0x9be>
 80084d6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80084da:	d0ed      	beq.n	80084b8 <_dtoa_r+0x990>
 80084dc:	f10a 0301 	add.w	r3, sl, #1
 80084e0:	f88b 3000 	strb.w	r3, [fp]
 80084e4:	e527      	b.n	8007f36 <_dtoa_r+0x40e>
 80084e6:	9b04      	ldr	r3, [sp, #16]
 80084e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80084ea:	f803 ac01 	strb.w	sl, [r3, #-1]
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d029      	beq.n	8008546 <_dtoa_r+0xa1e>
 80084f2:	9901      	ldr	r1, [sp, #4]
 80084f4:	2300      	movs	r3, #0
 80084f6:	220a      	movs	r2, #10
 80084f8:	4648      	mov	r0, r9
 80084fa:	f000 f98b 	bl	8008814 <__multadd>
 80084fe:	45a8      	cmp	r8, r5
 8008500:	9001      	str	r0, [sp, #4]
 8008502:	f04f 0300 	mov.w	r3, #0
 8008506:	f04f 020a 	mov.w	r2, #10
 800850a:	4641      	mov	r1, r8
 800850c:	4648      	mov	r0, r9
 800850e:	d107      	bne.n	8008520 <_dtoa_r+0x9f8>
 8008510:	f000 f980 	bl	8008814 <__multadd>
 8008514:	4680      	mov	r8, r0
 8008516:	4605      	mov	r5, r0
 8008518:	9b04      	ldr	r3, [sp, #16]
 800851a:	3301      	adds	r3, #1
 800851c:	9304      	str	r3, [sp, #16]
 800851e:	e776      	b.n	800840e <_dtoa_r+0x8e6>
 8008520:	f000 f978 	bl	8008814 <__multadd>
 8008524:	4629      	mov	r1, r5
 8008526:	4680      	mov	r8, r0
 8008528:	2300      	movs	r3, #0
 800852a:	220a      	movs	r2, #10
 800852c:	4648      	mov	r0, r9
 800852e:	f000 f971 	bl	8008814 <__multadd>
 8008532:	4605      	mov	r5, r0
 8008534:	e7f0      	b.n	8008518 <_dtoa_r+0x9f0>
 8008536:	f1bb 0f00 	cmp.w	fp, #0
 800853a:	bfcc      	ite	gt
 800853c:	465e      	movgt	r6, fp
 800853e:	2601      	movle	r6, #1
 8008540:	443e      	add	r6, r7
 8008542:	f04f 0800 	mov.w	r8, #0
 8008546:	9901      	ldr	r1, [sp, #4]
 8008548:	2201      	movs	r2, #1
 800854a:	4648      	mov	r0, r9
 800854c:	f000 fb06 	bl	8008b5c <__lshift>
 8008550:	4621      	mov	r1, r4
 8008552:	9001      	str	r0, [sp, #4]
 8008554:	f000 fb6e 	bl	8008c34 <__mcmp>
 8008558:	2800      	cmp	r0, #0
 800855a:	dcb0      	bgt.n	80084be <_dtoa_r+0x996>
 800855c:	d102      	bne.n	8008564 <_dtoa_r+0xa3c>
 800855e:	f01a 0f01 	tst.w	sl, #1
 8008562:	d1ac      	bne.n	80084be <_dtoa_r+0x996>
 8008564:	4633      	mov	r3, r6
 8008566:	461e      	mov	r6, r3
 8008568:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800856c:	2a30      	cmp	r2, #48	@ 0x30
 800856e:	d0fa      	beq.n	8008566 <_dtoa_r+0xa3e>
 8008570:	e4e1      	b.n	8007f36 <_dtoa_r+0x40e>
 8008572:	429f      	cmp	r7, r3
 8008574:	d1a4      	bne.n	80084c0 <_dtoa_r+0x998>
 8008576:	9b05      	ldr	r3, [sp, #20]
 8008578:	3301      	adds	r3, #1
 800857a:	9305      	str	r3, [sp, #20]
 800857c:	2331      	movs	r3, #49	@ 0x31
 800857e:	703b      	strb	r3, [r7, #0]
 8008580:	e4d9      	b.n	8007f36 <_dtoa_r+0x40e>
 8008582:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008584:	4f16      	ldr	r7, [pc, #88]	@ (80085e0 <_dtoa_r+0xab8>)
 8008586:	b11b      	cbz	r3, 8008590 <_dtoa_r+0xa68>
 8008588:	f107 0308 	add.w	r3, r7, #8
 800858c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800858e:	6013      	str	r3, [r2, #0]
 8008590:	4638      	mov	r0, r7
 8008592:	b011      	add	sp, #68	@ 0x44
 8008594:	ecbd 8b02 	vpop	{d8}
 8008598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800859c:	9b07      	ldr	r3, [sp, #28]
 800859e:	2b01      	cmp	r3, #1
 80085a0:	f77f ae2c 	ble.w	80081fc <_dtoa_r+0x6d4>
 80085a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80085a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80085a8:	2001      	movs	r0, #1
 80085aa:	e64c      	b.n	8008246 <_dtoa_r+0x71e>
 80085ac:	f1bb 0f00 	cmp.w	fp, #0
 80085b0:	f77f aed8 	ble.w	8008364 <_dtoa_r+0x83c>
 80085b4:	463e      	mov	r6, r7
 80085b6:	9801      	ldr	r0, [sp, #4]
 80085b8:	4621      	mov	r1, r4
 80085ba:	f7ff fa2a 	bl	8007a12 <quorem>
 80085be:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80085c2:	f806 ab01 	strb.w	sl, [r6], #1
 80085c6:	1bf2      	subs	r2, r6, r7
 80085c8:	4593      	cmp	fp, r2
 80085ca:	ddb4      	ble.n	8008536 <_dtoa_r+0xa0e>
 80085cc:	9901      	ldr	r1, [sp, #4]
 80085ce:	2300      	movs	r3, #0
 80085d0:	220a      	movs	r2, #10
 80085d2:	4648      	mov	r0, r9
 80085d4:	f000 f91e 	bl	8008814 <__multadd>
 80085d8:	9001      	str	r0, [sp, #4]
 80085da:	e7ec      	b.n	80085b6 <_dtoa_r+0xa8e>
 80085dc:	08010998 	.word	0x08010998
 80085e0:	0801091c 	.word	0x0801091c

080085e4 <malloc>:
 80085e4:	4b02      	ldr	r3, [pc, #8]	@ (80085f0 <malloc+0xc>)
 80085e6:	4601      	mov	r1, r0
 80085e8:	6818      	ldr	r0, [r3, #0]
 80085ea:	f000 b825 	b.w	8008638 <_malloc_r>
 80085ee:	bf00      	nop
 80085f0:	2400008c 	.word	0x2400008c

080085f4 <sbrk_aligned>:
 80085f4:	b570      	push	{r4, r5, r6, lr}
 80085f6:	4e0f      	ldr	r6, [pc, #60]	@ (8008634 <sbrk_aligned+0x40>)
 80085f8:	460c      	mov	r4, r1
 80085fa:	6831      	ldr	r1, [r6, #0]
 80085fc:	4605      	mov	r5, r0
 80085fe:	b911      	cbnz	r1, 8008606 <sbrk_aligned+0x12>
 8008600:	f000 fe3e 	bl	8009280 <_sbrk_r>
 8008604:	6030      	str	r0, [r6, #0]
 8008606:	4621      	mov	r1, r4
 8008608:	4628      	mov	r0, r5
 800860a:	f000 fe39 	bl	8009280 <_sbrk_r>
 800860e:	1c43      	adds	r3, r0, #1
 8008610:	d103      	bne.n	800861a <sbrk_aligned+0x26>
 8008612:	f04f 34ff 	mov.w	r4, #4294967295
 8008616:	4620      	mov	r0, r4
 8008618:	bd70      	pop	{r4, r5, r6, pc}
 800861a:	1cc4      	adds	r4, r0, #3
 800861c:	f024 0403 	bic.w	r4, r4, #3
 8008620:	42a0      	cmp	r0, r4
 8008622:	d0f8      	beq.n	8008616 <sbrk_aligned+0x22>
 8008624:	1a21      	subs	r1, r4, r0
 8008626:	4628      	mov	r0, r5
 8008628:	f000 fe2a 	bl	8009280 <_sbrk_r>
 800862c:	3001      	adds	r0, #1
 800862e:	d1f2      	bne.n	8008616 <sbrk_aligned+0x22>
 8008630:	e7ef      	b.n	8008612 <sbrk_aligned+0x1e>
 8008632:	bf00      	nop
 8008634:	24000b88 	.word	0x24000b88

08008638 <_malloc_r>:
 8008638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800863c:	1ccd      	adds	r5, r1, #3
 800863e:	f025 0503 	bic.w	r5, r5, #3
 8008642:	3508      	adds	r5, #8
 8008644:	2d0c      	cmp	r5, #12
 8008646:	bf38      	it	cc
 8008648:	250c      	movcc	r5, #12
 800864a:	2d00      	cmp	r5, #0
 800864c:	4606      	mov	r6, r0
 800864e:	db01      	blt.n	8008654 <_malloc_r+0x1c>
 8008650:	42a9      	cmp	r1, r5
 8008652:	d904      	bls.n	800865e <_malloc_r+0x26>
 8008654:	230c      	movs	r3, #12
 8008656:	6033      	str	r3, [r6, #0]
 8008658:	2000      	movs	r0, #0
 800865a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800865e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008734 <_malloc_r+0xfc>
 8008662:	f000 f869 	bl	8008738 <__malloc_lock>
 8008666:	f8d8 3000 	ldr.w	r3, [r8]
 800866a:	461c      	mov	r4, r3
 800866c:	bb44      	cbnz	r4, 80086c0 <_malloc_r+0x88>
 800866e:	4629      	mov	r1, r5
 8008670:	4630      	mov	r0, r6
 8008672:	f7ff ffbf 	bl	80085f4 <sbrk_aligned>
 8008676:	1c43      	adds	r3, r0, #1
 8008678:	4604      	mov	r4, r0
 800867a:	d158      	bne.n	800872e <_malloc_r+0xf6>
 800867c:	f8d8 4000 	ldr.w	r4, [r8]
 8008680:	4627      	mov	r7, r4
 8008682:	2f00      	cmp	r7, #0
 8008684:	d143      	bne.n	800870e <_malloc_r+0xd6>
 8008686:	2c00      	cmp	r4, #0
 8008688:	d04b      	beq.n	8008722 <_malloc_r+0xea>
 800868a:	6823      	ldr	r3, [r4, #0]
 800868c:	4639      	mov	r1, r7
 800868e:	4630      	mov	r0, r6
 8008690:	eb04 0903 	add.w	r9, r4, r3
 8008694:	f000 fdf4 	bl	8009280 <_sbrk_r>
 8008698:	4581      	cmp	r9, r0
 800869a:	d142      	bne.n	8008722 <_malloc_r+0xea>
 800869c:	6821      	ldr	r1, [r4, #0]
 800869e:	1a6d      	subs	r5, r5, r1
 80086a0:	4629      	mov	r1, r5
 80086a2:	4630      	mov	r0, r6
 80086a4:	f7ff ffa6 	bl	80085f4 <sbrk_aligned>
 80086a8:	3001      	adds	r0, #1
 80086aa:	d03a      	beq.n	8008722 <_malloc_r+0xea>
 80086ac:	6823      	ldr	r3, [r4, #0]
 80086ae:	442b      	add	r3, r5
 80086b0:	6023      	str	r3, [r4, #0]
 80086b2:	f8d8 3000 	ldr.w	r3, [r8]
 80086b6:	685a      	ldr	r2, [r3, #4]
 80086b8:	bb62      	cbnz	r2, 8008714 <_malloc_r+0xdc>
 80086ba:	f8c8 7000 	str.w	r7, [r8]
 80086be:	e00f      	b.n	80086e0 <_malloc_r+0xa8>
 80086c0:	6822      	ldr	r2, [r4, #0]
 80086c2:	1b52      	subs	r2, r2, r5
 80086c4:	d420      	bmi.n	8008708 <_malloc_r+0xd0>
 80086c6:	2a0b      	cmp	r2, #11
 80086c8:	d917      	bls.n	80086fa <_malloc_r+0xc2>
 80086ca:	1961      	adds	r1, r4, r5
 80086cc:	42a3      	cmp	r3, r4
 80086ce:	6025      	str	r5, [r4, #0]
 80086d0:	bf18      	it	ne
 80086d2:	6059      	strne	r1, [r3, #4]
 80086d4:	6863      	ldr	r3, [r4, #4]
 80086d6:	bf08      	it	eq
 80086d8:	f8c8 1000 	streq.w	r1, [r8]
 80086dc:	5162      	str	r2, [r4, r5]
 80086de:	604b      	str	r3, [r1, #4]
 80086e0:	4630      	mov	r0, r6
 80086e2:	f000 f82f 	bl	8008744 <__malloc_unlock>
 80086e6:	f104 000b 	add.w	r0, r4, #11
 80086ea:	1d23      	adds	r3, r4, #4
 80086ec:	f020 0007 	bic.w	r0, r0, #7
 80086f0:	1ac2      	subs	r2, r0, r3
 80086f2:	bf1c      	itt	ne
 80086f4:	1a1b      	subne	r3, r3, r0
 80086f6:	50a3      	strne	r3, [r4, r2]
 80086f8:	e7af      	b.n	800865a <_malloc_r+0x22>
 80086fa:	6862      	ldr	r2, [r4, #4]
 80086fc:	42a3      	cmp	r3, r4
 80086fe:	bf0c      	ite	eq
 8008700:	f8c8 2000 	streq.w	r2, [r8]
 8008704:	605a      	strne	r2, [r3, #4]
 8008706:	e7eb      	b.n	80086e0 <_malloc_r+0xa8>
 8008708:	4623      	mov	r3, r4
 800870a:	6864      	ldr	r4, [r4, #4]
 800870c:	e7ae      	b.n	800866c <_malloc_r+0x34>
 800870e:	463c      	mov	r4, r7
 8008710:	687f      	ldr	r7, [r7, #4]
 8008712:	e7b6      	b.n	8008682 <_malloc_r+0x4a>
 8008714:	461a      	mov	r2, r3
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	42a3      	cmp	r3, r4
 800871a:	d1fb      	bne.n	8008714 <_malloc_r+0xdc>
 800871c:	2300      	movs	r3, #0
 800871e:	6053      	str	r3, [r2, #4]
 8008720:	e7de      	b.n	80086e0 <_malloc_r+0xa8>
 8008722:	230c      	movs	r3, #12
 8008724:	6033      	str	r3, [r6, #0]
 8008726:	4630      	mov	r0, r6
 8008728:	f000 f80c 	bl	8008744 <__malloc_unlock>
 800872c:	e794      	b.n	8008658 <_malloc_r+0x20>
 800872e:	6005      	str	r5, [r0, #0]
 8008730:	e7d6      	b.n	80086e0 <_malloc_r+0xa8>
 8008732:	bf00      	nop
 8008734:	24000b8c 	.word	0x24000b8c

08008738 <__malloc_lock>:
 8008738:	4801      	ldr	r0, [pc, #4]	@ (8008740 <__malloc_lock+0x8>)
 800873a:	f7ff b968 	b.w	8007a0e <__retarget_lock_acquire_recursive>
 800873e:	bf00      	nop
 8008740:	24000b84 	.word	0x24000b84

08008744 <__malloc_unlock>:
 8008744:	4801      	ldr	r0, [pc, #4]	@ (800874c <__malloc_unlock+0x8>)
 8008746:	f7ff b963 	b.w	8007a10 <__retarget_lock_release_recursive>
 800874a:	bf00      	nop
 800874c:	24000b84 	.word	0x24000b84

08008750 <_Balloc>:
 8008750:	b570      	push	{r4, r5, r6, lr}
 8008752:	69c6      	ldr	r6, [r0, #28]
 8008754:	4604      	mov	r4, r0
 8008756:	460d      	mov	r5, r1
 8008758:	b976      	cbnz	r6, 8008778 <_Balloc+0x28>
 800875a:	2010      	movs	r0, #16
 800875c:	f7ff ff42 	bl	80085e4 <malloc>
 8008760:	4602      	mov	r2, r0
 8008762:	61e0      	str	r0, [r4, #28]
 8008764:	b920      	cbnz	r0, 8008770 <_Balloc+0x20>
 8008766:	4b18      	ldr	r3, [pc, #96]	@ (80087c8 <_Balloc+0x78>)
 8008768:	4818      	ldr	r0, [pc, #96]	@ (80087cc <_Balloc+0x7c>)
 800876a:	216b      	movs	r1, #107	@ 0x6b
 800876c:	f000 fda6 	bl	80092bc <__assert_func>
 8008770:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008774:	6006      	str	r6, [r0, #0]
 8008776:	60c6      	str	r6, [r0, #12]
 8008778:	69e6      	ldr	r6, [r4, #28]
 800877a:	68f3      	ldr	r3, [r6, #12]
 800877c:	b183      	cbz	r3, 80087a0 <_Balloc+0x50>
 800877e:	69e3      	ldr	r3, [r4, #28]
 8008780:	68db      	ldr	r3, [r3, #12]
 8008782:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008786:	b9b8      	cbnz	r0, 80087b8 <_Balloc+0x68>
 8008788:	2101      	movs	r1, #1
 800878a:	fa01 f605 	lsl.w	r6, r1, r5
 800878e:	1d72      	adds	r2, r6, #5
 8008790:	0092      	lsls	r2, r2, #2
 8008792:	4620      	mov	r0, r4
 8008794:	f000 fdb0 	bl	80092f8 <_calloc_r>
 8008798:	b160      	cbz	r0, 80087b4 <_Balloc+0x64>
 800879a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800879e:	e00e      	b.n	80087be <_Balloc+0x6e>
 80087a0:	2221      	movs	r2, #33	@ 0x21
 80087a2:	2104      	movs	r1, #4
 80087a4:	4620      	mov	r0, r4
 80087a6:	f000 fda7 	bl	80092f8 <_calloc_r>
 80087aa:	69e3      	ldr	r3, [r4, #28]
 80087ac:	60f0      	str	r0, [r6, #12]
 80087ae:	68db      	ldr	r3, [r3, #12]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d1e4      	bne.n	800877e <_Balloc+0x2e>
 80087b4:	2000      	movs	r0, #0
 80087b6:	bd70      	pop	{r4, r5, r6, pc}
 80087b8:	6802      	ldr	r2, [r0, #0]
 80087ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80087be:	2300      	movs	r3, #0
 80087c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80087c4:	e7f7      	b.n	80087b6 <_Balloc+0x66>
 80087c6:	bf00      	nop
 80087c8:	08010929 	.word	0x08010929
 80087cc:	080109a9 	.word	0x080109a9

080087d0 <_Bfree>:
 80087d0:	b570      	push	{r4, r5, r6, lr}
 80087d2:	69c6      	ldr	r6, [r0, #28]
 80087d4:	4605      	mov	r5, r0
 80087d6:	460c      	mov	r4, r1
 80087d8:	b976      	cbnz	r6, 80087f8 <_Bfree+0x28>
 80087da:	2010      	movs	r0, #16
 80087dc:	f7ff ff02 	bl	80085e4 <malloc>
 80087e0:	4602      	mov	r2, r0
 80087e2:	61e8      	str	r0, [r5, #28]
 80087e4:	b920      	cbnz	r0, 80087f0 <_Bfree+0x20>
 80087e6:	4b09      	ldr	r3, [pc, #36]	@ (800880c <_Bfree+0x3c>)
 80087e8:	4809      	ldr	r0, [pc, #36]	@ (8008810 <_Bfree+0x40>)
 80087ea:	218f      	movs	r1, #143	@ 0x8f
 80087ec:	f000 fd66 	bl	80092bc <__assert_func>
 80087f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80087f4:	6006      	str	r6, [r0, #0]
 80087f6:	60c6      	str	r6, [r0, #12]
 80087f8:	b13c      	cbz	r4, 800880a <_Bfree+0x3a>
 80087fa:	69eb      	ldr	r3, [r5, #28]
 80087fc:	6862      	ldr	r2, [r4, #4]
 80087fe:	68db      	ldr	r3, [r3, #12]
 8008800:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008804:	6021      	str	r1, [r4, #0]
 8008806:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800880a:	bd70      	pop	{r4, r5, r6, pc}
 800880c:	08010929 	.word	0x08010929
 8008810:	080109a9 	.word	0x080109a9

08008814 <__multadd>:
 8008814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008818:	690d      	ldr	r5, [r1, #16]
 800881a:	4607      	mov	r7, r0
 800881c:	460c      	mov	r4, r1
 800881e:	461e      	mov	r6, r3
 8008820:	f101 0c14 	add.w	ip, r1, #20
 8008824:	2000      	movs	r0, #0
 8008826:	f8dc 3000 	ldr.w	r3, [ip]
 800882a:	b299      	uxth	r1, r3
 800882c:	fb02 6101 	mla	r1, r2, r1, r6
 8008830:	0c1e      	lsrs	r6, r3, #16
 8008832:	0c0b      	lsrs	r3, r1, #16
 8008834:	fb02 3306 	mla	r3, r2, r6, r3
 8008838:	b289      	uxth	r1, r1
 800883a:	3001      	adds	r0, #1
 800883c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008840:	4285      	cmp	r5, r0
 8008842:	f84c 1b04 	str.w	r1, [ip], #4
 8008846:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800884a:	dcec      	bgt.n	8008826 <__multadd+0x12>
 800884c:	b30e      	cbz	r6, 8008892 <__multadd+0x7e>
 800884e:	68a3      	ldr	r3, [r4, #8]
 8008850:	42ab      	cmp	r3, r5
 8008852:	dc19      	bgt.n	8008888 <__multadd+0x74>
 8008854:	6861      	ldr	r1, [r4, #4]
 8008856:	4638      	mov	r0, r7
 8008858:	3101      	adds	r1, #1
 800885a:	f7ff ff79 	bl	8008750 <_Balloc>
 800885e:	4680      	mov	r8, r0
 8008860:	b928      	cbnz	r0, 800886e <__multadd+0x5a>
 8008862:	4602      	mov	r2, r0
 8008864:	4b0c      	ldr	r3, [pc, #48]	@ (8008898 <__multadd+0x84>)
 8008866:	480d      	ldr	r0, [pc, #52]	@ (800889c <__multadd+0x88>)
 8008868:	21ba      	movs	r1, #186	@ 0xba
 800886a:	f000 fd27 	bl	80092bc <__assert_func>
 800886e:	6922      	ldr	r2, [r4, #16]
 8008870:	3202      	adds	r2, #2
 8008872:	f104 010c 	add.w	r1, r4, #12
 8008876:	0092      	lsls	r2, r2, #2
 8008878:	300c      	adds	r0, #12
 800887a:	f000 fd11 	bl	80092a0 <memcpy>
 800887e:	4621      	mov	r1, r4
 8008880:	4638      	mov	r0, r7
 8008882:	f7ff ffa5 	bl	80087d0 <_Bfree>
 8008886:	4644      	mov	r4, r8
 8008888:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800888c:	3501      	adds	r5, #1
 800888e:	615e      	str	r6, [r3, #20]
 8008890:	6125      	str	r5, [r4, #16]
 8008892:	4620      	mov	r0, r4
 8008894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008898:	08010998 	.word	0x08010998
 800889c:	080109a9 	.word	0x080109a9

080088a0 <__hi0bits>:
 80088a0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80088a4:	4603      	mov	r3, r0
 80088a6:	bf36      	itet	cc
 80088a8:	0403      	lslcc	r3, r0, #16
 80088aa:	2000      	movcs	r0, #0
 80088ac:	2010      	movcc	r0, #16
 80088ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80088b2:	bf3c      	itt	cc
 80088b4:	021b      	lslcc	r3, r3, #8
 80088b6:	3008      	addcc	r0, #8
 80088b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80088bc:	bf3c      	itt	cc
 80088be:	011b      	lslcc	r3, r3, #4
 80088c0:	3004      	addcc	r0, #4
 80088c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088c6:	bf3c      	itt	cc
 80088c8:	009b      	lslcc	r3, r3, #2
 80088ca:	3002      	addcc	r0, #2
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	db05      	blt.n	80088dc <__hi0bits+0x3c>
 80088d0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80088d4:	f100 0001 	add.w	r0, r0, #1
 80088d8:	bf08      	it	eq
 80088da:	2020      	moveq	r0, #32
 80088dc:	4770      	bx	lr

080088de <__lo0bits>:
 80088de:	6803      	ldr	r3, [r0, #0]
 80088e0:	4602      	mov	r2, r0
 80088e2:	f013 0007 	ands.w	r0, r3, #7
 80088e6:	d00b      	beq.n	8008900 <__lo0bits+0x22>
 80088e8:	07d9      	lsls	r1, r3, #31
 80088ea:	d421      	bmi.n	8008930 <__lo0bits+0x52>
 80088ec:	0798      	lsls	r0, r3, #30
 80088ee:	bf49      	itett	mi
 80088f0:	085b      	lsrmi	r3, r3, #1
 80088f2:	089b      	lsrpl	r3, r3, #2
 80088f4:	2001      	movmi	r0, #1
 80088f6:	6013      	strmi	r3, [r2, #0]
 80088f8:	bf5c      	itt	pl
 80088fa:	6013      	strpl	r3, [r2, #0]
 80088fc:	2002      	movpl	r0, #2
 80088fe:	4770      	bx	lr
 8008900:	b299      	uxth	r1, r3
 8008902:	b909      	cbnz	r1, 8008908 <__lo0bits+0x2a>
 8008904:	0c1b      	lsrs	r3, r3, #16
 8008906:	2010      	movs	r0, #16
 8008908:	b2d9      	uxtb	r1, r3
 800890a:	b909      	cbnz	r1, 8008910 <__lo0bits+0x32>
 800890c:	3008      	adds	r0, #8
 800890e:	0a1b      	lsrs	r3, r3, #8
 8008910:	0719      	lsls	r1, r3, #28
 8008912:	bf04      	itt	eq
 8008914:	091b      	lsreq	r3, r3, #4
 8008916:	3004      	addeq	r0, #4
 8008918:	0799      	lsls	r1, r3, #30
 800891a:	bf04      	itt	eq
 800891c:	089b      	lsreq	r3, r3, #2
 800891e:	3002      	addeq	r0, #2
 8008920:	07d9      	lsls	r1, r3, #31
 8008922:	d403      	bmi.n	800892c <__lo0bits+0x4e>
 8008924:	085b      	lsrs	r3, r3, #1
 8008926:	f100 0001 	add.w	r0, r0, #1
 800892a:	d003      	beq.n	8008934 <__lo0bits+0x56>
 800892c:	6013      	str	r3, [r2, #0]
 800892e:	4770      	bx	lr
 8008930:	2000      	movs	r0, #0
 8008932:	4770      	bx	lr
 8008934:	2020      	movs	r0, #32
 8008936:	4770      	bx	lr

08008938 <__i2b>:
 8008938:	b510      	push	{r4, lr}
 800893a:	460c      	mov	r4, r1
 800893c:	2101      	movs	r1, #1
 800893e:	f7ff ff07 	bl	8008750 <_Balloc>
 8008942:	4602      	mov	r2, r0
 8008944:	b928      	cbnz	r0, 8008952 <__i2b+0x1a>
 8008946:	4b05      	ldr	r3, [pc, #20]	@ (800895c <__i2b+0x24>)
 8008948:	4805      	ldr	r0, [pc, #20]	@ (8008960 <__i2b+0x28>)
 800894a:	f240 1145 	movw	r1, #325	@ 0x145
 800894e:	f000 fcb5 	bl	80092bc <__assert_func>
 8008952:	2301      	movs	r3, #1
 8008954:	6144      	str	r4, [r0, #20]
 8008956:	6103      	str	r3, [r0, #16]
 8008958:	bd10      	pop	{r4, pc}
 800895a:	bf00      	nop
 800895c:	08010998 	.word	0x08010998
 8008960:	080109a9 	.word	0x080109a9

08008964 <__multiply>:
 8008964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008968:	4617      	mov	r7, r2
 800896a:	690a      	ldr	r2, [r1, #16]
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	429a      	cmp	r2, r3
 8008970:	bfa8      	it	ge
 8008972:	463b      	movge	r3, r7
 8008974:	4689      	mov	r9, r1
 8008976:	bfa4      	itt	ge
 8008978:	460f      	movge	r7, r1
 800897a:	4699      	movge	r9, r3
 800897c:	693d      	ldr	r5, [r7, #16]
 800897e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	6879      	ldr	r1, [r7, #4]
 8008986:	eb05 060a 	add.w	r6, r5, sl
 800898a:	42b3      	cmp	r3, r6
 800898c:	b085      	sub	sp, #20
 800898e:	bfb8      	it	lt
 8008990:	3101      	addlt	r1, #1
 8008992:	f7ff fedd 	bl	8008750 <_Balloc>
 8008996:	b930      	cbnz	r0, 80089a6 <__multiply+0x42>
 8008998:	4602      	mov	r2, r0
 800899a:	4b41      	ldr	r3, [pc, #260]	@ (8008aa0 <__multiply+0x13c>)
 800899c:	4841      	ldr	r0, [pc, #260]	@ (8008aa4 <__multiply+0x140>)
 800899e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80089a2:	f000 fc8b 	bl	80092bc <__assert_func>
 80089a6:	f100 0414 	add.w	r4, r0, #20
 80089aa:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80089ae:	4623      	mov	r3, r4
 80089b0:	2200      	movs	r2, #0
 80089b2:	4573      	cmp	r3, lr
 80089b4:	d320      	bcc.n	80089f8 <__multiply+0x94>
 80089b6:	f107 0814 	add.w	r8, r7, #20
 80089ba:	f109 0114 	add.w	r1, r9, #20
 80089be:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80089c2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80089c6:	9302      	str	r3, [sp, #8]
 80089c8:	1beb      	subs	r3, r5, r7
 80089ca:	3b15      	subs	r3, #21
 80089cc:	f023 0303 	bic.w	r3, r3, #3
 80089d0:	3304      	adds	r3, #4
 80089d2:	3715      	adds	r7, #21
 80089d4:	42bd      	cmp	r5, r7
 80089d6:	bf38      	it	cc
 80089d8:	2304      	movcc	r3, #4
 80089da:	9301      	str	r3, [sp, #4]
 80089dc:	9b02      	ldr	r3, [sp, #8]
 80089de:	9103      	str	r1, [sp, #12]
 80089e0:	428b      	cmp	r3, r1
 80089e2:	d80c      	bhi.n	80089fe <__multiply+0x9a>
 80089e4:	2e00      	cmp	r6, #0
 80089e6:	dd03      	ble.n	80089f0 <__multiply+0x8c>
 80089e8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d055      	beq.n	8008a9c <__multiply+0x138>
 80089f0:	6106      	str	r6, [r0, #16]
 80089f2:	b005      	add	sp, #20
 80089f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089f8:	f843 2b04 	str.w	r2, [r3], #4
 80089fc:	e7d9      	b.n	80089b2 <__multiply+0x4e>
 80089fe:	f8b1 a000 	ldrh.w	sl, [r1]
 8008a02:	f1ba 0f00 	cmp.w	sl, #0
 8008a06:	d01f      	beq.n	8008a48 <__multiply+0xe4>
 8008a08:	46c4      	mov	ip, r8
 8008a0a:	46a1      	mov	r9, r4
 8008a0c:	2700      	movs	r7, #0
 8008a0e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008a12:	f8d9 3000 	ldr.w	r3, [r9]
 8008a16:	fa1f fb82 	uxth.w	fp, r2
 8008a1a:	b29b      	uxth	r3, r3
 8008a1c:	fb0a 330b 	mla	r3, sl, fp, r3
 8008a20:	443b      	add	r3, r7
 8008a22:	f8d9 7000 	ldr.w	r7, [r9]
 8008a26:	0c12      	lsrs	r2, r2, #16
 8008a28:	0c3f      	lsrs	r7, r7, #16
 8008a2a:	fb0a 7202 	mla	r2, sl, r2, r7
 8008a2e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008a32:	b29b      	uxth	r3, r3
 8008a34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a38:	4565      	cmp	r5, ip
 8008a3a:	f849 3b04 	str.w	r3, [r9], #4
 8008a3e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008a42:	d8e4      	bhi.n	8008a0e <__multiply+0xaa>
 8008a44:	9b01      	ldr	r3, [sp, #4]
 8008a46:	50e7      	str	r7, [r4, r3]
 8008a48:	9b03      	ldr	r3, [sp, #12]
 8008a4a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008a4e:	3104      	adds	r1, #4
 8008a50:	f1b9 0f00 	cmp.w	r9, #0
 8008a54:	d020      	beq.n	8008a98 <__multiply+0x134>
 8008a56:	6823      	ldr	r3, [r4, #0]
 8008a58:	4647      	mov	r7, r8
 8008a5a:	46a4      	mov	ip, r4
 8008a5c:	f04f 0a00 	mov.w	sl, #0
 8008a60:	f8b7 b000 	ldrh.w	fp, [r7]
 8008a64:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008a68:	fb09 220b 	mla	r2, r9, fp, r2
 8008a6c:	4452      	add	r2, sl
 8008a6e:	b29b      	uxth	r3, r3
 8008a70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a74:	f84c 3b04 	str.w	r3, [ip], #4
 8008a78:	f857 3b04 	ldr.w	r3, [r7], #4
 8008a7c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008a80:	f8bc 3000 	ldrh.w	r3, [ip]
 8008a84:	fb09 330a 	mla	r3, r9, sl, r3
 8008a88:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008a8c:	42bd      	cmp	r5, r7
 8008a8e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008a92:	d8e5      	bhi.n	8008a60 <__multiply+0xfc>
 8008a94:	9a01      	ldr	r2, [sp, #4]
 8008a96:	50a3      	str	r3, [r4, r2]
 8008a98:	3404      	adds	r4, #4
 8008a9a:	e79f      	b.n	80089dc <__multiply+0x78>
 8008a9c:	3e01      	subs	r6, #1
 8008a9e:	e7a1      	b.n	80089e4 <__multiply+0x80>
 8008aa0:	08010998 	.word	0x08010998
 8008aa4:	080109a9 	.word	0x080109a9

08008aa8 <__pow5mult>:
 8008aa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008aac:	4615      	mov	r5, r2
 8008aae:	f012 0203 	ands.w	r2, r2, #3
 8008ab2:	4607      	mov	r7, r0
 8008ab4:	460e      	mov	r6, r1
 8008ab6:	d007      	beq.n	8008ac8 <__pow5mult+0x20>
 8008ab8:	4c25      	ldr	r4, [pc, #148]	@ (8008b50 <__pow5mult+0xa8>)
 8008aba:	3a01      	subs	r2, #1
 8008abc:	2300      	movs	r3, #0
 8008abe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008ac2:	f7ff fea7 	bl	8008814 <__multadd>
 8008ac6:	4606      	mov	r6, r0
 8008ac8:	10ad      	asrs	r5, r5, #2
 8008aca:	d03d      	beq.n	8008b48 <__pow5mult+0xa0>
 8008acc:	69fc      	ldr	r4, [r7, #28]
 8008ace:	b97c      	cbnz	r4, 8008af0 <__pow5mult+0x48>
 8008ad0:	2010      	movs	r0, #16
 8008ad2:	f7ff fd87 	bl	80085e4 <malloc>
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	61f8      	str	r0, [r7, #28]
 8008ada:	b928      	cbnz	r0, 8008ae8 <__pow5mult+0x40>
 8008adc:	4b1d      	ldr	r3, [pc, #116]	@ (8008b54 <__pow5mult+0xac>)
 8008ade:	481e      	ldr	r0, [pc, #120]	@ (8008b58 <__pow5mult+0xb0>)
 8008ae0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008ae4:	f000 fbea 	bl	80092bc <__assert_func>
 8008ae8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008aec:	6004      	str	r4, [r0, #0]
 8008aee:	60c4      	str	r4, [r0, #12]
 8008af0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008af4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008af8:	b94c      	cbnz	r4, 8008b0e <__pow5mult+0x66>
 8008afa:	f240 2171 	movw	r1, #625	@ 0x271
 8008afe:	4638      	mov	r0, r7
 8008b00:	f7ff ff1a 	bl	8008938 <__i2b>
 8008b04:	2300      	movs	r3, #0
 8008b06:	f8c8 0008 	str.w	r0, [r8, #8]
 8008b0a:	4604      	mov	r4, r0
 8008b0c:	6003      	str	r3, [r0, #0]
 8008b0e:	f04f 0900 	mov.w	r9, #0
 8008b12:	07eb      	lsls	r3, r5, #31
 8008b14:	d50a      	bpl.n	8008b2c <__pow5mult+0x84>
 8008b16:	4631      	mov	r1, r6
 8008b18:	4622      	mov	r2, r4
 8008b1a:	4638      	mov	r0, r7
 8008b1c:	f7ff ff22 	bl	8008964 <__multiply>
 8008b20:	4631      	mov	r1, r6
 8008b22:	4680      	mov	r8, r0
 8008b24:	4638      	mov	r0, r7
 8008b26:	f7ff fe53 	bl	80087d0 <_Bfree>
 8008b2a:	4646      	mov	r6, r8
 8008b2c:	106d      	asrs	r5, r5, #1
 8008b2e:	d00b      	beq.n	8008b48 <__pow5mult+0xa0>
 8008b30:	6820      	ldr	r0, [r4, #0]
 8008b32:	b938      	cbnz	r0, 8008b44 <__pow5mult+0x9c>
 8008b34:	4622      	mov	r2, r4
 8008b36:	4621      	mov	r1, r4
 8008b38:	4638      	mov	r0, r7
 8008b3a:	f7ff ff13 	bl	8008964 <__multiply>
 8008b3e:	6020      	str	r0, [r4, #0]
 8008b40:	f8c0 9000 	str.w	r9, [r0]
 8008b44:	4604      	mov	r4, r0
 8008b46:	e7e4      	b.n	8008b12 <__pow5mult+0x6a>
 8008b48:	4630      	mov	r0, r6
 8008b4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b4e:	bf00      	nop
 8008b50:	08010a5c 	.word	0x08010a5c
 8008b54:	08010929 	.word	0x08010929
 8008b58:	080109a9 	.word	0x080109a9

08008b5c <__lshift>:
 8008b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b60:	460c      	mov	r4, r1
 8008b62:	6849      	ldr	r1, [r1, #4]
 8008b64:	6923      	ldr	r3, [r4, #16]
 8008b66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008b6a:	68a3      	ldr	r3, [r4, #8]
 8008b6c:	4607      	mov	r7, r0
 8008b6e:	4691      	mov	r9, r2
 8008b70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008b74:	f108 0601 	add.w	r6, r8, #1
 8008b78:	42b3      	cmp	r3, r6
 8008b7a:	db0b      	blt.n	8008b94 <__lshift+0x38>
 8008b7c:	4638      	mov	r0, r7
 8008b7e:	f7ff fde7 	bl	8008750 <_Balloc>
 8008b82:	4605      	mov	r5, r0
 8008b84:	b948      	cbnz	r0, 8008b9a <__lshift+0x3e>
 8008b86:	4602      	mov	r2, r0
 8008b88:	4b28      	ldr	r3, [pc, #160]	@ (8008c2c <__lshift+0xd0>)
 8008b8a:	4829      	ldr	r0, [pc, #164]	@ (8008c30 <__lshift+0xd4>)
 8008b8c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008b90:	f000 fb94 	bl	80092bc <__assert_func>
 8008b94:	3101      	adds	r1, #1
 8008b96:	005b      	lsls	r3, r3, #1
 8008b98:	e7ee      	b.n	8008b78 <__lshift+0x1c>
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	f100 0114 	add.w	r1, r0, #20
 8008ba0:	f100 0210 	add.w	r2, r0, #16
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	4553      	cmp	r3, sl
 8008ba8:	db33      	blt.n	8008c12 <__lshift+0xb6>
 8008baa:	6920      	ldr	r0, [r4, #16]
 8008bac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008bb0:	f104 0314 	add.w	r3, r4, #20
 8008bb4:	f019 091f 	ands.w	r9, r9, #31
 8008bb8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008bbc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008bc0:	d02b      	beq.n	8008c1a <__lshift+0xbe>
 8008bc2:	f1c9 0e20 	rsb	lr, r9, #32
 8008bc6:	468a      	mov	sl, r1
 8008bc8:	2200      	movs	r2, #0
 8008bca:	6818      	ldr	r0, [r3, #0]
 8008bcc:	fa00 f009 	lsl.w	r0, r0, r9
 8008bd0:	4310      	orrs	r0, r2
 8008bd2:	f84a 0b04 	str.w	r0, [sl], #4
 8008bd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bda:	459c      	cmp	ip, r3
 8008bdc:	fa22 f20e 	lsr.w	r2, r2, lr
 8008be0:	d8f3      	bhi.n	8008bca <__lshift+0x6e>
 8008be2:	ebac 0304 	sub.w	r3, ip, r4
 8008be6:	3b15      	subs	r3, #21
 8008be8:	f023 0303 	bic.w	r3, r3, #3
 8008bec:	3304      	adds	r3, #4
 8008bee:	f104 0015 	add.w	r0, r4, #21
 8008bf2:	4560      	cmp	r0, ip
 8008bf4:	bf88      	it	hi
 8008bf6:	2304      	movhi	r3, #4
 8008bf8:	50ca      	str	r2, [r1, r3]
 8008bfa:	b10a      	cbz	r2, 8008c00 <__lshift+0xa4>
 8008bfc:	f108 0602 	add.w	r6, r8, #2
 8008c00:	3e01      	subs	r6, #1
 8008c02:	4638      	mov	r0, r7
 8008c04:	612e      	str	r6, [r5, #16]
 8008c06:	4621      	mov	r1, r4
 8008c08:	f7ff fde2 	bl	80087d0 <_Bfree>
 8008c0c:	4628      	mov	r0, r5
 8008c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c12:	f842 0f04 	str.w	r0, [r2, #4]!
 8008c16:	3301      	adds	r3, #1
 8008c18:	e7c5      	b.n	8008ba6 <__lshift+0x4a>
 8008c1a:	3904      	subs	r1, #4
 8008c1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c20:	f841 2f04 	str.w	r2, [r1, #4]!
 8008c24:	459c      	cmp	ip, r3
 8008c26:	d8f9      	bhi.n	8008c1c <__lshift+0xc0>
 8008c28:	e7ea      	b.n	8008c00 <__lshift+0xa4>
 8008c2a:	bf00      	nop
 8008c2c:	08010998 	.word	0x08010998
 8008c30:	080109a9 	.word	0x080109a9

08008c34 <__mcmp>:
 8008c34:	690a      	ldr	r2, [r1, #16]
 8008c36:	4603      	mov	r3, r0
 8008c38:	6900      	ldr	r0, [r0, #16]
 8008c3a:	1a80      	subs	r0, r0, r2
 8008c3c:	b530      	push	{r4, r5, lr}
 8008c3e:	d10e      	bne.n	8008c5e <__mcmp+0x2a>
 8008c40:	3314      	adds	r3, #20
 8008c42:	3114      	adds	r1, #20
 8008c44:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008c48:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008c4c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008c50:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008c54:	4295      	cmp	r5, r2
 8008c56:	d003      	beq.n	8008c60 <__mcmp+0x2c>
 8008c58:	d205      	bcs.n	8008c66 <__mcmp+0x32>
 8008c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8008c5e:	bd30      	pop	{r4, r5, pc}
 8008c60:	42a3      	cmp	r3, r4
 8008c62:	d3f3      	bcc.n	8008c4c <__mcmp+0x18>
 8008c64:	e7fb      	b.n	8008c5e <__mcmp+0x2a>
 8008c66:	2001      	movs	r0, #1
 8008c68:	e7f9      	b.n	8008c5e <__mcmp+0x2a>
	...

08008c6c <__mdiff>:
 8008c6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c70:	4689      	mov	r9, r1
 8008c72:	4606      	mov	r6, r0
 8008c74:	4611      	mov	r1, r2
 8008c76:	4648      	mov	r0, r9
 8008c78:	4614      	mov	r4, r2
 8008c7a:	f7ff ffdb 	bl	8008c34 <__mcmp>
 8008c7e:	1e05      	subs	r5, r0, #0
 8008c80:	d112      	bne.n	8008ca8 <__mdiff+0x3c>
 8008c82:	4629      	mov	r1, r5
 8008c84:	4630      	mov	r0, r6
 8008c86:	f7ff fd63 	bl	8008750 <_Balloc>
 8008c8a:	4602      	mov	r2, r0
 8008c8c:	b928      	cbnz	r0, 8008c9a <__mdiff+0x2e>
 8008c8e:	4b3f      	ldr	r3, [pc, #252]	@ (8008d8c <__mdiff+0x120>)
 8008c90:	f240 2137 	movw	r1, #567	@ 0x237
 8008c94:	483e      	ldr	r0, [pc, #248]	@ (8008d90 <__mdiff+0x124>)
 8008c96:	f000 fb11 	bl	80092bc <__assert_func>
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008ca0:	4610      	mov	r0, r2
 8008ca2:	b003      	add	sp, #12
 8008ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ca8:	bfbc      	itt	lt
 8008caa:	464b      	movlt	r3, r9
 8008cac:	46a1      	movlt	r9, r4
 8008cae:	4630      	mov	r0, r6
 8008cb0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008cb4:	bfba      	itte	lt
 8008cb6:	461c      	movlt	r4, r3
 8008cb8:	2501      	movlt	r5, #1
 8008cba:	2500      	movge	r5, #0
 8008cbc:	f7ff fd48 	bl	8008750 <_Balloc>
 8008cc0:	4602      	mov	r2, r0
 8008cc2:	b918      	cbnz	r0, 8008ccc <__mdiff+0x60>
 8008cc4:	4b31      	ldr	r3, [pc, #196]	@ (8008d8c <__mdiff+0x120>)
 8008cc6:	f240 2145 	movw	r1, #581	@ 0x245
 8008cca:	e7e3      	b.n	8008c94 <__mdiff+0x28>
 8008ccc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008cd0:	6926      	ldr	r6, [r4, #16]
 8008cd2:	60c5      	str	r5, [r0, #12]
 8008cd4:	f109 0310 	add.w	r3, r9, #16
 8008cd8:	f109 0514 	add.w	r5, r9, #20
 8008cdc:	f104 0e14 	add.w	lr, r4, #20
 8008ce0:	f100 0b14 	add.w	fp, r0, #20
 8008ce4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008ce8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008cec:	9301      	str	r3, [sp, #4]
 8008cee:	46d9      	mov	r9, fp
 8008cf0:	f04f 0c00 	mov.w	ip, #0
 8008cf4:	9b01      	ldr	r3, [sp, #4]
 8008cf6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008cfa:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008cfe:	9301      	str	r3, [sp, #4]
 8008d00:	fa1f f38a 	uxth.w	r3, sl
 8008d04:	4619      	mov	r1, r3
 8008d06:	b283      	uxth	r3, r0
 8008d08:	1acb      	subs	r3, r1, r3
 8008d0a:	0c00      	lsrs	r0, r0, #16
 8008d0c:	4463      	add	r3, ip
 8008d0e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008d12:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008d16:	b29b      	uxth	r3, r3
 8008d18:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008d1c:	4576      	cmp	r6, lr
 8008d1e:	f849 3b04 	str.w	r3, [r9], #4
 8008d22:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008d26:	d8e5      	bhi.n	8008cf4 <__mdiff+0x88>
 8008d28:	1b33      	subs	r3, r6, r4
 8008d2a:	3b15      	subs	r3, #21
 8008d2c:	f023 0303 	bic.w	r3, r3, #3
 8008d30:	3415      	adds	r4, #21
 8008d32:	3304      	adds	r3, #4
 8008d34:	42a6      	cmp	r6, r4
 8008d36:	bf38      	it	cc
 8008d38:	2304      	movcc	r3, #4
 8008d3a:	441d      	add	r5, r3
 8008d3c:	445b      	add	r3, fp
 8008d3e:	461e      	mov	r6, r3
 8008d40:	462c      	mov	r4, r5
 8008d42:	4544      	cmp	r4, r8
 8008d44:	d30e      	bcc.n	8008d64 <__mdiff+0xf8>
 8008d46:	f108 0103 	add.w	r1, r8, #3
 8008d4a:	1b49      	subs	r1, r1, r5
 8008d4c:	f021 0103 	bic.w	r1, r1, #3
 8008d50:	3d03      	subs	r5, #3
 8008d52:	45a8      	cmp	r8, r5
 8008d54:	bf38      	it	cc
 8008d56:	2100      	movcc	r1, #0
 8008d58:	440b      	add	r3, r1
 8008d5a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008d5e:	b191      	cbz	r1, 8008d86 <__mdiff+0x11a>
 8008d60:	6117      	str	r7, [r2, #16]
 8008d62:	e79d      	b.n	8008ca0 <__mdiff+0x34>
 8008d64:	f854 1b04 	ldr.w	r1, [r4], #4
 8008d68:	46e6      	mov	lr, ip
 8008d6a:	0c08      	lsrs	r0, r1, #16
 8008d6c:	fa1c fc81 	uxtah	ip, ip, r1
 8008d70:	4471      	add	r1, lr
 8008d72:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008d76:	b289      	uxth	r1, r1
 8008d78:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008d7c:	f846 1b04 	str.w	r1, [r6], #4
 8008d80:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008d84:	e7dd      	b.n	8008d42 <__mdiff+0xd6>
 8008d86:	3f01      	subs	r7, #1
 8008d88:	e7e7      	b.n	8008d5a <__mdiff+0xee>
 8008d8a:	bf00      	nop
 8008d8c:	08010998 	.word	0x08010998
 8008d90:	080109a9 	.word	0x080109a9

08008d94 <__d2b>:
 8008d94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008d98:	460f      	mov	r7, r1
 8008d9a:	2101      	movs	r1, #1
 8008d9c:	ec59 8b10 	vmov	r8, r9, d0
 8008da0:	4616      	mov	r6, r2
 8008da2:	f7ff fcd5 	bl	8008750 <_Balloc>
 8008da6:	4604      	mov	r4, r0
 8008da8:	b930      	cbnz	r0, 8008db8 <__d2b+0x24>
 8008daa:	4602      	mov	r2, r0
 8008dac:	4b23      	ldr	r3, [pc, #140]	@ (8008e3c <__d2b+0xa8>)
 8008dae:	4824      	ldr	r0, [pc, #144]	@ (8008e40 <__d2b+0xac>)
 8008db0:	f240 310f 	movw	r1, #783	@ 0x30f
 8008db4:	f000 fa82 	bl	80092bc <__assert_func>
 8008db8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008dbc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008dc0:	b10d      	cbz	r5, 8008dc6 <__d2b+0x32>
 8008dc2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008dc6:	9301      	str	r3, [sp, #4]
 8008dc8:	f1b8 0300 	subs.w	r3, r8, #0
 8008dcc:	d023      	beq.n	8008e16 <__d2b+0x82>
 8008dce:	4668      	mov	r0, sp
 8008dd0:	9300      	str	r3, [sp, #0]
 8008dd2:	f7ff fd84 	bl	80088de <__lo0bits>
 8008dd6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008dda:	b1d0      	cbz	r0, 8008e12 <__d2b+0x7e>
 8008ddc:	f1c0 0320 	rsb	r3, r0, #32
 8008de0:	fa02 f303 	lsl.w	r3, r2, r3
 8008de4:	430b      	orrs	r3, r1
 8008de6:	40c2      	lsrs	r2, r0
 8008de8:	6163      	str	r3, [r4, #20]
 8008dea:	9201      	str	r2, [sp, #4]
 8008dec:	9b01      	ldr	r3, [sp, #4]
 8008dee:	61a3      	str	r3, [r4, #24]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	bf0c      	ite	eq
 8008df4:	2201      	moveq	r2, #1
 8008df6:	2202      	movne	r2, #2
 8008df8:	6122      	str	r2, [r4, #16]
 8008dfa:	b1a5      	cbz	r5, 8008e26 <__d2b+0x92>
 8008dfc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008e00:	4405      	add	r5, r0
 8008e02:	603d      	str	r5, [r7, #0]
 8008e04:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008e08:	6030      	str	r0, [r6, #0]
 8008e0a:	4620      	mov	r0, r4
 8008e0c:	b003      	add	sp, #12
 8008e0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e12:	6161      	str	r1, [r4, #20]
 8008e14:	e7ea      	b.n	8008dec <__d2b+0x58>
 8008e16:	a801      	add	r0, sp, #4
 8008e18:	f7ff fd61 	bl	80088de <__lo0bits>
 8008e1c:	9b01      	ldr	r3, [sp, #4]
 8008e1e:	6163      	str	r3, [r4, #20]
 8008e20:	3020      	adds	r0, #32
 8008e22:	2201      	movs	r2, #1
 8008e24:	e7e8      	b.n	8008df8 <__d2b+0x64>
 8008e26:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008e2a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008e2e:	6038      	str	r0, [r7, #0]
 8008e30:	6918      	ldr	r0, [r3, #16]
 8008e32:	f7ff fd35 	bl	80088a0 <__hi0bits>
 8008e36:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008e3a:	e7e5      	b.n	8008e08 <__d2b+0x74>
 8008e3c:	08010998 	.word	0x08010998
 8008e40:	080109a9 	.word	0x080109a9

08008e44 <__ssputs_r>:
 8008e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e48:	688e      	ldr	r6, [r1, #8]
 8008e4a:	461f      	mov	r7, r3
 8008e4c:	42be      	cmp	r6, r7
 8008e4e:	680b      	ldr	r3, [r1, #0]
 8008e50:	4682      	mov	sl, r0
 8008e52:	460c      	mov	r4, r1
 8008e54:	4690      	mov	r8, r2
 8008e56:	d82d      	bhi.n	8008eb4 <__ssputs_r+0x70>
 8008e58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008e5c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008e60:	d026      	beq.n	8008eb0 <__ssputs_r+0x6c>
 8008e62:	6965      	ldr	r5, [r4, #20]
 8008e64:	6909      	ldr	r1, [r1, #16]
 8008e66:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e6a:	eba3 0901 	sub.w	r9, r3, r1
 8008e6e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008e72:	1c7b      	adds	r3, r7, #1
 8008e74:	444b      	add	r3, r9
 8008e76:	106d      	asrs	r5, r5, #1
 8008e78:	429d      	cmp	r5, r3
 8008e7a:	bf38      	it	cc
 8008e7c:	461d      	movcc	r5, r3
 8008e7e:	0553      	lsls	r3, r2, #21
 8008e80:	d527      	bpl.n	8008ed2 <__ssputs_r+0x8e>
 8008e82:	4629      	mov	r1, r5
 8008e84:	f7ff fbd8 	bl	8008638 <_malloc_r>
 8008e88:	4606      	mov	r6, r0
 8008e8a:	b360      	cbz	r0, 8008ee6 <__ssputs_r+0xa2>
 8008e8c:	6921      	ldr	r1, [r4, #16]
 8008e8e:	464a      	mov	r2, r9
 8008e90:	f000 fa06 	bl	80092a0 <memcpy>
 8008e94:	89a3      	ldrh	r3, [r4, #12]
 8008e96:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008e9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e9e:	81a3      	strh	r3, [r4, #12]
 8008ea0:	6126      	str	r6, [r4, #16]
 8008ea2:	6165      	str	r5, [r4, #20]
 8008ea4:	444e      	add	r6, r9
 8008ea6:	eba5 0509 	sub.w	r5, r5, r9
 8008eaa:	6026      	str	r6, [r4, #0]
 8008eac:	60a5      	str	r5, [r4, #8]
 8008eae:	463e      	mov	r6, r7
 8008eb0:	42be      	cmp	r6, r7
 8008eb2:	d900      	bls.n	8008eb6 <__ssputs_r+0x72>
 8008eb4:	463e      	mov	r6, r7
 8008eb6:	6820      	ldr	r0, [r4, #0]
 8008eb8:	4632      	mov	r2, r6
 8008eba:	4641      	mov	r1, r8
 8008ebc:	f000 f9c6 	bl	800924c <memmove>
 8008ec0:	68a3      	ldr	r3, [r4, #8]
 8008ec2:	1b9b      	subs	r3, r3, r6
 8008ec4:	60a3      	str	r3, [r4, #8]
 8008ec6:	6823      	ldr	r3, [r4, #0]
 8008ec8:	4433      	add	r3, r6
 8008eca:	6023      	str	r3, [r4, #0]
 8008ecc:	2000      	movs	r0, #0
 8008ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ed2:	462a      	mov	r2, r5
 8008ed4:	f000 fa80 	bl	80093d8 <_realloc_r>
 8008ed8:	4606      	mov	r6, r0
 8008eda:	2800      	cmp	r0, #0
 8008edc:	d1e0      	bne.n	8008ea0 <__ssputs_r+0x5c>
 8008ede:	6921      	ldr	r1, [r4, #16]
 8008ee0:	4650      	mov	r0, sl
 8008ee2:	f000 fa1d 	bl	8009320 <_free_r>
 8008ee6:	230c      	movs	r3, #12
 8008ee8:	f8ca 3000 	str.w	r3, [sl]
 8008eec:	89a3      	ldrh	r3, [r4, #12]
 8008eee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ef2:	81a3      	strh	r3, [r4, #12]
 8008ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ef8:	e7e9      	b.n	8008ece <__ssputs_r+0x8a>
	...

08008efc <_svfiprintf_r>:
 8008efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f00:	4698      	mov	r8, r3
 8008f02:	898b      	ldrh	r3, [r1, #12]
 8008f04:	061b      	lsls	r3, r3, #24
 8008f06:	b09d      	sub	sp, #116	@ 0x74
 8008f08:	4607      	mov	r7, r0
 8008f0a:	460d      	mov	r5, r1
 8008f0c:	4614      	mov	r4, r2
 8008f0e:	d510      	bpl.n	8008f32 <_svfiprintf_r+0x36>
 8008f10:	690b      	ldr	r3, [r1, #16]
 8008f12:	b973      	cbnz	r3, 8008f32 <_svfiprintf_r+0x36>
 8008f14:	2140      	movs	r1, #64	@ 0x40
 8008f16:	f7ff fb8f 	bl	8008638 <_malloc_r>
 8008f1a:	6028      	str	r0, [r5, #0]
 8008f1c:	6128      	str	r0, [r5, #16]
 8008f1e:	b930      	cbnz	r0, 8008f2e <_svfiprintf_r+0x32>
 8008f20:	230c      	movs	r3, #12
 8008f22:	603b      	str	r3, [r7, #0]
 8008f24:	f04f 30ff 	mov.w	r0, #4294967295
 8008f28:	b01d      	add	sp, #116	@ 0x74
 8008f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f2e:	2340      	movs	r3, #64	@ 0x40
 8008f30:	616b      	str	r3, [r5, #20]
 8008f32:	2300      	movs	r3, #0
 8008f34:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f36:	2320      	movs	r3, #32
 8008f38:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008f3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f40:	2330      	movs	r3, #48	@ 0x30
 8008f42:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80090e0 <_svfiprintf_r+0x1e4>
 8008f46:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008f4a:	f04f 0901 	mov.w	r9, #1
 8008f4e:	4623      	mov	r3, r4
 8008f50:	469a      	mov	sl, r3
 8008f52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f56:	b10a      	cbz	r2, 8008f5c <_svfiprintf_r+0x60>
 8008f58:	2a25      	cmp	r2, #37	@ 0x25
 8008f5a:	d1f9      	bne.n	8008f50 <_svfiprintf_r+0x54>
 8008f5c:	ebba 0b04 	subs.w	fp, sl, r4
 8008f60:	d00b      	beq.n	8008f7a <_svfiprintf_r+0x7e>
 8008f62:	465b      	mov	r3, fp
 8008f64:	4622      	mov	r2, r4
 8008f66:	4629      	mov	r1, r5
 8008f68:	4638      	mov	r0, r7
 8008f6a:	f7ff ff6b 	bl	8008e44 <__ssputs_r>
 8008f6e:	3001      	adds	r0, #1
 8008f70:	f000 80a7 	beq.w	80090c2 <_svfiprintf_r+0x1c6>
 8008f74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f76:	445a      	add	r2, fp
 8008f78:	9209      	str	r2, [sp, #36]	@ 0x24
 8008f7a:	f89a 3000 	ldrb.w	r3, [sl]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	f000 809f 	beq.w	80090c2 <_svfiprintf_r+0x1c6>
 8008f84:	2300      	movs	r3, #0
 8008f86:	f04f 32ff 	mov.w	r2, #4294967295
 8008f8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f8e:	f10a 0a01 	add.w	sl, sl, #1
 8008f92:	9304      	str	r3, [sp, #16]
 8008f94:	9307      	str	r3, [sp, #28]
 8008f96:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008f9a:	931a      	str	r3, [sp, #104]	@ 0x68
 8008f9c:	4654      	mov	r4, sl
 8008f9e:	2205      	movs	r2, #5
 8008fa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fa4:	484e      	ldr	r0, [pc, #312]	@ (80090e0 <_svfiprintf_r+0x1e4>)
 8008fa6:	f7f7 f99b 	bl	80002e0 <memchr>
 8008faa:	9a04      	ldr	r2, [sp, #16]
 8008fac:	b9d8      	cbnz	r0, 8008fe6 <_svfiprintf_r+0xea>
 8008fae:	06d0      	lsls	r0, r2, #27
 8008fb0:	bf44      	itt	mi
 8008fb2:	2320      	movmi	r3, #32
 8008fb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008fb8:	0711      	lsls	r1, r2, #28
 8008fba:	bf44      	itt	mi
 8008fbc:	232b      	movmi	r3, #43	@ 0x2b
 8008fbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008fc2:	f89a 3000 	ldrb.w	r3, [sl]
 8008fc6:	2b2a      	cmp	r3, #42	@ 0x2a
 8008fc8:	d015      	beq.n	8008ff6 <_svfiprintf_r+0xfa>
 8008fca:	9a07      	ldr	r2, [sp, #28]
 8008fcc:	4654      	mov	r4, sl
 8008fce:	2000      	movs	r0, #0
 8008fd0:	f04f 0c0a 	mov.w	ip, #10
 8008fd4:	4621      	mov	r1, r4
 8008fd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fda:	3b30      	subs	r3, #48	@ 0x30
 8008fdc:	2b09      	cmp	r3, #9
 8008fde:	d94b      	bls.n	8009078 <_svfiprintf_r+0x17c>
 8008fe0:	b1b0      	cbz	r0, 8009010 <_svfiprintf_r+0x114>
 8008fe2:	9207      	str	r2, [sp, #28]
 8008fe4:	e014      	b.n	8009010 <_svfiprintf_r+0x114>
 8008fe6:	eba0 0308 	sub.w	r3, r0, r8
 8008fea:	fa09 f303 	lsl.w	r3, r9, r3
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	9304      	str	r3, [sp, #16]
 8008ff2:	46a2      	mov	sl, r4
 8008ff4:	e7d2      	b.n	8008f9c <_svfiprintf_r+0xa0>
 8008ff6:	9b03      	ldr	r3, [sp, #12]
 8008ff8:	1d19      	adds	r1, r3, #4
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	9103      	str	r1, [sp, #12]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	bfbb      	ittet	lt
 8009002:	425b      	neglt	r3, r3
 8009004:	f042 0202 	orrlt.w	r2, r2, #2
 8009008:	9307      	strge	r3, [sp, #28]
 800900a:	9307      	strlt	r3, [sp, #28]
 800900c:	bfb8      	it	lt
 800900e:	9204      	strlt	r2, [sp, #16]
 8009010:	7823      	ldrb	r3, [r4, #0]
 8009012:	2b2e      	cmp	r3, #46	@ 0x2e
 8009014:	d10a      	bne.n	800902c <_svfiprintf_r+0x130>
 8009016:	7863      	ldrb	r3, [r4, #1]
 8009018:	2b2a      	cmp	r3, #42	@ 0x2a
 800901a:	d132      	bne.n	8009082 <_svfiprintf_r+0x186>
 800901c:	9b03      	ldr	r3, [sp, #12]
 800901e:	1d1a      	adds	r2, r3, #4
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	9203      	str	r2, [sp, #12]
 8009024:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009028:	3402      	adds	r4, #2
 800902a:	9305      	str	r3, [sp, #20]
 800902c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80090f0 <_svfiprintf_r+0x1f4>
 8009030:	7821      	ldrb	r1, [r4, #0]
 8009032:	2203      	movs	r2, #3
 8009034:	4650      	mov	r0, sl
 8009036:	f7f7 f953 	bl	80002e0 <memchr>
 800903a:	b138      	cbz	r0, 800904c <_svfiprintf_r+0x150>
 800903c:	9b04      	ldr	r3, [sp, #16]
 800903e:	eba0 000a 	sub.w	r0, r0, sl
 8009042:	2240      	movs	r2, #64	@ 0x40
 8009044:	4082      	lsls	r2, r0
 8009046:	4313      	orrs	r3, r2
 8009048:	3401      	adds	r4, #1
 800904a:	9304      	str	r3, [sp, #16]
 800904c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009050:	4824      	ldr	r0, [pc, #144]	@ (80090e4 <_svfiprintf_r+0x1e8>)
 8009052:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009056:	2206      	movs	r2, #6
 8009058:	f7f7 f942 	bl	80002e0 <memchr>
 800905c:	2800      	cmp	r0, #0
 800905e:	d036      	beq.n	80090ce <_svfiprintf_r+0x1d2>
 8009060:	4b21      	ldr	r3, [pc, #132]	@ (80090e8 <_svfiprintf_r+0x1ec>)
 8009062:	bb1b      	cbnz	r3, 80090ac <_svfiprintf_r+0x1b0>
 8009064:	9b03      	ldr	r3, [sp, #12]
 8009066:	3307      	adds	r3, #7
 8009068:	f023 0307 	bic.w	r3, r3, #7
 800906c:	3308      	adds	r3, #8
 800906e:	9303      	str	r3, [sp, #12]
 8009070:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009072:	4433      	add	r3, r6
 8009074:	9309      	str	r3, [sp, #36]	@ 0x24
 8009076:	e76a      	b.n	8008f4e <_svfiprintf_r+0x52>
 8009078:	fb0c 3202 	mla	r2, ip, r2, r3
 800907c:	460c      	mov	r4, r1
 800907e:	2001      	movs	r0, #1
 8009080:	e7a8      	b.n	8008fd4 <_svfiprintf_r+0xd8>
 8009082:	2300      	movs	r3, #0
 8009084:	3401      	adds	r4, #1
 8009086:	9305      	str	r3, [sp, #20]
 8009088:	4619      	mov	r1, r3
 800908a:	f04f 0c0a 	mov.w	ip, #10
 800908e:	4620      	mov	r0, r4
 8009090:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009094:	3a30      	subs	r2, #48	@ 0x30
 8009096:	2a09      	cmp	r2, #9
 8009098:	d903      	bls.n	80090a2 <_svfiprintf_r+0x1a6>
 800909a:	2b00      	cmp	r3, #0
 800909c:	d0c6      	beq.n	800902c <_svfiprintf_r+0x130>
 800909e:	9105      	str	r1, [sp, #20]
 80090a0:	e7c4      	b.n	800902c <_svfiprintf_r+0x130>
 80090a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80090a6:	4604      	mov	r4, r0
 80090a8:	2301      	movs	r3, #1
 80090aa:	e7f0      	b.n	800908e <_svfiprintf_r+0x192>
 80090ac:	ab03      	add	r3, sp, #12
 80090ae:	9300      	str	r3, [sp, #0]
 80090b0:	462a      	mov	r2, r5
 80090b2:	4b0e      	ldr	r3, [pc, #56]	@ (80090ec <_svfiprintf_r+0x1f0>)
 80090b4:	a904      	add	r1, sp, #16
 80090b6:	4638      	mov	r0, r7
 80090b8:	f7fd ffaa 	bl	8007010 <_printf_float>
 80090bc:	1c42      	adds	r2, r0, #1
 80090be:	4606      	mov	r6, r0
 80090c0:	d1d6      	bne.n	8009070 <_svfiprintf_r+0x174>
 80090c2:	89ab      	ldrh	r3, [r5, #12]
 80090c4:	065b      	lsls	r3, r3, #25
 80090c6:	f53f af2d 	bmi.w	8008f24 <_svfiprintf_r+0x28>
 80090ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80090cc:	e72c      	b.n	8008f28 <_svfiprintf_r+0x2c>
 80090ce:	ab03      	add	r3, sp, #12
 80090d0:	9300      	str	r3, [sp, #0]
 80090d2:	462a      	mov	r2, r5
 80090d4:	4b05      	ldr	r3, [pc, #20]	@ (80090ec <_svfiprintf_r+0x1f0>)
 80090d6:	a904      	add	r1, sp, #16
 80090d8:	4638      	mov	r0, r7
 80090da:	f7fe fa21 	bl	8007520 <_printf_i>
 80090de:	e7ed      	b.n	80090bc <_svfiprintf_r+0x1c0>
 80090e0:	08010a02 	.word	0x08010a02
 80090e4:	08010a0c 	.word	0x08010a0c
 80090e8:	08007011 	.word	0x08007011
 80090ec:	08008e45 	.word	0x08008e45
 80090f0:	08010a08 	.word	0x08010a08

080090f4 <__sflush_r>:
 80090f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80090f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090fc:	0716      	lsls	r6, r2, #28
 80090fe:	4605      	mov	r5, r0
 8009100:	460c      	mov	r4, r1
 8009102:	d454      	bmi.n	80091ae <__sflush_r+0xba>
 8009104:	684b      	ldr	r3, [r1, #4]
 8009106:	2b00      	cmp	r3, #0
 8009108:	dc02      	bgt.n	8009110 <__sflush_r+0x1c>
 800910a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800910c:	2b00      	cmp	r3, #0
 800910e:	dd48      	ble.n	80091a2 <__sflush_r+0xae>
 8009110:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009112:	2e00      	cmp	r6, #0
 8009114:	d045      	beq.n	80091a2 <__sflush_r+0xae>
 8009116:	2300      	movs	r3, #0
 8009118:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800911c:	682f      	ldr	r7, [r5, #0]
 800911e:	6a21      	ldr	r1, [r4, #32]
 8009120:	602b      	str	r3, [r5, #0]
 8009122:	d030      	beq.n	8009186 <__sflush_r+0x92>
 8009124:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009126:	89a3      	ldrh	r3, [r4, #12]
 8009128:	0759      	lsls	r1, r3, #29
 800912a:	d505      	bpl.n	8009138 <__sflush_r+0x44>
 800912c:	6863      	ldr	r3, [r4, #4]
 800912e:	1ad2      	subs	r2, r2, r3
 8009130:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009132:	b10b      	cbz	r3, 8009138 <__sflush_r+0x44>
 8009134:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009136:	1ad2      	subs	r2, r2, r3
 8009138:	2300      	movs	r3, #0
 800913a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800913c:	6a21      	ldr	r1, [r4, #32]
 800913e:	4628      	mov	r0, r5
 8009140:	47b0      	blx	r6
 8009142:	1c43      	adds	r3, r0, #1
 8009144:	89a3      	ldrh	r3, [r4, #12]
 8009146:	d106      	bne.n	8009156 <__sflush_r+0x62>
 8009148:	6829      	ldr	r1, [r5, #0]
 800914a:	291d      	cmp	r1, #29
 800914c:	d82b      	bhi.n	80091a6 <__sflush_r+0xb2>
 800914e:	4a2a      	ldr	r2, [pc, #168]	@ (80091f8 <__sflush_r+0x104>)
 8009150:	40ca      	lsrs	r2, r1
 8009152:	07d6      	lsls	r6, r2, #31
 8009154:	d527      	bpl.n	80091a6 <__sflush_r+0xb2>
 8009156:	2200      	movs	r2, #0
 8009158:	6062      	str	r2, [r4, #4]
 800915a:	04d9      	lsls	r1, r3, #19
 800915c:	6922      	ldr	r2, [r4, #16]
 800915e:	6022      	str	r2, [r4, #0]
 8009160:	d504      	bpl.n	800916c <__sflush_r+0x78>
 8009162:	1c42      	adds	r2, r0, #1
 8009164:	d101      	bne.n	800916a <__sflush_r+0x76>
 8009166:	682b      	ldr	r3, [r5, #0]
 8009168:	b903      	cbnz	r3, 800916c <__sflush_r+0x78>
 800916a:	6560      	str	r0, [r4, #84]	@ 0x54
 800916c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800916e:	602f      	str	r7, [r5, #0]
 8009170:	b1b9      	cbz	r1, 80091a2 <__sflush_r+0xae>
 8009172:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009176:	4299      	cmp	r1, r3
 8009178:	d002      	beq.n	8009180 <__sflush_r+0x8c>
 800917a:	4628      	mov	r0, r5
 800917c:	f000 f8d0 	bl	8009320 <_free_r>
 8009180:	2300      	movs	r3, #0
 8009182:	6363      	str	r3, [r4, #52]	@ 0x34
 8009184:	e00d      	b.n	80091a2 <__sflush_r+0xae>
 8009186:	2301      	movs	r3, #1
 8009188:	4628      	mov	r0, r5
 800918a:	47b0      	blx	r6
 800918c:	4602      	mov	r2, r0
 800918e:	1c50      	adds	r0, r2, #1
 8009190:	d1c9      	bne.n	8009126 <__sflush_r+0x32>
 8009192:	682b      	ldr	r3, [r5, #0]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d0c6      	beq.n	8009126 <__sflush_r+0x32>
 8009198:	2b1d      	cmp	r3, #29
 800919a:	d001      	beq.n	80091a0 <__sflush_r+0xac>
 800919c:	2b16      	cmp	r3, #22
 800919e:	d11e      	bne.n	80091de <__sflush_r+0xea>
 80091a0:	602f      	str	r7, [r5, #0]
 80091a2:	2000      	movs	r0, #0
 80091a4:	e022      	b.n	80091ec <__sflush_r+0xf8>
 80091a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80091aa:	b21b      	sxth	r3, r3
 80091ac:	e01b      	b.n	80091e6 <__sflush_r+0xf2>
 80091ae:	690f      	ldr	r7, [r1, #16]
 80091b0:	2f00      	cmp	r7, #0
 80091b2:	d0f6      	beq.n	80091a2 <__sflush_r+0xae>
 80091b4:	0793      	lsls	r3, r2, #30
 80091b6:	680e      	ldr	r6, [r1, #0]
 80091b8:	bf08      	it	eq
 80091ba:	694b      	ldreq	r3, [r1, #20]
 80091bc:	600f      	str	r7, [r1, #0]
 80091be:	bf18      	it	ne
 80091c0:	2300      	movne	r3, #0
 80091c2:	eba6 0807 	sub.w	r8, r6, r7
 80091c6:	608b      	str	r3, [r1, #8]
 80091c8:	f1b8 0f00 	cmp.w	r8, #0
 80091cc:	dde9      	ble.n	80091a2 <__sflush_r+0xae>
 80091ce:	6a21      	ldr	r1, [r4, #32]
 80091d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80091d2:	4643      	mov	r3, r8
 80091d4:	463a      	mov	r2, r7
 80091d6:	4628      	mov	r0, r5
 80091d8:	47b0      	blx	r6
 80091da:	2800      	cmp	r0, #0
 80091dc:	dc08      	bgt.n	80091f0 <__sflush_r+0xfc>
 80091de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80091e6:	81a3      	strh	r3, [r4, #12]
 80091e8:	f04f 30ff 	mov.w	r0, #4294967295
 80091ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091f0:	4407      	add	r7, r0
 80091f2:	eba8 0800 	sub.w	r8, r8, r0
 80091f6:	e7e7      	b.n	80091c8 <__sflush_r+0xd4>
 80091f8:	20400001 	.word	0x20400001

080091fc <_fflush_r>:
 80091fc:	b538      	push	{r3, r4, r5, lr}
 80091fe:	690b      	ldr	r3, [r1, #16]
 8009200:	4605      	mov	r5, r0
 8009202:	460c      	mov	r4, r1
 8009204:	b913      	cbnz	r3, 800920c <_fflush_r+0x10>
 8009206:	2500      	movs	r5, #0
 8009208:	4628      	mov	r0, r5
 800920a:	bd38      	pop	{r3, r4, r5, pc}
 800920c:	b118      	cbz	r0, 8009216 <_fflush_r+0x1a>
 800920e:	6a03      	ldr	r3, [r0, #32]
 8009210:	b90b      	cbnz	r3, 8009216 <_fflush_r+0x1a>
 8009212:	f7fe fb2f 	bl	8007874 <__sinit>
 8009216:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d0f3      	beq.n	8009206 <_fflush_r+0xa>
 800921e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009220:	07d0      	lsls	r0, r2, #31
 8009222:	d404      	bmi.n	800922e <_fflush_r+0x32>
 8009224:	0599      	lsls	r1, r3, #22
 8009226:	d402      	bmi.n	800922e <_fflush_r+0x32>
 8009228:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800922a:	f7fe fbf0 	bl	8007a0e <__retarget_lock_acquire_recursive>
 800922e:	4628      	mov	r0, r5
 8009230:	4621      	mov	r1, r4
 8009232:	f7ff ff5f 	bl	80090f4 <__sflush_r>
 8009236:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009238:	07da      	lsls	r2, r3, #31
 800923a:	4605      	mov	r5, r0
 800923c:	d4e4      	bmi.n	8009208 <_fflush_r+0xc>
 800923e:	89a3      	ldrh	r3, [r4, #12]
 8009240:	059b      	lsls	r3, r3, #22
 8009242:	d4e1      	bmi.n	8009208 <_fflush_r+0xc>
 8009244:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009246:	f7fe fbe3 	bl	8007a10 <__retarget_lock_release_recursive>
 800924a:	e7dd      	b.n	8009208 <_fflush_r+0xc>

0800924c <memmove>:
 800924c:	4288      	cmp	r0, r1
 800924e:	b510      	push	{r4, lr}
 8009250:	eb01 0402 	add.w	r4, r1, r2
 8009254:	d902      	bls.n	800925c <memmove+0x10>
 8009256:	4284      	cmp	r4, r0
 8009258:	4623      	mov	r3, r4
 800925a:	d807      	bhi.n	800926c <memmove+0x20>
 800925c:	1e43      	subs	r3, r0, #1
 800925e:	42a1      	cmp	r1, r4
 8009260:	d008      	beq.n	8009274 <memmove+0x28>
 8009262:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009266:	f803 2f01 	strb.w	r2, [r3, #1]!
 800926a:	e7f8      	b.n	800925e <memmove+0x12>
 800926c:	4402      	add	r2, r0
 800926e:	4601      	mov	r1, r0
 8009270:	428a      	cmp	r2, r1
 8009272:	d100      	bne.n	8009276 <memmove+0x2a>
 8009274:	bd10      	pop	{r4, pc}
 8009276:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800927a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800927e:	e7f7      	b.n	8009270 <memmove+0x24>

08009280 <_sbrk_r>:
 8009280:	b538      	push	{r3, r4, r5, lr}
 8009282:	4d06      	ldr	r5, [pc, #24]	@ (800929c <_sbrk_r+0x1c>)
 8009284:	2300      	movs	r3, #0
 8009286:	4604      	mov	r4, r0
 8009288:	4608      	mov	r0, r1
 800928a:	602b      	str	r3, [r5, #0]
 800928c:	f000 fb7a 	bl	8009984 <_sbrk>
 8009290:	1c43      	adds	r3, r0, #1
 8009292:	d102      	bne.n	800929a <_sbrk_r+0x1a>
 8009294:	682b      	ldr	r3, [r5, #0]
 8009296:	b103      	cbz	r3, 800929a <_sbrk_r+0x1a>
 8009298:	6023      	str	r3, [r4, #0]
 800929a:	bd38      	pop	{r3, r4, r5, pc}
 800929c:	24000b90 	.word	0x24000b90

080092a0 <memcpy>:
 80092a0:	440a      	add	r2, r1
 80092a2:	4291      	cmp	r1, r2
 80092a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80092a8:	d100      	bne.n	80092ac <memcpy+0xc>
 80092aa:	4770      	bx	lr
 80092ac:	b510      	push	{r4, lr}
 80092ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092b6:	4291      	cmp	r1, r2
 80092b8:	d1f9      	bne.n	80092ae <memcpy+0xe>
 80092ba:	bd10      	pop	{r4, pc}

080092bc <__assert_func>:
 80092bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80092be:	4614      	mov	r4, r2
 80092c0:	461a      	mov	r2, r3
 80092c2:	4b09      	ldr	r3, [pc, #36]	@ (80092e8 <__assert_func+0x2c>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	4605      	mov	r5, r0
 80092c8:	68d8      	ldr	r0, [r3, #12]
 80092ca:	b14c      	cbz	r4, 80092e0 <__assert_func+0x24>
 80092cc:	4b07      	ldr	r3, [pc, #28]	@ (80092ec <__assert_func+0x30>)
 80092ce:	9100      	str	r1, [sp, #0]
 80092d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80092d4:	4906      	ldr	r1, [pc, #24]	@ (80092f0 <__assert_func+0x34>)
 80092d6:	462b      	mov	r3, r5
 80092d8:	f000 f8ba 	bl	8009450 <fiprintf>
 80092dc:	f000 f8ca 	bl	8009474 <abort>
 80092e0:	4b04      	ldr	r3, [pc, #16]	@ (80092f4 <__assert_func+0x38>)
 80092e2:	461c      	mov	r4, r3
 80092e4:	e7f3      	b.n	80092ce <__assert_func+0x12>
 80092e6:	bf00      	nop
 80092e8:	2400008c 	.word	0x2400008c
 80092ec:	08010a1d 	.word	0x08010a1d
 80092f0:	08010a2a 	.word	0x08010a2a
 80092f4:	08010a58 	.word	0x08010a58

080092f8 <_calloc_r>:
 80092f8:	b570      	push	{r4, r5, r6, lr}
 80092fa:	fba1 5402 	umull	r5, r4, r1, r2
 80092fe:	b934      	cbnz	r4, 800930e <_calloc_r+0x16>
 8009300:	4629      	mov	r1, r5
 8009302:	f7ff f999 	bl	8008638 <_malloc_r>
 8009306:	4606      	mov	r6, r0
 8009308:	b928      	cbnz	r0, 8009316 <_calloc_r+0x1e>
 800930a:	4630      	mov	r0, r6
 800930c:	bd70      	pop	{r4, r5, r6, pc}
 800930e:	220c      	movs	r2, #12
 8009310:	6002      	str	r2, [r0, #0]
 8009312:	2600      	movs	r6, #0
 8009314:	e7f9      	b.n	800930a <_calloc_r+0x12>
 8009316:	462a      	mov	r2, r5
 8009318:	4621      	mov	r1, r4
 800931a:	f7fe fb46 	bl	80079aa <memset>
 800931e:	e7f4      	b.n	800930a <_calloc_r+0x12>

08009320 <_free_r>:
 8009320:	b538      	push	{r3, r4, r5, lr}
 8009322:	4605      	mov	r5, r0
 8009324:	2900      	cmp	r1, #0
 8009326:	d041      	beq.n	80093ac <_free_r+0x8c>
 8009328:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800932c:	1f0c      	subs	r4, r1, #4
 800932e:	2b00      	cmp	r3, #0
 8009330:	bfb8      	it	lt
 8009332:	18e4      	addlt	r4, r4, r3
 8009334:	f7ff fa00 	bl	8008738 <__malloc_lock>
 8009338:	4a1d      	ldr	r2, [pc, #116]	@ (80093b0 <_free_r+0x90>)
 800933a:	6813      	ldr	r3, [r2, #0]
 800933c:	b933      	cbnz	r3, 800934c <_free_r+0x2c>
 800933e:	6063      	str	r3, [r4, #4]
 8009340:	6014      	str	r4, [r2, #0]
 8009342:	4628      	mov	r0, r5
 8009344:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009348:	f7ff b9fc 	b.w	8008744 <__malloc_unlock>
 800934c:	42a3      	cmp	r3, r4
 800934e:	d908      	bls.n	8009362 <_free_r+0x42>
 8009350:	6820      	ldr	r0, [r4, #0]
 8009352:	1821      	adds	r1, r4, r0
 8009354:	428b      	cmp	r3, r1
 8009356:	bf01      	itttt	eq
 8009358:	6819      	ldreq	r1, [r3, #0]
 800935a:	685b      	ldreq	r3, [r3, #4]
 800935c:	1809      	addeq	r1, r1, r0
 800935e:	6021      	streq	r1, [r4, #0]
 8009360:	e7ed      	b.n	800933e <_free_r+0x1e>
 8009362:	461a      	mov	r2, r3
 8009364:	685b      	ldr	r3, [r3, #4]
 8009366:	b10b      	cbz	r3, 800936c <_free_r+0x4c>
 8009368:	42a3      	cmp	r3, r4
 800936a:	d9fa      	bls.n	8009362 <_free_r+0x42>
 800936c:	6811      	ldr	r1, [r2, #0]
 800936e:	1850      	adds	r0, r2, r1
 8009370:	42a0      	cmp	r0, r4
 8009372:	d10b      	bne.n	800938c <_free_r+0x6c>
 8009374:	6820      	ldr	r0, [r4, #0]
 8009376:	4401      	add	r1, r0
 8009378:	1850      	adds	r0, r2, r1
 800937a:	4283      	cmp	r3, r0
 800937c:	6011      	str	r1, [r2, #0]
 800937e:	d1e0      	bne.n	8009342 <_free_r+0x22>
 8009380:	6818      	ldr	r0, [r3, #0]
 8009382:	685b      	ldr	r3, [r3, #4]
 8009384:	6053      	str	r3, [r2, #4]
 8009386:	4408      	add	r0, r1
 8009388:	6010      	str	r0, [r2, #0]
 800938a:	e7da      	b.n	8009342 <_free_r+0x22>
 800938c:	d902      	bls.n	8009394 <_free_r+0x74>
 800938e:	230c      	movs	r3, #12
 8009390:	602b      	str	r3, [r5, #0]
 8009392:	e7d6      	b.n	8009342 <_free_r+0x22>
 8009394:	6820      	ldr	r0, [r4, #0]
 8009396:	1821      	adds	r1, r4, r0
 8009398:	428b      	cmp	r3, r1
 800939a:	bf04      	itt	eq
 800939c:	6819      	ldreq	r1, [r3, #0]
 800939e:	685b      	ldreq	r3, [r3, #4]
 80093a0:	6063      	str	r3, [r4, #4]
 80093a2:	bf04      	itt	eq
 80093a4:	1809      	addeq	r1, r1, r0
 80093a6:	6021      	streq	r1, [r4, #0]
 80093a8:	6054      	str	r4, [r2, #4]
 80093aa:	e7ca      	b.n	8009342 <_free_r+0x22>
 80093ac:	bd38      	pop	{r3, r4, r5, pc}
 80093ae:	bf00      	nop
 80093b0:	24000b8c 	.word	0x24000b8c

080093b4 <__ascii_mbtowc>:
 80093b4:	b082      	sub	sp, #8
 80093b6:	b901      	cbnz	r1, 80093ba <__ascii_mbtowc+0x6>
 80093b8:	a901      	add	r1, sp, #4
 80093ba:	b142      	cbz	r2, 80093ce <__ascii_mbtowc+0x1a>
 80093bc:	b14b      	cbz	r3, 80093d2 <__ascii_mbtowc+0x1e>
 80093be:	7813      	ldrb	r3, [r2, #0]
 80093c0:	600b      	str	r3, [r1, #0]
 80093c2:	7812      	ldrb	r2, [r2, #0]
 80093c4:	1e10      	subs	r0, r2, #0
 80093c6:	bf18      	it	ne
 80093c8:	2001      	movne	r0, #1
 80093ca:	b002      	add	sp, #8
 80093cc:	4770      	bx	lr
 80093ce:	4610      	mov	r0, r2
 80093d0:	e7fb      	b.n	80093ca <__ascii_mbtowc+0x16>
 80093d2:	f06f 0001 	mvn.w	r0, #1
 80093d6:	e7f8      	b.n	80093ca <__ascii_mbtowc+0x16>

080093d8 <_realloc_r>:
 80093d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093dc:	4607      	mov	r7, r0
 80093de:	4614      	mov	r4, r2
 80093e0:	460d      	mov	r5, r1
 80093e2:	b921      	cbnz	r1, 80093ee <_realloc_r+0x16>
 80093e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093e8:	4611      	mov	r1, r2
 80093ea:	f7ff b925 	b.w	8008638 <_malloc_r>
 80093ee:	b92a      	cbnz	r2, 80093fc <_realloc_r+0x24>
 80093f0:	f7ff ff96 	bl	8009320 <_free_r>
 80093f4:	4625      	mov	r5, r4
 80093f6:	4628      	mov	r0, r5
 80093f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093fc:	f000 f841 	bl	8009482 <_malloc_usable_size_r>
 8009400:	4284      	cmp	r4, r0
 8009402:	4606      	mov	r6, r0
 8009404:	d802      	bhi.n	800940c <_realloc_r+0x34>
 8009406:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800940a:	d8f4      	bhi.n	80093f6 <_realloc_r+0x1e>
 800940c:	4621      	mov	r1, r4
 800940e:	4638      	mov	r0, r7
 8009410:	f7ff f912 	bl	8008638 <_malloc_r>
 8009414:	4680      	mov	r8, r0
 8009416:	b908      	cbnz	r0, 800941c <_realloc_r+0x44>
 8009418:	4645      	mov	r5, r8
 800941a:	e7ec      	b.n	80093f6 <_realloc_r+0x1e>
 800941c:	42b4      	cmp	r4, r6
 800941e:	4622      	mov	r2, r4
 8009420:	4629      	mov	r1, r5
 8009422:	bf28      	it	cs
 8009424:	4632      	movcs	r2, r6
 8009426:	f7ff ff3b 	bl	80092a0 <memcpy>
 800942a:	4629      	mov	r1, r5
 800942c:	4638      	mov	r0, r7
 800942e:	f7ff ff77 	bl	8009320 <_free_r>
 8009432:	e7f1      	b.n	8009418 <_realloc_r+0x40>

08009434 <__ascii_wctomb>:
 8009434:	4603      	mov	r3, r0
 8009436:	4608      	mov	r0, r1
 8009438:	b141      	cbz	r1, 800944c <__ascii_wctomb+0x18>
 800943a:	2aff      	cmp	r2, #255	@ 0xff
 800943c:	d904      	bls.n	8009448 <__ascii_wctomb+0x14>
 800943e:	228a      	movs	r2, #138	@ 0x8a
 8009440:	601a      	str	r2, [r3, #0]
 8009442:	f04f 30ff 	mov.w	r0, #4294967295
 8009446:	4770      	bx	lr
 8009448:	700a      	strb	r2, [r1, #0]
 800944a:	2001      	movs	r0, #1
 800944c:	4770      	bx	lr
	...

08009450 <fiprintf>:
 8009450:	b40e      	push	{r1, r2, r3}
 8009452:	b503      	push	{r0, r1, lr}
 8009454:	4601      	mov	r1, r0
 8009456:	ab03      	add	r3, sp, #12
 8009458:	4805      	ldr	r0, [pc, #20]	@ (8009470 <fiprintf+0x20>)
 800945a:	f853 2b04 	ldr.w	r2, [r3], #4
 800945e:	6800      	ldr	r0, [r0, #0]
 8009460:	9301      	str	r3, [sp, #4]
 8009462:	f000 f83f 	bl	80094e4 <_vfiprintf_r>
 8009466:	b002      	add	sp, #8
 8009468:	f85d eb04 	ldr.w	lr, [sp], #4
 800946c:	b003      	add	sp, #12
 800946e:	4770      	bx	lr
 8009470:	2400008c 	.word	0x2400008c

08009474 <abort>:
 8009474:	b508      	push	{r3, lr}
 8009476:	2006      	movs	r0, #6
 8009478:	f000 fa08 	bl	800988c <raise>
 800947c:	2001      	movs	r0, #1
 800947e:	f000 fa8f 	bl	80099a0 <_exit>

08009482 <_malloc_usable_size_r>:
 8009482:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009486:	1f18      	subs	r0, r3, #4
 8009488:	2b00      	cmp	r3, #0
 800948a:	bfbc      	itt	lt
 800948c:	580b      	ldrlt	r3, [r1, r0]
 800948e:	18c0      	addlt	r0, r0, r3
 8009490:	4770      	bx	lr

08009492 <__sfputc_r>:
 8009492:	6893      	ldr	r3, [r2, #8]
 8009494:	3b01      	subs	r3, #1
 8009496:	2b00      	cmp	r3, #0
 8009498:	b410      	push	{r4}
 800949a:	6093      	str	r3, [r2, #8]
 800949c:	da08      	bge.n	80094b0 <__sfputc_r+0x1e>
 800949e:	6994      	ldr	r4, [r2, #24]
 80094a0:	42a3      	cmp	r3, r4
 80094a2:	db01      	blt.n	80094a8 <__sfputc_r+0x16>
 80094a4:	290a      	cmp	r1, #10
 80094a6:	d103      	bne.n	80094b0 <__sfputc_r+0x1e>
 80094a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094ac:	f000 b932 	b.w	8009714 <__swbuf_r>
 80094b0:	6813      	ldr	r3, [r2, #0]
 80094b2:	1c58      	adds	r0, r3, #1
 80094b4:	6010      	str	r0, [r2, #0]
 80094b6:	7019      	strb	r1, [r3, #0]
 80094b8:	4608      	mov	r0, r1
 80094ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094be:	4770      	bx	lr

080094c0 <__sfputs_r>:
 80094c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094c2:	4606      	mov	r6, r0
 80094c4:	460f      	mov	r7, r1
 80094c6:	4614      	mov	r4, r2
 80094c8:	18d5      	adds	r5, r2, r3
 80094ca:	42ac      	cmp	r4, r5
 80094cc:	d101      	bne.n	80094d2 <__sfputs_r+0x12>
 80094ce:	2000      	movs	r0, #0
 80094d0:	e007      	b.n	80094e2 <__sfputs_r+0x22>
 80094d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094d6:	463a      	mov	r2, r7
 80094d8:	4630      	mov	r0, r6
 80094da:	f7ff ffda 	bl	8009492 <__sfputc_r>
 80094de:	1c43      	adds	r3, r0, #1
 80094e0:	d1f3      	bne.n	80094ca <__sfputs_r+0xa>
 80094e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080094e4 <_vfiprintf_r>:
 80094e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094e8:	460d      	mov	r5, r1
 80094ea:	b09d      	sub	sp, #116	@ 0x74
 80094ec:	4614      	mov	r4, r2
 80094ee:	4698      	mov	r8, r3
 80094f0:	4606      	mov	r6, r0
 80094f2:	b118      	cbz	r0, 80094fc <_vfiprintf_r+0x18>
 80094f4:	6a03      	ldr	r3, [r0, #32]
 80094f6:	b90b      	cbnz	r3, 80094fc <_vfiprintf_r+0x18>
 80094f8:	f7fe f9bc 	bl	8007874 <__sinit>
 80094fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80094fe:	07d9      	lsls	r1, r3, #31
 8009500:	d405      	bmi.n	800950e <_vfiprintf_r+0x2a>
 8009502:	89ab      	ldrh	r3, [r5, #12]
 8009504:	059a      	lsls	r2, r3, #22
 8009506:	d402      	bmi.n	800950e <_vfiprintf_r+0x2a>
 8009508:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800950a:	f7fe fa80 	bl	8007a0e <__retarget_lock_acquire_recursive>
 800950e:	89ab      	ldrh	r3, [r5, #12]
 8009510:	071b      	lsls	r3, r3, #28
 8009512:	d501      	bpl.n	8009518 <_vfiprintf_r+0x34>
 8009514:	692b      	ldr	r3, [r5, #16]
 8009516:	b99b      	cbnz	r3, 8009540 <_vfiprintf_r+0x5c>
 8009518:	4629      	mov	r1, r5
 800951a:	4630      	mov	r0, r6
 800951c:	f000 f938 	bl	8009790 <__swsetup_r>
 8009520:	b170      	cbz	r0, 8009540 <_vfiprintf_r+0x5c>
 8009522:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009524:	07dc      	lsls	r4, r3, #31
 8009526:	d504      	bpl.n	8009532 <_vfiprintf_r+0x4e>
 8009528:	f04f 30ff 	mov.w	r0, #4294967295
 800952c:	b01d      	add	sp, #116	@ 0x74
 800952e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009532:	89ab      	ldrh	r3, [r5, #12]
 8009534:	0598      	lsls	r0, r3, #22
 8009536:	d4f7      	bmi.n	8009528 <_vfiprintf_r+0x44>
 8009538:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800953a:	f7fe fa69 	bl	8007a10 <__retarget_lock_release_recursive>
 800953e:	e7f3      	b.n	8009528 <_vfiprintf_r+0x44>
 8009540:	2300      	movs	r3, #0
 8009542:	9309      	str	r3, [sp, #36]	@ 0x24
 8009544:	2320      	movs	r3, #32
 8009546:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800954a:	f8cd 800c 	str.w	r8, [sp, #12]
 800954e:	2330      	movs	r3, #48	@ 0x30
 8009550:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009700 <_vfiprintf_r+0x21c>
 8009554:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009558:	f04f 0901 	mov.w	r9, #1
 800955c:	4623      	mov	r3, r4
 800955e:	469a      	mov	sl, r3
 8009560:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009564:	b10a      	cbz	r2, 800956a <_vfiprintf_r+0x86>
 8009566:	2a25      	cmp	r2, #37	@ 0x25
 8009568:	d1f9      	bne.n	800955e <_vfiprintf_r+0x7a>
 800956a:	ebba 0b04 	subs.w	fp, sl, r4
 800956e:	d00b      	beq.n	8009588 <_vfiprintf_r+0xa4>
 8009570:	465b      	mov	r3, fp
 8009572:	4622      	mov	r2, r4
 8009574:	4629      	mov	r1, r5
 8009576:	4630      	mov	r0, r6
 8009578:	f7ff ffa2 	bl	80094c0 <__sfputs_r>
 800957c:	3001      	adds	r0, #1
 800957e:	f000 80a7 	beq.w	80096d0 <_vfiprintf_r+0x1ec>
 8009582:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009584:	445a      	add	r2, fp
 8009586:	9209      	str	r2, [sp, #36]	@ 0x24
 8009588:	f89a 3000 	ldrb.w	r3, [sl]
 800958c:	2b00      	cmp	r3, #0
 800958e:	f000 809f 	beq.w	80096d0 <_vfiprintf_r+0x1ec>
 8009592:	2300      	movs	r3, #0
 8009594:	f04f 32ff 	mov.w	r2, #4294967295
 8009598:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800959c:	f10a 0a01 	add.w	sl, sl, #1
 80095a0:	9304      	str	r3, [sp, #16]
 80095a2:	9307      	str	r3, [sp, #28]
 80095a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80095a8:	931a      	str	r3, [sp, #104]	@ 0x68
 80095aa:	4654      	mov	r4, sl
 80095ac:	2205      	movs	r2, #5
 80095ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095b2:	4853      	ldr	r0, [pc, #332]	@ (8009700 <_vfiprintf_r+0x21c>)
 80095b4:	f7f6 fe94 	bl	80002e0 <memchr>
 80095b8:	9a04      	ldr	r2, [sp, #16]
 80095ba:	b9d8      	cbnz	r0, 80095f4 <_vfiprintf_r+0x110>
 80095bc:	06d1      	lsls	r1, r2, #27
 80095be:	bf44      	itt	mi
 80095c0:	2320      	movmi	r3, #32
 80095c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80095c6:	0713      	lsls	r3, r2, #28
 80095c8:	bf44      	itt	mi
 80095ca:	232b      	movmi	r3, #43	@ 0x2b
 80095cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80095d0:	f89a 3000 	ldrb.w	r3, [sl]
 80095d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80095d6:	d015      	beq.n	8009604 <_vfiprintf_r+0x120>
 80095d8:	9a07      	ldr	r2, [sp, #28]
 80095da:	4654      	mov	r4, sl
 80095dc:	2000      	movs	r0, #0
 80095de:	f04f 0c0a 	mov.w	ip, #10
 80095e2:	4621      	mov	r1, r4
 80095e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80095e8:	3b30      	subs	r3, #48	@ 0x30
 80095ea:	2b09      	cmp	r3, #9
 80095ec:	d94b      	bls.n	8009686 <_vfiprintf_r+0x1a2>
 80095ee:	b1b0      	cbz	r0, 800961e <_vfiprintf_r+0x13a>
 80095f0:	9207      	str	r2, [sp, #28]
 80095f2:	e014      	b.n	800961e <_vfiprintf_r+0x13a>
 80095f4:	eba0 0308 	sub.w	r3, r0, r8
 80095f8:	fa09 f303 	lsl.w	r3, r9, r3
 80095fc:	4313      	orrs	r3, r2
 80095fe:	9304      	str	r3, [sp, #16]
 8009600:	46a2      	mov	sl, r4
 8009602:	e7d2      	b.n	80095aa <_vfiprintf_r+0xc6>
 8009604:	9b03      	ldr	r3, [sp, #12]
 8009606:	1d19      	adds	r1, r3, #4
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	9103      	str	r1, [sp, #12]
 800960c:	2b00      	cmp	r3, #0
 800960e:	bfbb      	ittet	lt
 8009610:	425b      	neglt	r3, r3
 8009612:	f042 0202 	orrlt.w	r2, r2, #2
 8009616:	9307      	strge	r3, [sp, #28]
 8009618:	9307      	strlt	r3, [sp, #28]
 800961a:	bfb8      	it	lt
 800961c:	9204      	strlt	r2, [sp, #16]
 800961e:	7823      	ldrb	r3, [r4, #0]
 8009620:	2b2e      	cmp	r3, #46	@ 0x2e
 8009622:	d10a      	bne.n	800963a <_vfiprintf_r+0x156>
 8009624:	7863      	ldrb	r3, [r4, #1]
 8009626:	2b2a      	cmp	r3, #42	@ 0x2a
 8009628:	d132      	bne.n	8009690 <_vfiprintf_r+0x1ac>
 800962a:	9b03      	ldr	r3, [sp, #12]
 800962c:	1d1a      	adds	r2, r3, #4
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	9203      	str	r2, [sp, #12]
 8009632:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009636:	3402      	adds	r4, #2
 8009638:	9305      	str	r3, [sp, #20]
 800963a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009710 <_vfiprintf_r+0x22c>
 800963e:	7821      	ldrb	r1, [r4, #0]
 8009640:	2203      	movs	r2, #3
 8009642:	4650      	mov	r0, sl
 8009644:	f7f6 fe4c 	bl	80002e0 <memchr>
 8009648:	b138      	cbz	r0, 800965a <_vfiprintf_r+0x176>
 800964a:	9b04      	ldr	r3, [sp, #16]
 800964c:	eba0 000a 	sub.w	r0, r0, sl
 8009650:	2240      	movs	r2, #64	@ 0x40
 8009652:	4082      	lsls	r2, r0
 8009654:	4313      	orrs	r3, r2
 8009656:	3401      	adds	r4, #1
 8009658:	9304      	str	r3, [sp, #16]
 800965a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800965e:	4829      	ldr	r0, [pc, #164]	@ (8009704 <_vfiprintf_r+0x220>)
 8009660:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009664:	2206      	movs	r2, #6
 8009666:	f7f6 fe3b 	bl	80002e0 <memchr>
 800966a:	2800      	cmp	r0, #0
 800966c:	d03f      	beq.n	80096ee <_vfiprintf_r+0x20a>
 800966e:	4b26      	ldr	r3, [pc, #152]	@ (8009708 <_vfiprintf_r+0x224>)
 8009670:	bb1b      	cbnz	r3, 80096ba <_vfiprintf_r+0x1d6>
 8009672:	9b03      	ldr	r3, [sp, #12]
 8009674:	3307      	adds	r3, #7
 8009676:	f023 0307 	bic.w	r3, r3, #7
 800967a:	3308      	adds	r3, #8
 800967c:	9303      	str	r3, [sp, #12]
 800967e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009680:	443b      	add	r3, r7
 8009682:	9309      	str	r3, [sp, #36]	@ 0x24
 8009684:	e76a      	b.n	800955c <_vfiprintf_r+0x78>
 8009686:	fb0c 3202 	mla	r2, ip, r2, r3
 800968a:	460c      	mov	r4, r1
 800968c:	2001      	movs	r0, #1
 800968e:	e7a8      	b.n	80095e2 <_vfiprintf_r+0xfe>
 8009690:	2300      	movs	r3, #0
 8009692:	3401      	adds	r4, #1
 8009694:	9305      	str	r3, [sp, #20]
 8009696:	4619      	mov	r1, r3
 8009698:	f04f 0c0a 	mov.w	ip, #10
 800969c:	4620      	mov	r0, r4
 800969e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096a2:	3a30      	subs	r2, #48	@ 0x30
 80096a4:	2a09      	cmp	r2, #9
 80096a6:	d903      	bls.n	80096b0 <_vfiprintf_r+0x1cc>
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d0c6      	beq.n	800963a <_vfiprintf_r+0x156>
 80096ac:	9105      	str	r1, [sp, #20]
 80096ae:	e7c4      	b.n	800963a <_vfiprintf_r+0x156>
 80096b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80096b4:	4604      	mov	r4, r0
 80096b6:	2301      	movs	r3, #1
 80096b8:	e7f0      	b.n	800969c <_vfiprintf_r+0x1b8>
 80096ba:	ab03      	add	r3, sp, #12
 80096bc:	9300      	str	r3, [sp, #0]
 80096be:	462a      	mov	r2, r5
 80096c0:	4b12      	ldr	r3, [pc, #72]	@ (800970c <_vfiprintf_r+0x228>)
 80096c2:	a904      	add	r1, sp, #16
 80096c4:	4630      	mov	r0, r6
 80096c6:	f7fd fca3 	bl	8007010 <_printf_float>
 80096ca:	4607      	mov	r7, r0
 80096cc:	1c78      	adds	r0, r7, #1
 80096ce:	d1d6      	bne.n	800967e <_vfiprintf_r+0x19a>
 80096d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80096d2:	07d9      	lsls	r1, r3, #31
 80096d4:	d405      	bmi.n	80096e2 <_vfiprintf_r+0x1fe>
 80096d6:	89ab      	ldrh	r3, [r5, #12]
 80096d8:	059a      	lsls	r2, r3, #22
 80096da:	d402      	bmi.n	80096e2 <_vfiprintf_r+0x1fe>
 80096dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80096de:	f7fe f997 	bl	8007a10 <__retarget_lock_release_recursive>
 80096e2:	89ab      	ldrh	r3, [r5, #12]
 80096e4:	065b      	lsls	r3, r3, #25
 80096e6:	f53f af1f 	bmi.w	8009528 <_vfiprintf_r+0x44>
 80096ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80096ec:	e71e      	b.n	800952c <_vfiprintf_r+0x48>
 80096ee:	ab03      	add	r3, sp, #12
 80096f0:	9300      	str	r3, [sp, #0]
 80096f2:	462a      	mov	r2, r5
 80096f4:	4b05      	ldr	r3, [pc, #20]	@ (800970c <_vfiprintf_r+0x228>)
 80096f6:	a904      	add	r1, sp, #16
 80096f8:	4630      	mov	r0, r6
 80096fa:	f7fd ff11 	bl	8007520 <_printf_i>
 80096fe:	e7e4      	b.n	80096ca <_vfiprintf_r+0x1e6>
 8009700:	08010a02 	.word	0x08010a02
 8009704:	08010a0c 	.word	0x08010a0c
 8009708:	08007011 	.word	0x08007011
 800970c:	080094c1 	.word	0x080094c1
 8009710:	08010a08 	.word	0x08010a08

08009714 <__swbuf_r>:
 8009714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009716:	460e      	mov	r6, r1
 8009718:	4614      	mov	r4, r2
 800971a:	4605      	mov	r5, r0
 800971c:	b118      	cbz	r0, 8009726 <__swbuf_r+0x12>
 800971e:	6a03      	ldr	r3, [r0, #32]
 8009720:	b90b      	cbnz	r3, 8009726 <__swbuf_r+0x12>
 8009722:	f7fe f8a7 	bl	8007874 <__sinit>
 8009726:	69a3      	ldr	r3, [r4, #24]
 8009728:	60a3      	str	r3, [r4, #8]
 800972a:	89a3      	ldrh	r3, [r4, #12]
 800972c:	071a      	lsls	r2, r3, #28
 800972e:	d501      	bpl.n	8009734 <__swbuf_r+0x20>
 8009730:	6923      	ldr	r3, [r4, #16]
 8009732:	b943      	cbnz	r3, 8009746 <__swbuf_r+0x32>
 8009734:	4621      	mov	r1, r4
 8009736:	4628      	mov	r0, r5
 8009738:	f000 f82a 	bl	8009790 <__swsetup_r>
 800973c:	b118      	cbz	r0, 8009746 <__swbuf_r+0x32>
 800973e:	f04f 37ff 	mov.w	r7, #4294967295
 8009742:	4638      	mov	r0, r7
 8009744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009746:	6823      	ldr	r3, [r4, #0]
 8009748:	6922      	ldr	r2, [r4, #16]
 800974a:	1a98      	subs	r0, r3, r2
 800974c:	6963      	ldr	r3, [r4, #20]
 800974e:	b2f6      	uxtb	r6, r6
 8009750:	4283      	cmp	r3, r0
 8009752:	4637      	mov	r7, r6
 8009754:	dc05      	bgt.n	8009762 <__swbuf_r+0x4e>
 8009756:	4621      	mov	r1, r4
 8009758:	4628      	mov	r0, r5
 800975a:	f7ff fd4f 	bl	80091fc <_fflush_r>
 800975e:	2800      	cmp	r0, #0
 8009760:	d1ed      	bne.n	800973e <__swbuf_r+0x2a>
 8009762:	68a3      	ldr	r3, [r4, #8]
 8009764:	3b01      	subs	r3, #1
 8009766:	60a3      	str	r3, [r4, #8]
 8009768:	6823      	ldr	r3, [r4, #0]
 800976a:	1c5a      	adds	r2, r3, #1
 800976c:	6022      	str	r2, [r4, #0]
 800976e:	701e      	strb	r6, [r3, #0]
 8009770:	6962      	ldr	r2, [r4, #20]
 8009772:	1c43      	adds	r3, r0, #1
 8009774:	429a      	cmp	r2, r3
 8009776:	d004      	beq.n	8009782 <__swbuf_r+0x6e>
 8009778:	89a3      	ldrh	r3, [r4, #12]
 800977a:	07db      	lsls	r3, r3, #31
 800977c:	d5e1      	bpl.n	8009742 <__swbuf_r+0x2e>
 800977e:	2e0a      	cmp	r6, #10
 8009780:	d1df      	bne.n	8009742 <__swbuf_r+0x2e>
 8009782:	4621      	mov	r1, r4
 8009784:	4628      	mov	r0, r5
 8009786:	f7ff fd39 	bl	80091fc <_fflush_r>
 800978a:	2800      	cmp	r0, #0
 800978c:	d0d9      	beq.n	8009742 <__swbuf_r+0x2e>
 800978e:	e7d6      	b.n	800973e <__swbuf_r+0x2a>

08009790 <__swsetup_r>:
 8009790:	b538      	push	{r3, r4, r5, lr}
 8009792:	4b29      	ldr	r3, [pc, #164]	@ (8009838 <__swsetup_r+0xa8>)
 8009794:	4605      	mov	r5, r0
 8009796:	6818      	ldr	r0, [r3, #0]
 8009798:	460c      	mov	r4, r1
 800979a:	b118      	cbz	r0, 80097a4 <__swsetup_r+0x14>
 800979c:	6a03      	ldr	r3, [r0, #32]
 800979e:	b90b      	cbnz	r3, 80097a4 <__swsetup_r+0x14>
 80097a0:	f7fe f868 	bl	8007874 <__sinit>
 80097a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097a8:	0719      	lsls	r1, r3, #28
 80097aa:	d422      	bmi.n	80097f2 <__swsetup_r+0x62>
 80097ac:	06da      	lsls	r2, r3, #27
 80097ae:	d407      	bmi.n	80097c0 <__swsetup_r+0x30>
 80097b0:	2209      	movs	r2, #9
 80097b2:	602a      	str	r2, [r5, #0]
 80097b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097b8:	81a3      	strh	r3, [r4, #12]
 80097ba:	f04f 30ff 	mov.w	r0, #4294967295
 80097be:	e033      	b.n	8009828 <__swsetup_r+0x98>
 80097c0:	0758      	lsls	r0, r3, #29
 80097c2:	d512      	bpl.n	80097ea <__swsetup_r+0x5a>
 80097c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80097c6:	b141      	cbz	r1, 80097da <__swsetup_r+0x4a>
 80097c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80097cc:	4299      	cmp	r1, r3
 80097ce:	d002      	beq.n	80097d6 <__swsetup_r+0x46>
 80097d0:	4628      	mov	r0, r5
 80097d2:	f7ff fda5 	bl	8009320 <_free_r>
 80097d6:	2300      	movs	r3, #0
 80097d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80097da:	89a3      	ldrh	r3, [r4, #12]
 80097dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80097e0:	81a3      	strh	r3, [r4, #12]
 80097e2:	2300      	movs	r3, #0
 80097e4:	6063      	str	r3, [r4, #4]
 80097e6:	6923      	ldr	r3, [r4, #16]
 80097e8:	6023      	str	r3, [r4, #0]
 80097ea:	89a3      	ldrh	r3, [r4, #12]
 80097ec:	f043 0308 	orr.w	r3, r3, #8
 80097f0:	81a3      	strh	r3, [r4, #12]
 80097f2:	6923      	ldr	r3, [r4, #16]
 80097f4:	b94b      	cbnz	r3, 800980a <__swsetup_r+0x7a>
 80097f6:	89a3      	ldrh	r3, [r4, #12]
 80097f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80097fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009800:	d003      	beq.n	800980a <__swsetup_r+0x7a>
 8009802:	4621      	mov	r1, r4
 8009804:	4628      	mov	r0, r5
 8009806:	f000 f86f 	bl	80098e8 <__smakebuf_r>
 800980a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800980e:	f013 0201 	ands.w	r2, r3, #1
 8009812:	d00a      	beq.n	800982a <__swsetup_r+0x9a>
 8009814:	2200      	movs	r2, #0
 8009816:	60a2      	str	r2, [r4, #8]
 8009818:	6962      	ldr	r2, [r4, #20]
 800981a:	4252      	negs	r2, r2
 800981c:	61a2      	str	r2, [r4, #24]
 800981e:	6922      	ldr	r2, [r4, #16]
 8009820:	b942      	cbnz	r2, 8009834 <__swsetup_r+0xa4>
 8009822:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009826:	d1c5      	bne.n	80097b4 <__swsetup_r+0x24>
 8009828:	bd38      	pop	{r3, r4, r5, pc}
 800982a:	0799      	lsls	r1, r3, #30
 800982c:	bf58      	it	pl
 800982e:	6962      	ldrpl	r2, [r4, #20]
 8009830:	60a2      	str	r2, [r4, #8]
 8009832:	e7f4      	b.n	800981e <__swsetup_r+0x8e>
 8009834:	2000      	movs	r0, #0
 8009836:	e7f7      	b.n	8009828 <__swsetup_r+0x98>
 8009838:	2400008c 	.word	0x2400008c

0800983c <_raise_r>:
 800983c:	291f      	cmp	r1, #31
 800983e:	b538      	push	{r3, r4, r5, lr}
 8009840:	4605      	mov	r5, r0
 8009842:	460c      	mov	r4, r1
 8009844:	d904      	bls.n	8009850 <_raise_r+0x14>
 8009846:	2316      	movs	r3, #22
 8009848:	6003      	str	r3, [r0, #0]
 800984a:	f04f 30ff 	mov.w	r0, #4294967295
 800984e:	bd38      	pop	{r3, r4, r5, pc}
 8009850:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009852:	b112      	cbz	r2, 800985a <_raise_r+0x1e>
 8009854:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009858:	b94b      	cbnz	r3, 800986e <_raise_r+0x32>
 800985a:	4628      	mov	r0, r5
 800985c:	f7fd f9f2 	bl	8006c44 <_getpid_r>
 8009860:	4622      	mov	r2, r4
 8009862:	4601      	mov	r1, r0
 8009864:	4628      	mov	r0, r5
 8009866:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800986a:	f7fd b9ef 	b.w	8006c4c <_kill_r>
 800986e:	2b01      	cmp	r3, #1
 8009870:	d00a      	beq.n	8009888 <_raise_r+0x4c>
 8009872:	1c59      	adds	r1, r3, #1
 8009874:	d103      	bne.n	800987e <_raise_r+0x42>
 8009876:	2316      	movs	r3, #22
 8009878:	6003      	str	r3, [r0, #0]
 800987a:	2001      	movs	r0, #1
 800987c:	e7e7      	b.n	800984e <_raise_r+0x12>
 800987e:	2100      	movs	r1, #0
 8009880:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009884:	4620      	mov	r0, r4
 8009886:	4798      	blx	r3
 8009888:	2000      	movs	r0, #0
 800988a:	e7e0      	b.n	800984e <_raise_r+0x12>

0800988c <raise>:
 800988c:	4b02      	ldr	r3, [pc, #8]	@ (8009898 <raise+0xc>)
 800988e:	4601      	mov	r1, r0
 8009890:	6818      	ldr	r0, [r3, #0]
 8009892:	f7ff bfd3 	b.w	800983c <_raise_r>
 8009896:	bf00      	nop
 8009898:	2400008c 	.word	0x2400008c

0800989c <__swhatbuf_r>:
 800989c:	b570      	push	{r4, r5, r6, lr}
 800989e:	460c      	mov	r4, r1
 80098a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098a4:	2900      	cmp	r1, #0
 80098a6:	b096      	sub	sp, #88	@ 0x58
 80098a8:	4615      	mov	r5, r2
 80098aa:	461e      	mov	r6, r3
 80098ac:	da0d      	bge.n	80098ca <__swhatbuf_r+0x2e>
 80098ae:	89a3      	ldrh	r3, [r4, #12]
 80098b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80098b4:	f04f 0100 	mov.w	r1, #0
 80098b8:	bf14      	ite	ne
 80098ba:	2340      	movne	r3, #64	@ 0x40
 80098bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80098c0:	2000      	movs	r0, #0
 80098c2:	6031      	str	r1, [r6, #0]
 80098c4:	602b      	str	r3, [r5, #0]
 80098c6:	b016      	add	sp, #88	@ 0x58
 80098c8:	bd70      	pop	{r4, r5, r6, pc}
 80098ca:	466a      	mov	r2, sp
 80098cc:	f000 f848 	bl	8009960 <_fstat_r>
 80098d0:	2800      	cmp	r0, #0
 80098d2:	dbec      	blt.n	80098ae <__swhatbuf_r+0x12>
 80098d4:	9901      	ldr	r1, [sp, #4]
 80098d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80098da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80098de:	4259      	negs	r1, r3
 80098e0:	4159      	adcs	r1, r3
 80098e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80098e6:	e7eb      	b.n	80098c0 <__swhatbuf_r+0x24>

080098e8 <__smakebuf_r>:
 80098e8:	898b      	ldrh	r3, [r1, #12]
 80098ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098ec:	079d      	lsls	r5, r3, #30
 80098ee:	4606      	mov	r6, r0
 80098f0:	460c      	mov	r4, r1
 80098f2:	d507      	bpl.n	8009904 <__smakebuf_r+0x1c>
 80098f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80098f8:	6023      	str	r3, [r4, #0]
 80098fa:	6123      	str	r3, [r4, #16]
 80098fc:	2301      	movs	r3, #1
 80098fe:	6163      	str	r3, [r4, #20]
 8009900:	b003      	add	sp, #12
 8009902:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009904:	ab01      	add	r3, sp, #4
 8009906:	466a      	mov	r2, sp
 8009908:	f7ff ffc8 	bl	800989c <__swhatbuf_r>
 800990c:	9f00      	ldr	r7, [sp, #0]
 800990e:	4605      	mov	r5, r0
 8009910:	4639      	mov	r1, r7
 8009912:	4630      	mov	r0, r6
 8009914:	f7fe fe90 	bl	8008638 <_malloc_r>
 8009918:	b948      	cbnz	r0, 800992e <__smakebuf_r+0x46>
 800991a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800991e:	059a      	lsls	r2, r3, #22
 8009920:	d4ee      	bmi.n	8009900 <__smakebuf_r+0x18>
 8009922:	f023 0303 	bic.w	r3, r3, #3
 8009926:	f043 0302 	orr.w	r3, r3, #2
 800992a:	81a3      	strh	r3, [r4, #12]
 800992c:	e7e2      	b.n	80098f4 <__smakebuf_r+0xc>
 800992e:	89a3      	ldrh	r3, [r4, #12]
 8009930:	6020      	str	r0, [r4, #0]
 8009932:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009936:	81a3      	strh	r3, [r4, #12]
 8009938:	9b01      	ldr	r3, [sp, #4]
 800993a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800993e:	b15b      	cbz	r3, 8009958 <__smakebuf_r+0x70>
 8009940:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009944:	4630      	mov	r0, r6
 8009946:	f7fd f97f 	bl	8006c48 <_isatty_r>
 800994a:	b128      	cbz	r0, 8009958 <__smakebuf_r+0x70>
 800994c:	89a3      	ldrh	r3, [r4, #12]
 800994e:	f023 0303 	bic.w	r3, r3, #3
 8009952:	f043 0301 	orr.w	r3, r3, #1
 8009956:	81a3      	strh	r3, [r4, #12]
 8009958:	89a3      	ldrh	r3, [r4, #12]
 800995a:	431d      	orrs	r5, r3
 800995c:	81a5      	strh	r5, [r4, #12]
 800995e:	e7cf      	b.n	8009900 <__smakebuf_r+0x18>

08009960 <_fstat_r>:
 8009960:	b538      	push	{r3, r4, r5, lr}
 8009962:	4d07      	ldr	r5, [pc, #28]	@ (8009980 <_fstat_r+0x20>)
 8009964:	2300      	movs	r3, #0
 8009966:	4604      	mov	r4, r0
 8009968:	4608      	mov	r0, r1
 800996a:	4611      	mov	r1, r2
 800996c:	602b      	str	r3, [r5, #0]
 800996e:	f7fd f967 	bl	8006c40 <_fstat>
 8009972:	1c43      	adds	r3, r0, #1
 8009974:	d102      	bne.n	800997c <_fstat_r+0x1c>
 8009976:	682b      	ldr	r3, [r5, #0]
 8009978:	b103      	cbz	r3, 800997c <_fstat_r+0x1c>
 800997a:	6023      	str	r3, [r4, #0]
 800997c:	bd38      	pop	{r3, r4, r5, pc}
 800997e:	bf00      	nop
 8009980:	24000b90 	.word	0x24000b90

08009984 <_sbrk>:
 8009984:	4a04      	ldr	r2, [pc, #16]	@ (8009998 <_sbrk+0x14>)
 8009986:	6811      	ldr	r1, [r2, #0]
 8009988:	4603      	mov	r3, r0
 800998a:	b909      	cbnz	r1, 8009990 <_sbrk+0xc>
 800998c:	4903      	ldr	r1, [pc, #12]	@ (800999c <_sbrk+0x18>)
 800998e:	6011      	str	r1, [r2, #0]
 8009990:	6810      	ldr	r0, [r2, #0]
 8009992:	4403      	add	r3, r0
 8009994:	6013      	str	r3, [r2, #0]
 8009996:	4770      	bx	lr
 8009998:	24000b94 	.word	0x24000b94
 800999c:	24000b98 	.word	0x24000b98

080099a0 <_exit>:
 80099a0:	e7fe      	b.n	80099a0 <_exit>
	...

080099a4 <_init>:
 80099a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099a6:	bf00      	nop
 80099a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099aa:	bc08      	pop	{r3}
 80099ac:	469e      	mov	lr, r3
 80099ae:	4770      	bx	lr

080099b0 <_fini>:
 80099b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099b2:	bf00      	nop
 80099b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099b6:	bc08      	pop	{r3}
 80099b8:	469e      	mov	lr, r3
 80099ba:	4770      	bx	lr
